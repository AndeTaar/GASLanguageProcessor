Color white = Color{red=255, green=255, blue=255, alpha=1};

Canvas canvas = Canvas{width=950, height=950, backgroundColor=white};

num g = white.green;

Color red = Color{red=255, green=0, blue=0, alpha=white.alpha};

Color blue = Color{red=0, green=0, blue=255, alpha=white.alpha};
Color black = Color{red=0, green=0, blue=0, alpha=white.alpha};

Color blackToBlue = LinearGradient{
    stops=<num>[0, 100],
    colors=<Color>[black, blue],
    alpha=1,
    rotation=90
};

TypeDef parseTreeNode {
    square: Rectangle,
    arrowTop: Arrow,
    arrowBottom: Arrow,
    operatorArrow: Arrow,
    nodeType: Text,
    operator: Text
}

num width = 100;
num height = 60;
num vertDistance = 40;
num horDistance = 90;

parseTreeNode DrawNodeWithSingleArrow(Point center, string content){
    return parseTreeNode{
        square=Rectangle{
            topLeft=Point{x=center.x-width/2, y=center.y-height/2},
            bottomRight=Point{x=center.x+width/2, y=center.y+height/2},
            stroke=0, color=blackToBlue, strokeColor=white, rounding=10
        },
        arrowTop=Arrow{
            start=Point{x=center.x, y=center.y+height/2},
            end=Point{x=center.x, y=center.y+height/2+vertDistance},
            stroke=4
        },
        nodeType=Text{
            point=Point{x=center.x, y=center.y},
            size=16,
            content=content,
            color=white
        }
    };
}


parseTreeNode DrawNode(Point center, string content){
    return parseTreeNode{
        square=Rectangle{
            topLeft=Point{x=center.x-width/2, y=center.y-height/2},
            bottomRight=Point{x=center.x+width/2, y=center.y+height/2},
            stroke=0, color=blackToBlue, strokeColor=white, rounding=10
        },
        arrowTop=Arrow{
            start=Point{x=center.x, y=center.y+height/2},
            end=Point{x=center.x+horDistance, y=center.y+height/2+vertDistance},
            stroke=4
        },
        arrowBottom=Arrow{
             start=Point{x=center.x, y=center.y+height/2},
             end=Point{x=center.x-horDistance, y=center.y+height/2+vertDistance},
             stroke=4
        },
        nodeType=Text{
            point=Point{x=center.x, y=center.y},
            size=16,
            content=content,
            color=white
        }
    };
}

parseTreeNode DrawNodeWithOperator(Point center, string content, string operator){
    return parseTreeNode{
        square=Rectangle{
            topLeft=Point{x=center.x-width/2, y=center.y-height/2},
            bottomRight=Point{x=center.x+width/2, y=center.y+height/2},
            stroke=0, color=blackToBlue, strokeColor=white, rounding=10
        },
        arrowTop=Arrow{
            start=Point{x=center.x, y=center.y+height/2},
            end=Point{x=center.x+horDistance, y=center.y+height/2+vertDistance},
            stroke=4
        },
        arrowBottom=Arrow{
             start=Point{x=center.x, y=center.y+height/2},
             end=Point{x=center.x-horDistance, y=center.y+height/2+vertDistance},
             stroke=4
        },
        operatorArrow=Arrow{
            start=Point{x=center.x, y=center.y+height/2},
            end=Point{x=center.x, y=center.y+height},
            stroke=4
        },
        nodeType=Text{
            point=Point{x=center.x, y=center.y},
            size=16,
            content=content,
            color=white
        },
        operator=Text{
            point=Point{x=center.x, y=center.y+height+20},
            size=30,
            content=operator,
            color=black
        }
    };
}

AnyStruct[] shapes = new AnyStruct[400];

Point p = Point{x=canvas.width/2-30, y=100};

string[] contents = new string[21];
contents[0] = "Expression";
contents[1] = "EquExpr";
contents[2] = "EquExpr";
contents[3] = "RelExpr";
contents[4] = "RelExpr";
contents[5] = "BinExpr";
contents[6] = "BinExpr";
contents[7] = "MultExpr";
contents[8] = "MultExpr";
contents[9] = "UnaExpr";
contents[10] = "Number";
contents[11] = "UnaExpr";
contents[12] = "Number";
contents[13] = "UnaExpr";
contents[14] = "Identifier";
contents[15] = "MultExpr";
contents[16] = "MultExpr";
contents[17] = "UnaExpr";
contents[18] = "Identifier";
contents[19] = "UnaExpr";
contents[20] = "Identifier";

string[] operators = new string[20];
operators[0] = "&amp;&amp;";
operators[5] = "+";
operators[6] = "-";
operators[8] = "*";
operators[16] = "/";

for (num i = 0; i < 21; i++) {
    if (i == 0 || i == 5 || i == 6 || i == 8 || i == 16) {
        shapes[i] = DrawNodeWithOperator(p, contents[i], operators[i]);
    } else {
        shapes[i] = DrawNodeWithSingleArrow(p, contents[i]);
    }

    if (i == 1 || i == 3 || i == 7 || i == 9 || i == 11 || i == 15 || i == 17 || i == 19) {
        p.y += height + vertDistance+5;
        p.x -= horDistance+30;
    } else if (i == 2 || i == 4 || i == 8 || i == 10 || i == 14 || i == 16 || i == 18 || i == 20) {
        p.x += 2*horDistance+60;
    } else if (i == 5) {
        p.y += height + vertDistance+5;
        p.x -= 2*horDistance+180;
    } else if (i == 6) {
        p.x += 2*horDistance+220;
    } else if (i == 7) {
        p.y += height + vertDistance+5;
        p.x -= 2*horDistance+310;
    } else if (i == 12) {
        p.x += 2*horDistance-50;
    } else if (i == 13) {
        p.y += height + vertDistance+5;
    } else if (i == 15) {
        p.x -= 2*horDistance-490;
    } else if (i == 16) {
        p.x += 2*horDistance+20;
    } else if (i == 18) {
        p.x += 2*horDistance-50;
    } else if (i == 20) {
        p.x += 2*horDistance-20;
    }
}

Text text = Text{
    point=Point{x=canvas.width/2, y=p.y+220},
    size=40,
    content="     10   +  10     *      a  &amp;&amp;  b   -    !a     /     -b",
    color=black
};

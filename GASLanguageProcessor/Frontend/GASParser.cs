//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from GAS.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class GASParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, COMMENT=52, 
		IDENTIFIER=53, NUM=54, ALLSTRINGS=55, WS=56;
	public const int
		RULE_program = 0, RULE_canvas = 1, RULE_statement = 2, RULE_simpleStatement = 3, 
		RULE_complexStatement = 4, RULE_declaration = 5, RULE_assignment = 6, 
		RULE_ifStatement = 7, RULE_elseStatement = 8, RULE_whileStatement = 9, 
		RULE_forStatement = 10, RULE_returnStatement = 11, RULE_classDeclaration = 12, 
		RULE_functionDeclaration = 13, RULE_type = 14, RULE_collectionType = 15, 
		RULE_expression = 16, RULE_equalityExpression = 17, RULE_relationExpression = 18, 
		RULE_binaryExpression = 19, RULE_multExpression = 20, RULE_notExpression = 21, 
		RULE_listAccessExpression = 22, RULE_term = 23, RULE_methodCall = 24, 
		RULE_listTerm = 25, RULE_groupTerm = 26, RULE_functionCall = 27;
	public static readonly string[] ruleNames = {
		"program", "canvas", "statement", "simpleStatement", "complexStatement", 
		"declaration", "assignment", "ifStatement", "elseStatement", "whileStatement", 
		"forStatement", "returnStatement", "classDeclaration", "functionDeclaration", 
		"type", "collectionType", "expression", "equalityExpression", "relationExpression", 
		"binaryExpression", "multExpression", "notExpression", "listAccessExpression", 
		"term", "methodCall", "listTerm", "groupTerm", "functionCall"
	};

	private static readonly string[] _LiteralNames = {
		null, "'canvas'", "'('", "','", "')'", "';'", "'='", "'if'", "'{'", "'}'", 
		"'else'", "'while'", "'for'", "'return'", "'class'", "'number'", "'bool'", 
		"'point'", "'rectangle'", "'square'", "'circle'", "'polygon'", "'text'", 
		"'colour'", "'string'", "'line'", "'T'", "'void'", "'list'", "'group'", 
		"'||'", "'&&'", "'=='", "'!='", "'<'", "'>'", "'<='", "'>='", "'+'", "'-'", 
		"'*'", "'/'", "'%'", "'!'", "'['", "']'", "'true'", "'false'", "'null'", 
		"'.'", "'List'", "'Group'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, "COMMENT", "IDENTIFIER", "NUM", "ALLSTRINGS", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "GAS.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static GASParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public GASParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public GASParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CanvasContext canvas() {
			return GetRuleContext<CanvasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 56;
			canvas();
			State = 60;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 9007200328480896L) != 0)) {
				{
				{
				State = 57;
				statement();
				}
				}
				State = 62;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CanvasContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public CanvasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_canvas; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCanvas(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CanvasContext canvas() {
		CanvasContext _localctx = new CanvasContext(Context, State);
		EnterRule(_localctx, 2, RULE_canvas);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 63;
			Match(T__0);
			State = 64;
			Match(T__1);
			State = 65;
			expression();
			State = 66;
			Match(T__2);
			State = 67;
			expression();
			State = 70;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__2) {
				{
				State = 68;
				Match(T__2);
				State = 69;
				expression();
				}
			}

			State = 72;
			Match(T__3);
			State = 73;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleStatementContext simpleStatement() {
			return GetRuleContext<SimpleStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComplexStatementContext complexStatement() {
			return GetRuleContext<ComplexStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			State = 77;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 75;
				simpleStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 76;
				complexStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodCallContext methodCall() {
			return GetRuleContext<MethodCallContext>(0);
		}
		public SimpleStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleStatementContext simpleStatement() {
		SimpleStatementContext _localctx = new SimpleStatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_simpleStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				{
				State = 79;
				declaration();
				}
				break;
			case 2:
				{
				State = 80;
				assignment();
				}
				break;
			case 3:
				{
				State = 81;
				functionCall();
				}
				break;
			case 4:
				{
				State = 82;
				returnStatement();
				}
				break;
			case 5:
				{
				State = 83;
				methodCall();
				}
				break;
			}
			State = 86;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComplexStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		public ComplexStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complexStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComplexStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComplexStatementContext complexStatement() {
		ComplexStatementContext _localctx = new ComplexStatementContext(Context, State);
		EnterRule(_localctx, 8, RULE_complexStatement);
		try {
			State = 93;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__10:
				EnterOuterAlt(_localctx, 1);
				{
				State = 88;
				whileStatement();
				}
				break;
			case T__14:
			case T__15:
			case T__16:
			case T__17:
			case T__18:
			case T__19:
			case T__20:
			case T__21:
			case T__22:
			case T__23:
			case T__24:
			case T__25:
			case T__26:
				EnterOuterAlt(_localctx, 2);
				{
				State = 89;
				functionDeclaration();
				}
				break;
			case T__11:
				EnterOuterAlt(_localctx, 3);
				{
				State = 90;
				forStatement();
				}
				break;
			case T__13:
				EnterOuterAlt(_localctx, 4);
				{
				State = 91;
				classDeclaration();
				}
				break;
			case T__6:
				EnterOuterAlt(_localctx, 5);
				{
				State = 92;
				ifStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GASParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CollectionTypeContext collectionType() {
			return GetRuleContext<CollectionTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 10, RULE_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 97;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__14:
			case T__15:
			case T__16:
			case T__17:
			case T__18:
			case T__19:
			case T__20:
			case T__21:
			case T__22:
			case T__23:
			case T__24:
			case T__25:
			case T__26:
				{
				State = 95;
				type();
				}
				break;
			case T__27:
			case T__28:
				{
				State = 96;
				collectionType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 99;
			Match(IDENTIFIER);
			State = 102;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__5) {
				{
				State = 100;
				Match(T__5);
				State = 101;
				expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GASParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 12, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 104;
			Match(IDENTIFIER);
			State = 105;
			Match(T__5);
			State = 106;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseStatementContext elseStatement() {
			return GetRuleContext<ElseStatementContext>(0);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 14, RULE_ifStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 108;
			Match(T__6);
			State = 109;
			Match(T__1);
			State = 110;
			expression();
			State = 111;
			Match(T__3);
			State = 112;
			Match(T__7);
			State = 116;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 9007200328480896L) != 0)) {
				{
				{
				State = 113;
				statement();
				}
				}
				State = 118;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 119;
			Match(T__8);
			State = 121;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__9) {
				{
				State = 120;
				elseStatement();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		public ElseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseStatementContext elseStatement() {
		ElseStatementContext _localctx = new ElseStatementContext(Context, State);
		EnterRule(_localctx, 16, RULE_elseStatement);
		int _la;
		try {
			State = 134;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 123;
				Match(T__9);
				{
				State = 124;
				Match(T__7);
				State = 128;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 9007200328480896L) != 0)) {
					{
					{
					State = 125;
					statement();
					}
					}
					State = 130;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 131;
				Match(T__8);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 132;
				Match(T__9);
				State = 133;
				ifStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 18, RULE_whileStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 136;
			Match(T__10);
			State = 137;
			Match(T__1);
			State = 138;
			expression();
			State = 139;
			Match(T__3);
			State = 140;
			Match(T__7);
			State = 144;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 9007200328480896L) != 0)) {
				{
				{
				State = 141;
				statement();
				}
				}
				State = 146;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 147;
			Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext[] assignment() {
			return GetRuleContexts<AssignmentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment(int i) {
			return GetRuleContext<AssignmentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 20, RULE_forStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 149;
			Match(T__11);
			State = 150;
			Match(T__1);
			State = 153;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__14:
			case T__15:
			case T__16:
			case T__17:
			case T__18:
			case T__19:
			case T__20:
			case T__21:
			case T__22:
			case T__23:
			case T__24:
			case T__25:
			case T__26:
			case T__27:
			case T__28:
				{
				State = 151;
				declaration();
				}
				break;
			case IDENTIFIER:
				{
				State = 152;
				assignment();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 155;
			Match(T__4);
			State = 156;
			expression();
			State = 157;
			Match(T__4);
			State = 158;
			assignment();
			State = 159;
			Match(T__3);
			State = 160;
			Match(T__7);
			State = 164;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 9007200328480896L) != 0)) {
				{
				{
				State = 161;
				statement();
				}
				}
				State = 166;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 167;
			Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 22, RULE_returnStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 169;
			Match(T__12);
			State = 170;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GASParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ClassDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclarationContext classDeclaration() {
		ClassDeclarationContext _localctx = new ClassDeclarationContext(Context, State);
		EnterRule(_localctx, 24, RULE_classDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 172;
			Match(T__13);
			State = 173;
			Match(IDENTIFIER);
			State = 174;
			Match(T__7);
			State = 178;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 9007200328480896L) != 0)) {
				{
				{
				State = 175;
				statement();
				}
				}
				State = 180;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 181;
			Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(GASParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(GASParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public FunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclarationContext functionDeclaration() {
		FunctionDeclarationContext _localctx = new FunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 26, RULE_functionDeclaration);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 183;
			type();
			State = 184;
			Match(IDENTIFIER);
			State = 185;
			Match(T__1);
			State = 197;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 268402688L) != 0)) {
				{
				State = 186;
				type();
				State = 187;
				Match(IDENTIFIER);
				State = 194;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__2) {
					{
					{
					State = 188;
					Match(T__2);
					State = 189;
					type();
					State = 190;
					Match(IDENTIFIER);
					}
					}
					State = 196;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 199;
			Match(T__3);
			State = 200;
			Match(T__7);
			State = 204;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 201;
					statement();
					}
					} 
				}
				State = 206;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			}
			State = 207;
			Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 28, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 209;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 268402688L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollectionTypeContext : ParserRuleContext {
		public CollectionTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collectionType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollectionType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CollectionTypeContext collectionType() {
		CollectionTypeContext _localctx = new CollectionTypeContext(Context, State);
		EnterRule(_localctx, 30, RULE_collectionType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 211;
			_la = TokenStream.LA(1);
			if ( !(_la==T__27 || _la==T__28) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EqualityExpressionContext[] equalityExpression() {
			return GetRuleContexts<EqualityExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EqualityExpressionContext equalityExpression(int i) {
			return GetRuleContext<EqualityExpressionContext>(i);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 32, RULE_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 213;
			equalityExpression();
			State = 218;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__29 || _la==T__30) {
				{
				{
				State = 214;
				_la = TokenStream.LA(1);
				if ( !(_la==T__29 || _la==T__30) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 215;
				equalityExpression();
				}
				}
				State = 220;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EqualityExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RelationExpressionContext[] relationExpression() {
			return GetRuleContexts<RelationExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationExpressionContext relationExpression(int i) {
			return GetRuleContext<RelationExpressionContext>(i);
		}
		public EqualityExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equalityExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EqualityExpressionContext equalityExpression() {
		EqualityExpressionContext _localctx = new EqualityExpressionContext(Context, State);
		EnterRule(_localctx, 34, RULE_equalityExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 221;
			relationExpression();
			State = 226;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__31 || _la==T__32) {
				{
				{
				State = 222;
				_la = TokenStream.LA(1);
				if ( !(_la==T__31 || _la==T__32) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 223;
				relationExpression();
				}
				}
				State = 228;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BinaryExpressionContext[] binaryExpression() {
			return GetRuleContexts<BinaryExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BinaryExpressionContext binaryExpression(int i) {
			return GetRuleContext<BinaryExpressionContext>(i);
		}
		public RelationExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationExpressionContext relationExpression() {
		RelationExpressionContext _localctx = new RelationExpressionContext(Context, State);
		EnterRule(_localctx, 36, RULE_relationExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 229;
			binaryExpression();
			State = 234;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 257698037760L) != 0)) {
				{
				{
				State = 230;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 257698037760L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 231;
				binaryExpression();
				}
				}
				State = 236;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinaryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MultExpressionContext[] multExpression() {
			return GetRuleContexts<MultExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultExpressionContext multExpression(int i) {
			return GetRuleContext<MultExpressionContext>(i);
		}
		public BinaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binaryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BinaryExpressionContext binaryExpression() {
		BinaryExpressionContext _localctx = new BinaryExpressionContext(Context, State);
		EnterRule(_localctx, 38, RULE_binaryExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 237;
			multExpression();
			State = 242;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__37 || _la==T__38) {
				{
				{
				State = 238;
				_la = TokenStream.LA(1);
				if ( !(_la==T__37 || _la==T__38) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 239;
				multExpression();
				}
				}
				State = 244;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NotExpressionContext[] notExpression() {
			return GetRuleContexts<NotExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NotExpressionContext notExpression(int i) {
			return GetRuleContext<NotExpressionContext>(i);
		}
		public MultExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultExpressionContext multExpression() {
		MultExpressionContext _localctx = new MultExpressionContext(Context, State);
		EnterRule(_localctx, 40, RULE_multExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 245;
			notExpression();
			State = 250;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 7696581394432L) != 0)) {
				{
				{
				State = 246;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 7696581394432L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 247;
				notExpression();
				}
				}
				State = 252;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NotExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ListAccessExpressionContext listAccessExpression() {
			return GetRuleContext<ListAccessExpressionContext>(0);
		}
		public NotExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_notExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NotExpressionContext notExpression() {
		NotExpressionContext _localctx = new NotExpressionContext(Context, State);
		EnterRule(_localctx, 42, RULE_notExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 256;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__38 || _la==T__42) {
				{
				{
				State = 253;
				_la = TokenStream.LA(1);
				if ( !(_la==T__38 || _la==T__42) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 258;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 259;
			listAccessExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListAccessExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ListAccessExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listAccessExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListAccessExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListAccessExpressionContext listAccessExpression() {
		ListAccessExpressionContext _localctx = new ListAccessExpressionContext(Context, State);
		EnterRule(_localctx, 44, RULE_listAccessExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 261;
			term();
			State = 266;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__43) {
				{
				State = 262;
				Match(T__43);
				State = 263;
				expression();
				State = 264;
				Match(T__44);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GASParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM() { return GetToken(GASParser.NUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListTermContext listTerm() {
			return GetRuleContext<ListTermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALLSTRINGS() { return GetToken(GASParser.ALLSTRINGS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MethodCallContext methodCall() {
			return GetRuleContext<MethodCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GroupTermContext groupTerm() {
			return GetRuleContext<GroupTermContext>(0);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 46, RULE_term);
		try {
			State = 282;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 268;
				Match(IDENTIFIER);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 269;
				Match(NUM);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 270;
				Match(T__45);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 271;
				Match(T__46);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 272;
				Match(T__47);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 273;
				Match(T__1);
				State = 274;
				expression();
				State = 275;
				Match(T__3);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 277;
				listTerm();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 278;
				functionCall();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 279;
				Match(ALLSTRINGS);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 280;
				methodCall();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 281;
				groupTerm();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(GASParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(GASParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public MethodCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodCallContext methodCall() {
		MethodCallContext _localctx = new MethodCallContext(Context, State);
		EnterRule(_localctx, 48, RULE_methodCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 284;
			Match(IDENTIFIER);
			State = 285;
			Match(T__48);
			State = 286;
			Match(IDENTIFIER);
			State = 299;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 287;
				Match(T__1);
				State = 296;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 66930021561794564L) != 0)) {
					{
					State = 288;
					expression();
					State = 293;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__2) {
						{
						{
						State = 289;
						Match(T__2);
						State = 290;
						expression();
						}
						}
						State = 295;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 298;
				Match(T__3);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListTermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ListTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listTerm; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListTermContext listTerm() {
		ListTermContext _localctx = new ListTermContext(Context, State);
		EnterRule(_localctx, 50, RULE_listTerm);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 301;
			Match(T__49);
			State = 302;
			Match(T__33);
			State = 303;
			type();
			State = 304;
			Match(T__34);
			State = 305;
			Match(T__7);
			State = 314;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 66930021561794564L) != 0)) {
				{
				State = 306;
				expression();
				State = 311;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__2) {
					{
					{
					State = 307;
					Match(T__2);
					State = 308;
					expression();
					}
					}
					State = 313;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 316;
			Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupTermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public GroupTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupTerm; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupTermContext groupTerm() {
		GroupTermContext _localctx = new GroupTermContext(Context, State);
		EnterRule(_localctx, 52, RULE_groupTerm);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 318;
			Match(T__50);
			State = 319;
			Match(T__1);
			State = 320;
			expression();
			State = 321;
			Match(T__2);
			State = 322;
			Match(T__7);
			State = 331;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 9007200328480896L) != 0)) {
				{
				State = 323;
				statement();
				State = 328;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__2) {
					{
					{
					State = 324;
					Match(T__2);
					State = 325;
					statement();
					}
					}
					State = 330;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 333;
			Match(T__8);
			State = 334;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GASParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 54, RULE_functionCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 336;
			Match(IDENTIFIER);
			State = 337;
			Match(T__1);
			State = 346;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 66930021561794564L) != 0)) {
				{
				State = 338;
				expression();
				State = 343;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__2) {
					{
					{
					State = 339;
					Match(T__2);
					State = 340;
					expression();
					}
					}
					State = 345;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 348;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,56,351,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,1,0,1,0,5,
		0,59,8,0,10,0,12,0,62,9,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,71,8,1,1,1,1,
		1,1,1,1,2,1,2,3,2,78,8,2,1,3,1,3,1,3,1,3,1,3,3,3,85,8,3,1,3,1,3,1,4,1,
		4,1,4,1,4,1,4,3,4,94,8,4,1,5,1,5,3,5,98,8,5,1,5,1,5,1,5,3,5,103,8,5,1,
		6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,5,7,115,8,7,10,7,12,7,118,9,7,1,
		7,1,7,3,7,122,8,7,1,8,1,8,1,8,5,8,127,8,8,10,8,12,8,130,9,8,1,8,1,8,1,
		8,3,8,135,8,8,1,9,1,9,1,9,1,9,1,9,1,9,5,9,143,8,9,10,9,12,9,146,9,9,1,
		9,1,9,1,10,1,10,1,10,1,10,3,10,154,8,10,1,10,1,10,1,10,1,10,1,10,1,10,
		1,10,5,10,163,8,10,10,10,12,10,166,9,10,1,10,1,10,1,11,1,11,1,11,1,12,
		1,12,1,12,1,12,5,12,177,8,12,10,12,12,12,180,9,12,1,12,1,12,1,13,1,13,
		1,13,1,13,1,13,1,13,1,13,1,13,1,13,5,13,193,8,13,10,13,12,13,196,9,13,
		3,13,198,8,13,1,13,1,13,1,13,5,13,203,8,13,10,13,12,13,206,9,13,1,13,1,
		13,1,14,1,14,1,15,1,15,1,16,1,16,1,16,5,16,217,8,16,10,16,12,16,220,9,
		16,1,17,1,17,1,17,5,17,225,8,17,10,17,12,17,228,9,17,1,18,1,18,1,18,5,
		18,233,8,18,10,18,12,18,236,9,18,1,19,1,19,1,19,5,19,241,8,19,10,19,12,
		19,244,9,19,1,20,1,20,1,20,5,20,249,8,20,10,20,12,20,252,9,20,1,21,5,21,
		255,8,21,10,21,12,21,258,9,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,3,22,
		267,8,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,
		23,1,23,3,23,283,8,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,5,24,292,8,24,
		10,24,12,24,295,9,24,3,24,297,8,24,1,24,3,24,300,8,24,1,25,1,25,1,25,1,
		25,1,25,1,25,1,25,1,25,5,25,310,8,25,10,25,12,25,313,9,25,3,25,315,8,25,
		1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,5,26,327,8,26,10,26,
		12,26,330,9,26,3,26,332,8,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,5,
		27,342,8,27,10,27,12,27,345,9,27,3,27,347,8,27,1,27,1,27,1,27,1,204,0,
		28,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,
		48,50,52,54,0,8,1,0,15,27,1,0,28,29,1,0,30,31,1,0,32,33,1,0,34,37,1,0,
		38,39,1,0,40,42,2,0,39,39,43,43,372,0,56,1,0,0,0,2,63,1,0,0,0,4,77,1,0,
		0,0,6,84,1,0,0,0,8,93,1,0,0,0,10,97,1,0,0,0,12,104,1,0,0,0,14,108,1,0,
		0,0,16,134,1,0,0,0,18,136,1,0,0,0,20,149,1,0,0,0,22,169,1,0,0,0,24,172,
		1,0,0,0,26,183,1,0,0,0,28,209,1,0,0,0,30,211,1,0,0,0,32,213,1,0,0,0,34,
		221,1,0,0,0,36,229,1,0,0,0,38,237,1,0,0,0,40,245,1,0,0,0,42,256,1,0,0,
		0,44,261,1,0,0,0,46,282,1,0,0,0,48,284,1,0,0,0,50,301,1,0,0,0,52,318,1,
		0,0,0,54,336,1,0,0,0,56,60,3,2,1,0,57,59,3,4,2,0,58,57,1,0,0,0,59,62,1,
		0,0,0,60,58,1,0,0,0,60,61,1,0,0,0,61,1,1,0,0,0,62,60,1,0,0,0,63,64,5,1,
		0,0,64,65,5,2,0,0,65,66,3,32,16,0,66,67,5,3,0,0,67,70,3,32,16,0,68,69,
		5,3,0,0,69,71,3,32,16,0,70,68,1,0,0,0,70,71,1,0,0,0,71,72,1,0,0,0,72,73,
		5,4,0,0,73,74,5,5,0,0,74,3,1,0,0,0,75,78,3,6,3,0,76,78,3,8,4,0,77,75,1,
		0,0,0,77,76,1,0,0,0,78,5,1,0,0,0,79,85,3,10,5,0,80,85,3,12,6,0,81,85,3,
		54,27,0,82,85,3,22,11,0,83,85,3,48,24,0,84,79,1,0,0,0,84,80,1,0,0,0,84,
		81,1,0,0,0,84,82,1,0,0,0,84,83,1,0,0,0,85,86,1,0,0,0,86,87,5,5,0,0,87,
		7,1,0,0,0,88,94,3,18,9,0,89,94,3,26,13,0,90,94,3,20,10,0,91,94,3,24,12,
		0,92,94,3,14,7,0,93,88,1,0,0,0,93,89,1,0,0,0,93,90,1,0,0,0,93,91,1,0,0,
		0,93,92,1,0,0,0,94,9,1,0,0,0,95,98,3,28,14,0,96,98,3,30,15,0,97,95,1,0,
		0,0,97,96,1,0,0,0,98,99,1,0,0,0,99,102,5,53,0,0,100,101,5,6,0,0,101,103,
		3,32,16,0,102,100,1,0,0,0,102,103,1,0,0,0,103,11,1,0,0,0,104,105,5,53,
		0,0,105,106,5,6,0,0,106,107,3,32,16,0,107,13,1,0,0,0,108,109,5,7,0,0,109,
		110,5,2,0,0,110,111,3,32,16,0,111,112,5,4,0,0,112,116,5,8,0,0,113,115,
		3,4,2,0,114,113,1,0,0,0,115,118,1,0,0,0,116,114,1,0,0,0,116,117,1,0,0,
		0,117,119,1,0,0,0,118,116,1,0,0,0,119,121,5,9,0,0,120,122,3,16,8,0,121,
		120,1,0,0,0,121,122,1,0,0,0,122,15,1,0,0,0,123,124,5,10,0,0,124,128,5,
		8,0,0,125,127,3,4,2,0,126,125,1,0,0,0,127,130,1,0,0,0,128,126,1,0,0,0,
		128,129,1,0,0,0,129,131,1,0,0,0,130,128,1,0,0,0,131,135,5,9,0,0,132,133,
		5,10,0,0,133,135,3,14,7,0,134,123,1,0,0,0,134,132,1,0,0,0,135,17,1,0,0,
		0,136,137,5,11,0,0,137,138,5,2,0,0,138,139,3,32,16,0,139,140,5,4,0,0,140,
		144,5,8,0,0,141,143,3,4,2,0,142,141,1,0,0,0,143,146,1,0,0,0,144,142,1,
		0,0,0,144,145,1,0,0,0,145,147,1,0,0,0,146,144,1,0,0,0,147,148,5,9,0,0,
		148,19,1,0,0,0,149,150,5,12,0,0,150,153,5,2,0,0,151,154,3,10,5,0,152,154,
		3,12,6,0,153,151,1,0,0,0,153,152,1,0,0,0,154,155,1,0,0,0,155,156,5,5,0,
		0,156,157,3,32,16,0,157,158,5,5,0,0,158,159,3,12,6,0,159,160,5,4,0,0,160,
		164,5,8,0,0,161,163,3,4,2,0,162,161,1,0,0,0,163,166,1,0,0,0,164,162,1,
		0,0,0,164,165,1,0,0,0,165,167,1,0,0,0,166,164,1,0,0,0,167,168,5,9,0,0,
		168,21,1,0,0,0,169,170,5,13,0,0,170,171,3,32,16,0,171,23,1,0,0,0,172,173,
		5,14,0,0,173,174,5,53,0,0,174,178,5,8,0,0,175,177,3,4,2,0,176,175,1,0,
		0,0,177,180,1,0,0,0,178,176,1,0,0,0,178,179,1,0,0,0,179,181,1,0,0,0,180,
		178,1,0,0,0,181,182,5,9,0,0,182,25,1,0,0,0,183,184,3,28,14,0,184,185,5,
		53,0,0,185,197,5,2,0,0,186,187,3,28,14,0,187,194,5,53,0,0,188,189,5,3,
		0,0,189,190,3,28,14,0,190,191,5,53,0,0,191,193,1,0,0,0,192,188,1,0,0,0,
		193,196,1,0,0,0,194,192,1,0,0,0,194,195,1,0,0,0,195,198,1,0,0,0,196,194,
		1,0,0,0,197,186,1,0,0,0,197,198,1,0,0,0,198,199,1,0,0,0,199,200,5,4,0,
		0,200,204,5,8,0,0,201,203,3,4,2,0,202,201,1,0,0,0,203,206,1,0,0,0,204,
		205,1,0,0,0,204,202,1,0,0,0,205,207,1,0,0,0,206,204,1,0,0,0,207,208,5,
		9,0,0,208,27,1,0,0,0,209,210,7,0,0,0,210,29,1,0,0,0,211,212,7,1,0,0,212,
		31,1,0,0,0,213,218,3,34,17,0,214,215,7,2,0,0,215,217,3,34,17,0,216,214,
		1,0,0,0,217,220,1,0,0,0,218,216,1,0,0,0,218,219,1,0,0,0,219,33,1,0,0,0,
		220,218,1,0,0,0,221,226,3,36,18,0,222,223,7,3,0,0,223,225,3,36,18,0,224,
		222,1,0,0,0,225,228,1,0,0,0,226,224,1,0,0,0,226,227,1,0,0,0,227,35,1,0,
		0,0,228,226,1,0,0,0,229,234,3,38,19,0,230,231,7,4,0,0,231,233,3,38,19,
		0,232,230,1,0,0,0,233,236,1,0,0,0,234,232,1,0,0,0,234,235,1,0,0,0,235,
		37,1,0,0,0,236,234,1,0,0,0,237,242,3,40,20,0,238,239,7,5,0,0,239,241,3,
		40,20,0,240,238,1,0,0,0,241,244,1,0,0,0,242,240,1,0,0,0,242,243,1,0,0,
		0,243,39,1,0,0,0,244,242,1,0,0,0,245,250,3,42,21,0,246,247,7,6,0,0,247,
		249,3,42,21,0,248,246,1,0,0,0,249,252,1,0,0,0,250,248,1,0,0,0,250,251,
		1,0,0,0,251,41,1,0,0,0,252,250,1,0,0,0,253,255,7,7,0,0,254,253,1,0,0,0,
		255,258,1,0,0,0,256,254,1,0,0,0,256,257,1,0,0,0,257,259,1,0,0,0,258,256,
		1,0,0,0,259,260,3,44,22,0,260,43,1,0,0,0,261,266,3,46,23,0,262,263,5,44,
		0,0,263,264,3,32,16,0,264,265,5,45,0,0,265,267,1,0,0,0,266,262,1,0,0,0,
		266,267,1,0,0,0,267,45,1,0,0,0,268,283,5,53,0,0,269,283,5,54,0,0,270,283,
		5,46,0,0,271,283,5,47,0,0,272,283,5,48,0,0,273,274,5,2,0,0,274,275,3,32,
		16,0,275,276,5,4,0,0,276,283,1,0,0,0,277,283,3,50,25,0,278,283,3,54,27,
		0,279,283,5,55,0,0,280,283,3,48,24,0,281,283,3,52,26,0,282,268,1,0,0,0,
		282,269,1,0,0,0,282,270,1,0,0,0,282,271,1,0,0,0,282,272,1,0,0,0,282,273,
		1,0,0,0,282,277,1,0,0,0,282,278,1,0,0,0,282,279,1,0,0,0,282,280,1,0,0,
		0,282,281,1,0,0,0,283,47,1,0,0,0,284,285,5,53,0,0,285,286,5,49,0,0,286,
		299,5,53,0,0,287,296,5,2,0,0,288,293,3,32,16,0,289,290,5,3,0,0,290,292,
		3,32,16,0,291,289,1,0,0,0,292,295,1,0,0,0,293,291,1,0,0,0,293,294,1,0,
		0,0,294,297,1,0,0,0,295,293,1,0,0,0,296,288,1,0,0,0,296,297,1,0,0,0,297,
		298,1,0,0,0,298,300,5,4,0,0,299,287,1,0,0,0,299,300,1,0,0,0,300,49,1,0,
		0,0,301,302,5,50,0,0,302,303,5,34,0,0,303,304,3,28,14,0,304,305,5,35,0,
		0,305,314,5,8,0,0,306,311,3,32,16,0,307,308,5,3,0,0,308,310,3,32,16,0,
		309,307,1,0,0,0,310,313,1,0,0,0,311,309,1,0,0,0,311,312,1,0,0,0,312,315,
		1,0,0,0,313,311,1,0,0,0,314,306,1,0,0,0,314,315,1,0,0,0,315,316,1,0,0,
		0,316,317,5,9,0,0,317,51,1,0,0,0,318,319,5,51,0,0,319,320,5,2,0,0,320,
		321,3,32,16,0,321,322,5,3,0,0,322,331,5,8,0,0,323,328,3,4,2,0,324,325,
		5,3,0,0,325,327,3,4,2,0,326,324,1,0,0,0,327,330,1,0,0,0,328,326,1,0,0,
		0,328,329,1,0,0,0,329,332,1,0,0,0,330,328,1,0,0,0,331,323,1,0,0,0,331,
		332,1,0,0,0,332,333,1,0,0,0,333,334,5,9,0,0,334,335,5,4,0,0,335,53,1,0,
		0,0,336,337,5,53,0,0,337,346,5,2,0,0,338,343,3,32,16,0,339,340,5,3,0,0,
		340,342,3,32,16,0,341,339,1,0,0,0,342,345,1,0,0,0,343,341,1,0,0,0,343,
		344,1,0,0,0,344,347,1,0,0,0,345,343,1,0,0,0,346,338,1,0,0,0,346,347,1,
		0,0,0,347,348,1,0,0,0,348,349,5,4,0,0,349,55,1,0,0,0,35,60,70,77,84,93,
		97,102,116,121,128,134,144,153,164,178,194,197,204,218,226,234,242,250,
		256,266,282,293,296,299,311,314,328,331,343,346
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/thomas/Documents/GASLanguageProcessor/GASLanguageProcessor/Frontend/GAS.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class GASParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, COMMENT=47, IDENTIFIER=48, NUM=49, ALLSTRINGS=50, WS=51;
	public const int
		RULE_program = 0, RULE_canvas = 1, RULE_statement = 2, RULE_simpleStatement = 3, 
		RULE_complexStatement = 4, RULE_recDefinition = 5, RULE_declaration = 6, 
		RULE_assignment = 7, RULE_increment = 8, RULE_ifStatement = 9, RULE_elseStatement = 10, 
		RULE_whileStatement = 11, RULE_forStatement = 12, RULE_returnStatement = 13, 
		RULE_functionDeclaration = 14, RULE_allTypes = 15, RULE_type = 16, RULE_collectionType = 17, 
		RULE_expression = 18, RULE_equalityExpression = 19, RULE_relationExpression = 20, 
		RULE_binaryExpression = 21, RULE_multExpression = 22, RULE_unaryExpression = 23, 
		RULE_term = 24, RULE_recordTerm = 25, RULE_listTerm = 26, RULE_groupTerm = 27, 
		RULE_functionCall = 28, RULE_recordTypeIdentifier = 29, RULE_identifier = 30, 
		RULE_attributeIdentifier = 31;
	public static readonly string[] ruleNames = {
		"program", "canvas", "statement", "simpleStatement", "complexStatement", 
		"recDefinition", "declaration", "assignment", "increment", "ifStatement", 
		"elseStatement", "whileStatement", "forStatement", "returnStatement", 
		"functionDeclaration", "allTypes", "type", "collectionType", "expression", 
		"equalityExpression", "relationExpression", "binaryExpression", "multExpression", 
		"unaryExpression", "term", "recordTerm", "listTerm", "groupTerm", "functionCall", 
		"recordTypeIdentifier", "identifier", "attributeIdentifier"
	};

	private static readonly string[] _LiteralNames = {
		null, "'canvas'", "'('", "','", "')'", "';'", "'TypeDef'", "'{'", "'='", 
		"'}'", "'+='", "'-='", "'*='", "'/='", "'++'", "'--'", "'if'", "'else'", 
		"'while'", "'for'", "'return'", "'num'", "'bool'", "'string'", "'void'", 
		"'list'", "'<'", "'>'", "'group'", "'||'", "'&&'", "'=='", "'!='", "'<='", 
		"'>='", "'+'", "'-'", "'*'", "'/'", "'%'", "'!'", "'true'", "'false'", 
		"'null'", "'List'", "'Group'", "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, "COMMENT", 
		"IDENTIFIER", "NUM", "ALLSTRINGS", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "GAS.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static GASParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public GASParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public GASParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(GASParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 67;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 281475312058434L) != 0)) {
				{
				{
				State = 64;
				statement();
				}
				}
				State = 69;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 70;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CanvasContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public CanvasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_canvas; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCanvas(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CanvasContext canvas() {
		CanvasContext _localctx = new CanvasContext(Context, State);
		EnterRule(_localctx, 2, RULE_canvas);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 72;
			Match(T__0);
			State = 73;
			Match(T__1);
			State = 74;
			expression();
			State = 75;
			Match(T__2);
			State = 76;
			expression();
			State = 77;
			Match(T__2);
			State = 78;
			expression();
			State = 79;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleStatementContext simpleStatement() {
			return GetRuleContext<SimpleStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComplexStatementContext complexStatement() {
			return GetRuleContext<ComplexStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			State = 83;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 81;
				simpleStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 82;
				complexStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IncrementContext increment() {
			return GetRuleContext<IncrementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CanvasContext canvas() {
			return GetRuleContext<CanvasContext>(0);
		}
		public SimpleStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleStatementContext simpleStatement() {
		SimpleStatementContext _localctx = new SimpleStatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_simpleStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 91;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				{
				State = 85;
				declaration();
				}
				break;
			case 2:
				{
				State = 86;
				assignment();
				}
				break;
			case 3:
				{
				State = 87;
				functionCall();
				}
				break;
			case 4:
				{
				State = 88;
				returnStatement();
				}
				break;
			case 5:
				{
				State = 89;
				increment();
				}
				break;
			case 6:
				{
				State = 90;
				canvas();
				}
				break;
			}
			State = 93;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComplexStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RecDefinitionContext recDefinition() {
			return GetRuleContext<RecDefinitionContext>(0);
		}
		public ComplexStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complexStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComplexStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComplexStatementContext complexStatement() {
		ComplexStatementContext _localctx = new ComplexStatementContext(Context, State);
		EnterRule(_localctx, 8, RULE_complexStatement);
		try {
			State = 100;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__17:
				EnterOuterAlt(_localctx, 1);
				{
				State = 95;
				whileStatement();
				}
				break;
			case T__20:
			case T__21:
			case T__22:
			case T__23:
			case T__24:
			case T__27:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 96;
				functionDeclaration();
				}
				break;
			case T__18:
				EnterOuterAlt(_localctx, 3);
				{
				State = 97;
				forStatement();
				}
				break;
			case T__15:
				EnterOuterAlt(_localctx, 4);
				{
				State = 98;
				ifStatement();
				}
				break;
			case T__5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 99;
				recDefinition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RecDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RecordTypeIdentifierContext recordTypeIdentifier() {
			return GetRuleContext<RecordTypeIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AllTypesContext[] allTypes() {
			return GetRuleContexts<AllTypesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AllTypesContext allTypes(int i) {
			return GetRuleContext<AllTypesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public RecDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RecDefinitionContext recDefinition() {
		RecDefinitionContext _localctx = new RecDefinitionContext(Context, State);
		EnterRule(_localctx, 10, RULE_recDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 102;
			Match(T__5);
			State = 103;
			recordTypeIdentifier();
			State = 104;
			Match(T__6);
			State = 120;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 281475310157824L) != 0)) {
				{
				State = 105;
				allTypes();
				State = 106;
				identifier();
				State = 107;
				Match(T__7);
				State = 108;
				expression();
				State = 117;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__2) {
					{
					{
					State = 109;
					Match(T__2);
					State = 110;
					allTypes();
					State = 111;
					identifier();
					State = 112;
					Match(T__7);
					State = 113;
					expression();
					}
					}
					State = 119;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 122;
			Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CollectionTypeContext collectionType() {
			return GetRuleContext<CollectionTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 12, RULE_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 126;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__20:
			case T__21:
			case T__22:
			case T__23:
			case IDENTIFIER:
				{
				State = 124;
				type();
				}
				break;
			case T__24:
			case T__27:
				{
				State = 125;
				collectionType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 128;
			identifier();
			State = 131;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__7) {
				{
				State = 129;
				Match(T__7);
				State = 130;
				expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeIdentifierContext attributeIdentifier() {
			return GetRuleContext<AttributeIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 14, RULE_assignment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 135;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				{
				State = 133;
				attributeIdentifier();
				}
				break;
			case 2:
				{
				State = 134;
				identifier();
				}
				break;
			}
			State = 137;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 15616L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 138;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncrementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AttributeIdentifierContext attributeIdentifier() {
			return GetRuleContext<AttributeIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public IncrementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_increment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIncrement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IncrementContext increment() {
		IncrementContext _localctx = new IncrementContext(Context, State);
		EnterRule(_localctx, 16, RULE_increment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 142;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				{
				State = 140;
				attributeIdentifier();
				}
				break;
			case 2:
				{
				State = 141;
				identifier();
				}
				break;
			}
			State = 144;
			_la = TokenStream.LA(1);
			if ( !(_la==T__13 || _la==T__14) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseStatementContext elseStatement() {
			return GetRuleContext<ElseStatementContext>(0);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 18, RULE_ifStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 146;
			Match(T__15);
			State = 147;
			Match(T__1);
			State = 148;
			expression();
			State = 149;
			Match(T__3);
			State = 150;
			Match(T__6);
			State = 154;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 281475312058434L) != 0)) {
				{
				{
				State = 151;
				statement();
				}
				}
				State = 156;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 157;
			Match(T__8);
			State = 159;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__16) {
				{
				State = 158;
				elseStatement();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		public ElseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseStatementContext elseStatement() {
		ElseStatementContext _localctx = new ElseStatementContext(Context, State);
		EnterRule(_localctx, 20, RULE_elseStatement);
		int _la;
		try {
			State = 172;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 161;
				Match(T__16);
				{
				State = 162;
				Match(T__6);
				State = 166;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 281475312058434L) != 0)) {
					{
					{
					State = 163;
					statement();
					}
					}
					State = 168;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 169;
				Match(T__8);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 170;
				Match(T__16);
				State = 171;
				ifStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 22, RULE_whileStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 174;
			Match(T__17);
			State = 175;
			Match(T__1);
			State = 176;
			expression();
			State = 177;
			Match(T__3);
			State = 178;
			Match(T__6);
			State = 182;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 281475312058434L) != 0)) {
				{
				{
				State = 179;
				statement();
				}
				}
				State = 184;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 185;
			Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext[] assignment() {
			return GetRuleContexts<AssignmentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment(int i) {
			return GetRuleContext<AssignmentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IncrementContext increment() {
			return GetRuleContext<IncrementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 24, RULE_forStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 187;
			Match(T__18);
			State = 188;
			Match(T__1);
			State = 191;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				{
				State = 189;
				declaration();
				}
				break;
			case 2:
				{
				State = 190;
				assignment();
				}
				break;
			}
			State = 193;
			Match(T__4);
			State = 194;
			expression();
			State = 195;
			Match(T__4);
			State = 198;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				{
				State = 196;
				assignment();
				}
				break;
			case 2:
				{
				State = 197;
				increment();
				}
				break;
			}
			State = 200;
			Match(T__3);
			State = 201;
			Match(T__6);
			State = 205;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 281475312058434L) != 0)) {
				{
				{
				State = 202;
				statement();
				}
				}
				State = 207;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 208;
			Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 26, RULE_returnStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 210;
			Match(T__19);
			State = 211;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AllTypesContext[] allTypes() {
			return GetRuleContexts<AllTypesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AllTypesContext allTypes(int i) {
			return GetRuleContext<AllTypesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public FunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclarationContext functionDeclaration() {
		FunctionDeclarationContext _localctx = new FunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 28, RULE_functionDeclaration);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 213;
			allTypes();
			State = 214;
			identifier();
			State = 215;
			Match(T__1);
			State = 227;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 281475310157824L) != 0)) {
				{
				State = 216;
				allTypes();
				State = 217;
				identifier();
				State = 224;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__2) {
					{
					{
					State = 218;
					Match(T__2);
					State = 219;
					allTypes();
					State = 220;
					identifier();
					}
					}
					State = 226;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 229;
			Match(T__3);
			State = 230;
			Match(T__6);
			State = 234;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 231;
					statement();
					}
					} 
				}
				State = 236;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			}
			State = 237;
			Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AllTypesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CollectionTypeContext collectionType() {
			return GetRuleContext<CollectionTypeContext>(0);
		}
		public AllTypesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_allTypes; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAllTypes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AllTypesContext allTypes() {
		AllTypesContext _localctx = new AllTypesContext(Context, State);
		EnterRule(_localctx, 30, RULE_allTypes);
		try {
			State = 241;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__20:
			case T__21:
			case T__22:
			case T__23:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 239;
				type();
				}
				break;
			case T__24:
			case T__27:
				EnterOuterAlt(_localctx, 2);
				{
				State = 240;
				collectionType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RecordTypeIdentifierContext recordTypeIdentifier() {
			return GetRuleContext<RecordTypeIdentifierContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 32, RULE_type);
		try {
			State = 248;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__20:
				EnterOuterAlt(_localctx, 1);
				{
				State = 243;
				Match(T__20);
				}
				break;
			case T__21:
				EnterOuterAlt(_localctx, 2);
				{
				State = 244;
				Match(T__21);
				}
				break;
			case T__22:
				EnterOuterAlt(_localctx, 3);
				{
				State = 245;
				Match(T__22);
				}
				break;
			case T__23:
				EnterOuterAlt(_localctx, 4);
				{
				State = 246;
				Match(T__23);
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 5);
				{
				State = 247;
				recordTypeIdentifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollectionTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public CollectionTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collectionType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollectionType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CollectionTypeContext collectionType() {
		CollectionTypeContext _localctx = new CollectionTypeContext(Context, State);
		EnterRule(_localctx, 34, RULE_collectionType);
		try {
			State = 256;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__24:
				EnterOuterAlt(_localctx, 1);
				{
				State = 250;
				Match(T__24);
				State = 251;
				Match(T__25);
				{
				State = 252;
				type();
				}
				State = 253;
				Match(T__26);
				}
				break;
			case T__27:
				EnterOuterAlt(_localctx, 2);
				{
				State = 255;
				Match(T__27);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EqualityExpressionContext[] equalityExpression() {
			return GetRuleContexts<EqualityExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EqualityExpressionContext equalityExpression(int i) {
			return GetRuleContext<EqualityExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 36, RULE_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 258;
			equalityExpression();
			State = 264;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__28 || _la==T__29) {
				{
				State = 259;
				_la = TokenStream.LA(1);
				if ( !(_la==T__28 || _la==T__29) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 262;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
				case 1:
					{
					State = 260;
					equalityExpression();
					}
					break;
				case 2:
					{
					State = 261;
					expression();
					}
					break;
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EqualityExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RelationExpressionContext[] relationExpression() {
			return GetRuleContexts<RelationExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationExpressionContext relationExpression(int i) {
			return GetRuleContext<RelationExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EqualityExpressionContext equalityExpression() {
			return GetRuleContext<EqualityExpressionContext>(0);
		}
		public EqualityExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equalityExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EqualityExpressionContext equalityExpression() {
		EqualityExpressionContext _localctx = new EqualityExpressionContext(Context, State);
		EnterRule(_localctx, 38, RULE_equalityExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 266;
			relationExpression();
			State = 272;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__30 || _la==T__31) {
				{
				State = 267;
				_la = TokenStream.LA(1);
				if ( !(_la==T__30 || _la==T__31) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 270;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
				case 1:
					{
					State = 268;
					relationExpression();
					}
					break;
				case 2:
					{
					State = 269;
					equalityExpression();
					}
					break;
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BinaryExpressionContext[] binaryExpression() {
			return GetRuleContexts<BinaryExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BinaryExpressionContext binaryExpression(int i) {
			return GetRuleContext<BinaryExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationExpressionContext relationExpression() {
			return GetRuleContext<RelationExpressionContext>(0);
		}
		public RelationExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationExpressionContext relationExpression() {
		RelationExpressionContext _localctx = new RelationExpressionContext(Context, State);
		EnterRule(_localctx, 40, RULE_relationExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 274;
			binaryExpression();
			State = 280;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 25971130368L) != 0)) {
				{
				State = 275;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 25971130368L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 278;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
				case 1:
					{
					State = 276;
					binaryExpression();
					}
					break;
				case 2:
					{
					State = 277;
					relationExpression();
					}
					break;
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinaryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MultExpressionContext[] multExpression() {
			return GetRuleContexts<MultExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultExpressionContext multExpression(int i) {
			return GetRuleContext<MultExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BinaryExpressionContext binaryExpression() {
			return GetRuleContext<BinaryExpressionContext>(0);
		}
		public BinaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binaryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BinaryExpressionContext binaryExpression() {
		BinaryExpressionContext _localctx = new BinaryExpressionContext(Context, State);
		EnterRule(_localctx, 42, RULE_binaryExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 282;
			multExpression();
			State = 288;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__34 || _la==T__35) {
				{
				State = 283;
				_la = TokenStream.LA(1);
				if ( !(_la==T__34 || _la==T__35) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 286;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
				case 1:
					{
					State = 284;
					multExpression();
					}
					break;
				case 2:
					{
					State = 285;
					binaryExpression();
					}
					break;
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext[] unaryExpression() {
			return GetRuleContexts<UnaryExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext unaryExpression(int i) {
			return GetRuleContext<UnaryExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultExpressionContext multExpression() {
			return GetRuleContext<MultExpressionContext>(0);
		}
		public MultExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultExpressionContext multExpression() {
		MultExpressionContext _localctx = new MultExpressionContext(Context, State);
		EnterRule(_localctx, 44, RULE_multExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 290;
			unaryExpression();
			State = 296;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 962072674304L) != 0)) {
				{
				State = 291;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 962072674304L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 294;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
				case 1:
					{
					State = 292;
					unaryExpression();
					}
					break;
				case 2:
					{
					State = 293;
					multExpression();
					}
					break;
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public UnaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExpressionContext unaryExpression() {
		UnaryExpressionContext _localctx = new UnaryExpressionContext(Context, State);
		EnterRule(_localctx, 46, RULE_unaryExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 301;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__35 || _la==T__39) {
				{
				{
				State = 298;
				_la = TokenStream.LA(1);
				if ( !(_la==T__35 || _la==T__39) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 303;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 304;
			term();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM() { return GetToken(GASParser.NUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListTermContext listTerm() {
			return GetRuleContext<ListTermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALLSTRINGS() { return GetToken(GASParser.ALLSTRINGS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GroupTermContext groupTerm() {
			return GetRuleContext<GroupTermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeIdentifierContext attributeIdentifier() {
			return GetRuleContext<AttributeIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RecordTermContext recordTerm() {
			return GetRuleContext<RecordTermContext>(0);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 48, RULE_term);
		try {
			State = 321;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 306;
				Match(NUM);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 307;
				Match(T__40);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 308;
				Match(T__41);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 309;
				Match(T__42);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 310;
				Match(T__1);
				State = 311;
				expression();
				State = 312;
				Match(T__3);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 314;
				listTerm();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 315;
				functionCall();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 316;
				Match(ALLSTRINGS);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 317;
				groupTerm();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 318;
				attributeIdentifier();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 319;
				identifier();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 320;
				recordTerm();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RecordTermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RecordTypeIdentifierContext recordTypeIdentifier() {
			return GetRuleContext<RecordTypeIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public RecordTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recordTerm; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecordTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RecordTermContext recordTerm() {
		RecordTermContext _localctx = new RecordTermContext(Context, State);
		EnterRule(_localctx, 50, RULE_recordTerm);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 323;
			recordTypeIdentifier();
			State = 324;
			Match(T__6);
			State = 338;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 325;
				identifier();
				State = 326;
				Match(T__7);
				State = 327;
				expression();
				State = 335;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__2) {
					{
					{
					State = 328;
					Match(T__2);
					State = 329;
					identifier();
					State = 330;
					Match(T__7);
					State = 331;
					expression();
					}
					}
					State = 337;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 340;
			Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListTermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ListTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listTerm; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListTermContext listTerm() {
		ListTermContext _localctx = new ListTermContext(Context, State);
		EnterRule(_localctx, 52, RULE_listTerm);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 342;
			Match(T__43);
			State = 343;
			Match(T__25);
			State = 344;
			type();
			State = 345;
			Match(T__26);
			State = 346;
			Match(T__6);
			State = 355;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2039662789001220L) != 0)) {
				{
				State = 347;
				expression();
				State = 352;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__2) {
					{
					{
					State = 348;
					Match(T__2);
					State = 349;
					expression();
					}
					}
					State = 354;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 357;
			Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupTermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public GroupTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupTerm; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupTermContext groupTerm() {
		GroupTermContext _localctx = new GroupTermContext(Context, State);
		EnterRule(_localctx, 54, RULE_groupTerm);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 359;
			Match(T__44);
			State = 360;
			Match(T__1);
			State = 361;
			expression();
			State = 362;
			Match(T__2);
			State = 363;
			Match(T__6);
			State = 367;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 281475312058434L) != 0)) {
				{
				{
				State = 364;
				statement();
				}
				}
				State = 369;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 370;
			Match(T__8);
			State = 371;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 56, RULE_functionCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 373;
			identifier();
			State = 374;
			Match(T__1);
			State = 383;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2039662789001220L) != 0)) {
				{
				State = 375;
				expression();
				State = 380;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__2) {
					{
					{
					State = 376;
					Match(T__2);
					State = 377;
					expression();
					}
					}
					State = 382;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 385;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RecordTypeIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GASParser.IDENTIFIER, 0); }
		public RecordTypeIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recordTypeIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecordTypeIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RecordTypeIdentifierContext recordTypeIdentifier() {
		RecordTypeIdentifierContext _localctx = new RecordTypeIdentifierContext(Context, State);
		EnterRule(_localctx, 58, RULE_recordTypeIdentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 387;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GASParser.IDENTIFIER, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 60, RULE_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 389;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public AttributeIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributeIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeIdentifierContext attributeIdentifier() {
		AttributeIdentifierContext _localctx = new AttributeIdentifierContext(Context, State);
		EnterRule(_localctx, 62, RULE_attributeIdentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 391;
			identifier();
			State = 392;
			Match(T__45);
			State = 393;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,51,396,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,1,0,5,0,66,8,0,10,0,12,0,69,9,0,1,0,1,0,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,3,2,84,8,2,1,3,1,3,1,3,1,3,
		1,3,1,3,3,3,92,8,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,3,4,101,8,4,1,5,1,5,1,5,
		1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,5,5,116,8,5,10,5,12,5,119,9,5,
		3,5,121,8,5,1,5,1,5,1,6,1,6,3,6,127,8,6,1,6,1,6,1,6,3,6,132,8,6,1,7,1,
		7,3,7,136,8,7,1,7,1,7,1,7,1,8,1,8,3,8,143,8,8,1,8,1,8,1,9,1,9,1,9,1,9,
		1,9,1,9,5,9,153,8,9,10,9,12,9,156,9,9,1,9,1,9,3,9,160,8,9,1,10,1,10,1,
		10,5,10,165,8,10,10,10,12,10,168,9,10,1,10,1,10,1,10,3,10,173,8,10,1,11,
		1,11,1,11,1,11,1,11,1,11,5,11,181,8,11,10,11,12,11,184,9,11,1,11,1,11,
		1,12,1,12,1,12,1,12,3,12,192,8,12,1,12,1,12,1,12,1,12,1,12,3,12,199,8,
		12,1,12,1,12,1,12,5,12,204,8,12,10,12,12,12,207,9,12,1,12,1,12,1,13,1,
		13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,5,14,223,8,14,10,
		14,12,14,226,9,14,3,14,228,8,14,1,14,1,14,1,14,5,14,233,8,14,10,14,12,
		14,236,9,14,1,14,1,14,1,15,1,15,3,15,242,8,15,1,16,1,16,1,16,1,16,1,16,
		3,16,249,8,16,1,17,1,17,1,17,1,17,1,17,1,17,3,17,257,8,17,1,18,1,18,1,
		18,1,18,3,18,263,8,18,3,18,265,8,18,1,19,1,19,1,19,1,19,3,19,271,8,19,
		3,19,273,8,19,1,20,1,20,1,20,1,20,3,20,279,8,20,3,20,281,8,20,1,21,1,21,
		1,21,1,21,3,21,287,8,21,3,21,289,8,21,1,22,1,22,1,22,1,22,3,22,295,8,22,
		3,22,297,8,22,1,23,5,23,300,8,23,10,23,12,23,303,9,23,1,23,1,23,1,24,1,
		24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,3,
		24,322,8,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,5,25,334,
		8,25,10,25,12,25,337,9,25,3,25,339,8,25,1,25,1,25,1,26,1,26,1,26,1,26,
		1,26,1,26,1,26,1,26,5,26,351,8,26,10,26,12,26,354,9,26,3,26,356,8,26,1,
		26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,5,27,366,8,27,10,27,12,27,369,9,
		27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,5,28,379,8,28,10,28,12,28,382,
		9,28,3,28,384,8,28,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,31,1,31,1,
		31,1,234,0,32,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,
		42,44,46,48,50,52,54,56,58,60,62,0,8,2,0,8,8,10,13,1,0,14,15,1,0,29,30,
		1,0,31,32,2,0,26,27,33,34,1,0,35,36,1,0,37,39,2,0,36,36,40,40,426,0,67,
		1,0,0,0,2,72,1,0,0,0,4,83,1,0,0,0,6,91,1,0,0,0,8,100,1,0,0,0,10,102,1,
		0,0,0,12,126,1,0,0,0,14,135,1,0,0,0,16,142,1,0,0,0,18,146,1,0,0,0,20,172,
		1,0,0,0,22,174,1,0,0,0,24,187,1,0,0,0,26,210,1,0,0,0,28,213,1,0,0,0,30,
		241,1,0,0,0,32,248,1,0,0,0,34,256,1,0,0,0,36,258,1,0,0,0,38,266,1,0,0,
		0,40,274,1,0,0,0,42,282,1,0,0,0,44,290,1,0,0,0,46,301,1,0,0,0,48,321,1,
		0,0,0,50,323,1,0,0,0,52,342,1,0,0,0,54,359,1,0,0,0,56,373,1,0,0,0,58,387,
		1,0,0,0,60,389,1,0,0,0,62,391,1,0,0,0,64,66,3,4,2,0,65,64,1,0,0,0,66,69,
		1,0,0,0,67,65,1,0,0,0,67,68,1,0,0,0,68,70,1,0,0,0,69,67,1,0,0,0,70,71,
		5,0,0,1,71,1,1,0,0,0,72,73,5,1,0,0,73,74,5,2,0,0,74,75,3,36,18,0,75,76,
		5,3,0,0,76,77,3,36,18,0,77,78,5,3,0,0,78,79,3,36,18,0,79,80,5,4,0,0,80,
		3,1,0,0,0,81,84,3,6,3,0,82,84,3,8,4,0,83,81,1,0,0,0,83,82,1,0,0,0,84,5,
		1,0,0,0,85,92,3,12,6,0,86,92,3,14,7,0,87,92,3,56,28,0,88,92,3,26,13,0,
		89,92,3,16,8,0,90,92,3,2,1,0,91,85,1,0,0,0,91,86,1,0,0,0,91,87,1,0,0,0,
		91,88,1,0,0,0,91,89,1,0,0,0,91,90,1,0,0,0,92,93,1,0,0,0,93,94,5,5,0,0,
		94,7,1,0,0,0,95,101,3,22,11,0,96,101,3,28,14,0,97,101,3,24,12,0,98,101,
		3,18,9,0,99,101,3,10,5,0,100,95,1,0,0,0,100,96,1,0,0,0,100,97,1,0,0,0,
		100,98,1,0,0,0,100,99,1,0,0,0,101,9,1,0,0,0,102,103,5,6,0,0,103,104,3,
		58,29,0,104,120,5,7,0,0,105,106,3,30,15,0,106,107,3,60,30,0,107,108,5,
		8,0,0,108,117,3,36,18,0,109,110,5,3,0,0,110,111,3,30,15,0,111,112,3,60,
		30,0,112,113,5,8,0,0,113,114,3,36,18,0,114,116,1,0,0,0,115,109,1,0,0,0,
		116,119,1,0,0,0,117,115,1,0,0,0,117,118,1,0,0,0,118,121,1,0,0,0,119,117,
		1,0,0,0,120,105,1,0,0,0,120,121,1,0,0,0,121,122,1,0,0,0,122,123,5,9,0,
		0,123,11,1,0,0,0,124,127,3,32,16,0,125,127,3,34,17,0,126,124,1,0,0,0,126,
		125,1,0,0,0,127,128,1,0,0,0,128,131,3,60,30,0,129,130,5,8,0,0,130,132,
		3,36,18,0,131,129,1,0,0,0,131,132,1,0,0,0,132,13,1,0,0,0,133,136,3,62,
		31,0,134,136,3,60,30,0,135,133,1,0,0,0,135,134,1,0,0,0,136,137,1,0,0,0,
		137,138,7,0,0,0,138,139,3,36,18,0,139,15,1,0,0,0,140,143,3,62,31,0,141,
		143,3,60,30,0,142,140,1,0,0,0,142,141,1,0,0,0,143,144,1,0,0,0,144,145,
		7,1,0,0,145,17,1,0,0,0,146,147,5,16,0,0,147,148,5,2,0,0,148,149,3,36,18,
		0,149,150,5,4,0,0,150,154,5,7,0,0,151,153,3,4,2,0,152,151,1,0,0,0,153,
		156,1,0,0,0,154,152,1,0,0,0,154,155,1,0,0,0,155,157,1,0,0,0,156,154,1,
		0,0,0,157,159,5,9,0,0,158,160,3,20,10,0,159,158,1,0,0,0,159,160,1,0,0,
		0,160,19,1,0,0,0,161,162,5,17,0,0,162,166,5,7,0,0,163,165,3,4,2,0,164,
		163,1,0,0,0,165,168,1,0,0,0,166,164,1,0,0,0,166,167,1,0,0,0,167,169,1,
		0,0,0,168,166,1,0,0,0,169,173,5,9,0,0,170,171,5,17,0,0,171,173,3,18,9,
		0,172,161,1,0,0,0,172,170,1,0,0,0,173,21,1,0,0,0,174,175,5,18,0,0,175,
		176,5,2,0,0,176,177,3,36,18,0,177,178,5,4,0,0,178,182,5,7,0,0,179,181,
		3,4,2,0,180,179,1,0,0,0,181,184,1,0,0,0,182,180,1,0,0,0,182,183,1,0,0,
		0,183,185,1,0,0,0,184,182,1,0,0,0,185,186,5,9,0,0,186,23,1,0,0,0,187,188,
		5,19,0,0,188,191,5,2,0,0,189,192,3,12,6,0,190,192,3,14,7,0,191,189,1,0,
		0,0,191,190,1,0,0,0,192,193,1,0,0,0,193,194,5,5,0,0,194,195,3,36,18,0,
		195,198,5,5,0,0,196,199,3,14,7,0,197,199,3,16,8,0,198,196,1,0,0,0,198,
		197,1,0,0,0,199,200,1,0,0,0,200,201,5,4,0,0,201,205,5,7,0,0,202,204,3,
		4,2,0,203,202,1,0,0,0,204,207,1,0,0,0,205,203,1,0,0,0,205,206,1,0,0,0,
		206,208,1,0,0,0,207,205,1,0,0,0,208,209,5,9,0,0,209,25,1,0,0,0,210,211,
		5,20,0,0,211,212,3,36,18,0,212,27,1,0,0,0,213,214,3,30,15,0,214,215,3,
		60,30,0,215,227,5,2,0,0,216,217,3,30,15,0,217,224,3,60,30,0,218,219,5,
		3,0,0,219,220,3,30,15,0,220,221,3,60,30,0,221,223,1,0,0,0,222,218,1,0,
		0,0,223,226,1,0,0,0,224,222,1,0,0,0,224,225,1,0,0,0,225,228,1,0,0,0,226,
		224,1,0,0,0,227,216,1,0,0,0,227,228,1,0,0,0,228,229,1,0,0,0,229,230,5,
		4,0,0,230,234,5,7,0,0,231,233,3,4,2,0,232,231,1,0,0,0,233,236,1,0,0,0,
		234,235,1,0,0,0,234,232,1,0,0,0,235,237,1,0,0,0,236,234,1,0,0,0,237,238,
		5,9,0,0,238,29,1,0,0,0,239,242,3,32,16,0,240,242,3,34,17,0,241,239,1,0,
		0,0,241,240,1,0,0,0,242,31,1,0,0,0,243,249,5,21,0,0,244,249,5,22,0,0,245,
		249,5,23,0,0,246,249,5,24,0,0,247,249,3,58,29,0,248,243,1,0,0,0,248,244,
		1,0,0,0,248,245,1,0,0,0,248,246,1,0,0,0,248,247,1,0,0,0,249,33,1,0,0,0,
		250,251,5,25,0,0,251,252,5,26,0,0,252,253,3,32,16,0,253,254,5,27,0,0,254,
		257,1,0,0,0,255,257,5,28,0,0,256,250,1,0,0,0,256,255,1,0,0,0,257,35,1,
		0,0,0,258,264,3,38,19,0,259,262,7,2,0,0,260,263,3,38,19,0,261,263,3,36,
		18,0,262,260,1,0,0,0,262,261,1,0,0,0,263,265,1,0,0,0,264,259,1,0,0,0,264,
		265,1,0,0,0,265,37,1,0,0,0,266,272,3,40,20,0,267,270,7,3,0,0,268,271,3,
		40,20,0,269,271,3,38,19,0,270,268,1,0,0,0,270,269,1,0,0,0,271,273,1,0,
		0,0,272,267,1,0,0,0,272,273,1,0,0,0,273,39,1,0,0,0,274,280,3,42,21,0,275,
		278,7,4,0,0,276,279,3,42,21,0,277,279,3,40,20,0,278,276,1,0,0,0,278,277,
		1,0,0,0,279,281,1,0,0,0,280,275,1,0,0,0,280,281,1,0,0,0,281,41,1,0,0,0,
		282,288,3,44,22,0,283,286,7,5,0,0,284,287,3,44,22,0,285,287,3,42,21,0,
		286,284,1,0,0,0,286,285,1,0,0,0,287,289,1,0,0,0,288,283,1,0,0,0,288,289,
		1,0,0,0,289,43,1,0,0,0,290,296,3,46,23,0,291,294,7,6,0,0,292,295,3,46,
		23,0,293,295,3,44,22,0,294,292,1,0,0,0,294,293,1,0,0,0,295,297,1,0,0,0,
		296,291,1,0,0,0,296,297,1,0,0,0,297,45,1,0,0,0,298,300,7,7,0,0,299,298,
		1,0,0,0,300,303,1,0,0,0,301,299,1,0,0,0,301,302,1,0,0,0,302,304,1,0,0,
		0,303,301,1,0,0,0,304,305,3,48,24,0,305,47,1,0,0,0,306,322,5,49,0,0,307,
		322,5,41,0,0,308,322,5,42,0,0,309,322,5,43,0,0,310,311,5,2,0,0,311,312,
		3,36,18,0,312,313,5,4,0,0,313,322,1,0,0,0,314,322,3,52,26,0,315,322,3,
		56,28,0,316,322,5,50,0,0,317,322,3,54,27,0,318,322,3,62,31,0,319,322,3,
		60,30,0,320,322,3,50,25,0,321,306,1,0,0,0,321,307,1,0,0,0,321,308,1,0,
		0,0,321,309,1,0,0,0,321,310,1,0,0,0,321,314,1,0,0,0,321,315,1,0,0,0,321,
		316,1,0,0,0,321,317,1,0,0,0,321,318,1,0,0,0,321,319,1,0,0,0,321,320,1,
		0,0,0,322,49,1,0,0,0,323,324,3,58,29,0,324,338,5,7,0,0,325,326,3,60,30,
		0,326,327,5,8,0,0,327,335,3,36,18,0,328,329,5,3,0,0,329,330,3,60,30,0,
		330,331,5,8,0,0,331,332,3,36,18,0,332,334,1,0,0,0,333,328,1,0,0,0,334,
		337,1,0,0,0,335,333,1,0,0,0,335,336,1,0,0,0,336,339,1,0,0,0,337,335,1,
		0,0,0,338,325,1,0,0,0,338,339,1,0,0,0,339,340,1,0,0,0,340,341,5,9,0,0,
		341,51,1,0,0,0,342,343,5,44,0,0,343,344,5,26,0,0,344,345,3,32,16,0,345,
		346,5,27,0,0,346,355,5,7,0,0,347,352,3,36,18,0,348,349,5,3,0,0,349,351,
		3,36,18,0,350,348,1,0,0,0,351,354,1,0,0,0,352,350,1,0,0,0,352,353,1,0,
		0,0,353,356,1,0,0,0,354,352,1,0,0,0,355,347,1,0,0,0,355,356,1,0,0,0,356,
		357,1,0,0,0,357,358,5,9,0,0,358,53,1,0,0,0,359,360,5,45,0,0,360,361,5,
		2,0,0,361,362,3,36,18,0,362,363,5,3,0,0,363,367,5,7,0,0,364,366,3,4,2,
		0,365,364,1,0,0,0,366,369,1,0,0,0,367,365,1,0,0,0,367,368,1,0,0,0,368,
		370,1,0,0,0,369,367,1,0,0,0,370,371,5,9,0,0,371,372,5,4,0,0,372,55,1,0,
		0,0,373,374,3,60,30,0,374,383,5,2,0,0,375,380,3,36,18,0,376,377,5,3,0,
		0,377,379,3,36,18,0,378,376,1,0,0,0,379,382,1,0,0,0,380,378,1,0,0,0,380,
		381,1,0,0,0,381,384,1,0,0,0,382,380,1,0,0,0,383,375,1,0,0,0,383,384,1,
		0,0,0,384,385,1,0,0,0,385,386,5,4,0,0,386,57,1,0,0,0,387,388,5,48,0,0,
		388,59,1,0,0,0,389,390,5,48,0,0,390,61,1,0,0,0,391,392,3,60,30,0,392,393,
		5,46,0,0,393,394,3,60,30,0,394,63,1,0,0,0,43,67,83,91,100,117,120,126,
		131,135,142,154,159,166,172,182,191,198,205,224,227,234,241,248,256,262,
		264,270,272,278,280,286,288,294,296,301,321,335,338,352,355,367,380,383
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}

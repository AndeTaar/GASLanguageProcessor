//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/thomas/Documents/GASLanguageProcessor/GASLanguageProcessor/Frontend/GAS.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class GASParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, COMMENT=47, IDENTIFIER=48, NUM=49, ALLSTRINGS=50, WS=51;
	public const int
		RULE_program = 0, RULE_canvas = 1, RULE_statement = 2, RULE_simpleStatement = 3, 
		RULE_complexStatement = 4, RULE_recDefinition = 5, RULE_recDeclaration = 6, 
		RULE_recAssignment = 7, RULE_declaration = 8, RULE_assignment = 9, RULE_increment = 10, 
		RULE_ifStatement = 11, RULE_elseStatement = 12, RULE_whileStatement = 13, 
		RULE_forStatement = 14, RULE_returnStatement = 15, RULE_functionDeclaration = 16, 
		RULE_allTypes = 17, RULE_type = 18, RULE_collectionType = 19, RULE_recCollectionType = 20, 
		RULE_expression = 21, RULE_equalityExpression = 22, RULE_relationExpression = 23, 
		RULE_binaryExpression = 24, RULE_multExpression = 25, RULE_unaryExpression = 26, 
		RULE_recExpression = 27, RULE_recListTerm = 28, RULE_allExpression = 29, 
		RULE_term = 30, RULE_listTerm = 31, RULE_groupTerm = 32, RULE_functionCall = 33, 
		RULE_recTypeIdent = 34, RULE_recIdent = 35, RULE_varIdent = 36, RULE_ident = 37;
	public static readonly string[] ruleNames = {
		"program", "canvas", "statement", "simpleStatement", "complexStatement", 
		"recDefinition", "recDeclaration", "recAssignment", "declaration", "assignment", 
		"increment", "ifStatement", "elseStatement", "whileStatement", "forStatement", 
		"returnStatement", "functionDeclaration", "allTypes", "type", "collectionType", 
		"recCollectionType", "expression", "equalityExpression", "relationExpression", 
		"binaryExpression", "multExpression", "unaryExpression", "recExpression", 
		"recListTerm", "allExpression", "term", "listTerm", "groupTerm", "functionCall", 
		"recTypeIdent", "recIdent", "varIdent", "ident"
	};

	private static readonly string[] _LiteralNames = {
		null, "'canvas'", "'('", "','", "')'", "';'", "'TypeDef'", "'='", "'{'", 
		"'}'", "'+='", "'-='", "'*='", "'/='", "'++'", "'--'", "'if'", "'else'", 
		"'while'", "'for'", "'return'", "'num'", "'bool'", "'string'", "'void'", 
		"'list'", "'<'", "'>'", "'group'", "'||'", "'&&'", "'=='", "'!='", "'<='", 
		"'>='", "'+'", "'-'", "'*'", "'/'", "'%'", "'!'", "'List'", "'true'", 
		"'false'", "'null'", "'Group'", "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, "COMMENT", 
		"IDENTIFIER", "NUM", "ALLSTRINGS", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "GAS.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static GASParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public GASParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public GASParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(GASParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 281475312058434L) != 0)) {
				{
				{
				State = 76;
				statement();
				}
				}
				State = 81;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 82;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CanvasContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public CanvasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_canvas; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCanvas(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CanvasContext canvas() {
		CanvasContext _localctx = new CanvasContext(Context, State);
		EnterRule(_localctx, 2, RULE_canvas);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84;
			Match(T__0);
			State = 85;
			Match(T__1);
			State = 86;
			expression();
			State = 87;
			Match(T__2);
			State = 88;
			expression();
			State = 89;
			Match(T__2);
			State = 90;
			expression();
			State = 91;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleStatementContext simpleStatement() {
			return GetRuleContext<SimpleStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComplexStatementContext complexStatement() {
			return GetRuleContext<ComplexStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			State = 95;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 93;
				simpleStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 94;
				complexStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IncrementContext increment() {
			return GetRuleContext<IncrementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CanvasContext canvas() {
			return GetRuleContext<CanvasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RecDeclarationContext recDeclaration() {
			return GetRuleContext<RecDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RecAssignmentContext recAssignment() {
			return GetRuleContext<RecAssignmentContext>(0);
		}
		public SimpleStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleStatementContext simpleStatement() {
		SimpleStatementContext _localctx = new SimpleStatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_simpleStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 105;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				{
				State = 97;
				declaration();
				}
				break;
			case 2:
				{
				State = 98;
				assignment();
				}
				break;
			case 3:
				{
				State = 99;
				functionCall();
				}
				break;
			case 4:
				{
				State = 100;
				returnStatement();
				}
				break;
			case 5:
				{
				State = 101;
				increment();
				}
				break;
			case 6:
				{
				State = 102;
				canvas();
				}
				break;
			case 7:
				{
				State = 103;
				recDeclaration();
				}
				break;
			case 8:
				{
				State = 104;
				recAssignment();
				}
				break;
			}
			State = 107;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComplexStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RecDefinitionContext recDefinition() {
			return GetRuleContext<RecDefinitionContext>(0);
		}
		public ComplexStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complexStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComplexStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComplexStatementContext complexStatement() {
		ComplexStatementContext _localctx = new ComplexStatementContext(Context, State);
		EnterRule(_localctx, 8, RULE_complexStatement);
		try {
			State = 114;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__17:
				EnterOuterAlt(_localctx, 1);
				{
				State = 109;
				whileStatement();
				}
				break;
			case T__20:
			case T__21:
			case T__22:
			case T__23:
			case T__24:
			case T__27:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 110;
				functionDeclaration();
				}
				break;
			case T__18:
				EnterOuterAlt(_localctx, 3);
				{
				State = 111;
				forStatement();
				}
				break;
			case T__15:
				EnterOuterAlt(_localctx, 4);
				{
				State = 112;
				ifStatement();
				}
				break;
			case T__5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 113;
				recDefinition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RecDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RecTypeIdentContext recTypeIdent() {
			return GetRuleContext<RecTypeIdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AllTypesContext[] allTypes() {
			return GetRuleContexts<AllTypesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AllTypesContext allTypes(int i) {
			return GetRuleContext<AllTypesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext[] ident() {
			return GetRuleContexts<IdentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident(int i) {
			return GetRuleContext<IdentContext>(i);
		}
		public RecDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RecDefinitionContext recDefinition() {
		RecDefinitionContext _localctx = new RecDefinitionContext(Context, State);
		EnterRule(_localctx, 10, RULE_recDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 116;
			Match(T__5);
			State = 117;
			recTypeIdent();
			State = 118;
			Match(T__6);
			State = 119;
			Match(T__7);
			State = 126;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 281475310157824L) != 0)) {
				{
				{
				State = 120;
				allTypes();
				State = 121;
				ident();
				State = 122;
				Match(T__4);
				}
				}
				State = 128;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 129;
			Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RecDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RecIdentContext recIdent() {
			return GetRuleContext<RecIdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RecExpressionContext recExpression() {
			return GetRuleContext<RecExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RecTypeIdentContext recTypeIdent() {
			return GetRuleContext<RecTypeIdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RecCollectionTypeContext recCollectionType() {
			return GetRuleContext<RecCollectionTypeContext>(0);
		}
		public RecDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RecDeclarationContext recDeclaration() {
		RecDeclarationContext _localctx = new RecDeclarationContext(Context, State);
		EnterRule(_localctx, 12, RULE_recDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 133;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				{
				State = 131;
				recTypeIdent();
				}
				break;
			case T__24:
				{
				State = 132;
				recCollectionType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 135;
			recIdent();
			State = 136;
			Match(T__6);
			State = 137;
			recExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RecAssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RecIdentContext recIdent() {
			return GetRuleContext<RecIdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RecExpressionContext recExpression() {
			return GetRuleContext<RecExpressionContext>(0);
		}
		public RecAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recAssignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RecAssignmentContext recAssignment() {
		RecAssignmentContext _localctx = new RecAssignmentContext(Context, State);
		EnterRule(_localctx, 14, RULE_recAssignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 139;
			recIdent();
			State = 140;
			Match(T__6);
			State = 141;
			recExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarIdentContext varIdent() {
			return GetRuleContext<VarIdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CollectionTypeContext collectionType() {
			return GetRuleContext<CollectionTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 16, RULE_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 145;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__20:
			case T__21:
			case T__22:
			case T__23:
				{
				State = 143;
				type();
				}
				break;
			case T__24:
			case T__27:
				{
				State = 144;
				collectionType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 147;
			varIdent();
			State = 150;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__6) {
				{
				State = 148;
				Match(T__6);
				State = 149;
				expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarIdentContext varIdent() {
			return GetRuleContext<VarIdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 18, RULE_assignment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 152;
			varIdent();
			State = 153;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 15488L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 154;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncrementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarIdentContext varIdent() {
			return GetRuleContext<VarIdentContext>(0);
		}
		public IncrementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_increment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIncrement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IncrementContext increment() {
		IncrementContext _localctx = new IncrementContext(Context, State);
		EnterRule(_localctx, 20, RULE_increment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 156;
			varIdent();
			State = 157;
			_la = TokenStream.LA(1);
			if ( !(_la==T__13 || _la==T__14) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseStatementContext elseStatement() {
			return GetRuleContext<ElseStatementContext>(0);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 22, RULE_ifStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 159;
			Match(T__15);
			State = 160;
			Match(T__1);
			State = 161;
			expression();
			State = 162;
			Match(T__3);
			State = 163;
			Match(T__7);
			State = 167;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 281475312058434L) != 0)) {
				{
				{
				State = 164;
				statement();
				}
				}
				State = 169;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 170;
			Match(T__8);
			State = 172;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__16) {
				{
				State = 171;
				elseStatement();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		public ElseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseStatementContext elseStatement() {
		ElseStatementContext _localctx = new ElseStatementContext(Context, State);
		EnterRule(_localctx, 24, RULE_elseStatement);
		int _la;
		try {
			State = 185;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 174;
				Match(T__16);
				{
				State = 175;
				Match(T__7);
				State = 179;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 281475312058434L) != 0)) {
					{
					{
					State = 176;
					statement();
					}
					}
					State = 181;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 182;
				Match(T__8);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 183;
				Match(T__16);
				State = 184;
				ifStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 26, RULE_whileStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 187;
			Match(T__17);
			State = 188;
			Match(T__1);
			State = 189;
			expression();
			State = 190;
			Match(T__3);
			State = 191;
			Match(T__7);
			State = 195;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 281475312058434L) != 0)) {
				{
				{
				State = 192;
				statement();
				}
				}
				State = 197;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 198;
			Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext[] assignment() {
			return GetRuleContexts<AssignmentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment(int i) {
			return GetRuleContext<AssignmentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IncrementContext increment() {
			return GetRuleContext<IncrementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 28, RULE_forStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 200;
			Match(T__18);
			State = 201;
			Match(T__1);
			State = 204;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__20:
			case T__21:
			case T__22:
			case T__23:
			case T__24:
			case T__27:
				{
				State = 202;
				declaration();
				}
				break;
			case IDENTIFIER:
				{
				State = 203;
				assignment();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 206;
			Match(T__4);
			State = 207;
			expression();
			State = 208;
			Match(T__4);
			State = 211;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				{
				State = 209;
				assignment();
				}
				break;
			case 2:
				{
				State = 210;
				increment();
				}
				break;
			}
			State = 213;
			Match(T__3);
			State = 214;
			Match(T__7);
			State = 218;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 281475312058434L) != 0)) {
				{
				{
				State = 215;
				statement();
				}
				}
				State = 220;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 221;
			Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 30, RULE_returnStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 223;
			Match(T__19);
			State = 224;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AllTypesContext[] allTypes() {
			return GetRuleContexts<AllTypesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AllTypesContext allTypes(int i) {
			return GetRuleContext<AllTypesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext[] ident() {
			return GetRuleContexts<IdentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident(int i) {
			return GetRuleContext<IdentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public FunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclarationContext functionDeclaration() {
		FunctionDeclarationContext _localctx = new FunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 32, RULE_functionDeclaration);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 226;
			allTypes();
			State = 227;
			ident();
			State = 228;
			Match(T__1);
			State = 240;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 281475310157824L) != 0)) {
				{
				State = 229;
				allTypes();
				State = 230;
				ident();
				State = 237;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__2) {
					{
					{
					State = 231;
					Match(T__2);
					State = 232;
					allTypes();
					State = 233;
					ident();
					}
					}
					State = 239;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 242;
			Match(T__3);
			State = 243;
			Match(T__7);
			State = 247;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 244;
					statement();
					}
					} 
				}
				State = 249;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			}
			State = 250;
			Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AllTypesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CollectionTypeContext collectionType() {
			return GetRuleContext<CollectionTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RecTypeIdentContext recTypeIdent() {
			return GetRuleContext<RecTypeIdentContext>(0);
		}
		public AllTypesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_allTypes; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAllTypes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AllTypesContext allTypes() {
		AllTypesContext _localctx = new AllTypesContext(Context, State);
		EnterRule(_localctx, 34, RULE_allTypes);
		try {
			State = 255;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__20:
			case T__21:
			case T__22:
			case T__23:
				EnterOuterAlt(_localctx, 1);
				{
				State = 252;
				type();
				}
				break;
			case T__24:
			case T__27:
				EnterOuterAlt(_localctx, 2);
				{
				State = 253;
				collectionType();
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 254;
				recTypeIdent();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 36, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 257;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 31457280L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollectionTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public CollectionTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collectionType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollectionType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CollectionTypeContext collectionType() {
		CollectionTypeContext _localctx = new CollectionTypeContext(Context, State);
		EnterRule(_localctx, 38, RULE_collectionType);
		try {
			State = 265;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__24:
				EnterOuterAlt(_localctx, 1);
				{
				State = 259;
				Match(T__24);
				State = 260;
				Match(T__25);
				{
				State = 261;
				type();
				}
				State = 262;
				Match(T__26);
				}
				break;
			case T__27:
				EnterOuterAlt(_localctx, 2);
				{
				State = 264;
				Match(T__27);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RecCollectionTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RecTypeIdentContext recTypeIdent() {
			return GetRuleContext<RecTypeIdentContext>(0);
		}
		public RecCollectionTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recCollectionType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecCollectionType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RecCollectionTypeContext recCollectionType() {
		RecCollectionTypeContext _localctx = new RecCollectionTypeContext(Context, State);
		EnterRule(_localctx, 40, RULE_recCollectionType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 267;
			Match(T__24);
			State = 268;
			Match(T__25);
			{
			State = 269;
			recTypeIdent();
			}
			State = 270;
			Match(T__26);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EqualityExpressionContext[] equalityExpression() {
			return GetRuleContexts<EqualityExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EqualityExpressionContext equalityExpression(int i) {
			return GetRuleContext<EqualityExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 42, RULE_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 272;
			equalityExpression();
			State = 278;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__28 || _la==T__29) {
				{
				State = 273;
				_la = TokenStream.LA(1);
				if ( !(_la==T__28 || _la==T__29) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 276;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
				case 1:
					{
					State = 274;
					equalityExpression();
					}
					break;
				case 2:
					{
					State = 275;
					expression();
					}
					break;
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EqualityExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RelationExpressionContext[] relationExpression() {
			return GetRuleContexts<RelationExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationExpressionContext relationExpression(int i) {
			return GetRuleContext<RelationExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EqualityExpressionContext equalityExpression() {
			return GetRuleContext<EqualityExpressionContext>(0);
		}
		public EqualityExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equalityExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EqualityExpressionContext equalityExpression() {
		EqualityExpressionContext _localctx = new EqualityExpressionContext(Context, State);
		EnterRule(_localctx, 44, RULE_equalityExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 280;
			relationExpression();
			State = 286;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__30 || _la==T__31) {
				{
				State = 281;
				_la = TokenStream.LA(1);
				if ( !(_la==T__30 || _la==T__31) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 284;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
				case 1:
					{
					State = 282;
					relationExpression();
					}
					break;
				case 2:
					{
					State = 283;
					equalityExpression();
					}
					break;
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BinaryExpressionContext[] binaryExpression() {
			return GetRuleContexts<BinaryExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BinaryExpressionContext binaryExpression(int i) {
			return GetRuleContext<BinaryExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationExpressionContext relationExpression() {
			return GetRuleContext<RelationExpressionContext>(0);
		}
		public RelationExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationExpressionContext relationExpression() {
		RelationExpressionContext _localctx = new RelationExpressionContext(Context, State);
		EnterRule(_localctx, 46, RULE_relationExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 288;
			binaryExpression();
			State = 294;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 25971130368L) != 0)) {
				{
				State = 289;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 25971130368L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 292;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
				case 1:
					{
					State = 290;
					binaryExpression();
					}
					break;
				case 2:
					{
					State = 291;
					relationExpression();
					}
					break;
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinaryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MultExpressionContext[] multExpression() {
			return GetRuleContexts<MultExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultExpressionContext multExpression(int i) {
			return GetRuleContext<MultExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BinaryExpressionContext binaryExpression() {
			return GetRuleContext<BinaryExpressionContext>(0);
		}
		public BinaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binaryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BinaryExpressionContext binaryExpression() {
		BinaryExpressionContext _localctx = new BinaryExpressionContext(Context, State);
		EnterRule(_localctx, 48, RULE_binaryExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 296;
			multExpression();
			State = 302;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__34 || _la==T__35) {
				{
				State = 297;
				_la = TokenStream.LA(1);
				if ( !(_la==T__34 || _la==T__35) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 300;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
				case 1:
					{
					State = 298;
					multExpression();
					}
					break;
				case 2:
					{
					State = 299;
					binaryExpression();
					}
					break;
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext[] unaryExpression() {
			return GetRuleContexts<UnaryExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext unaryExpression(int i) {
			return GetRuleContext<UnaryExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultExpressionContext multExpression() {
			return GetRuleContext<MultExpressionContext>(0);
		}
		public MultExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultExpressionContext multExpression() {
		MultExpressionContext _localctx = new MultExpressionContext(Context, State);
		EnterRule(_localctx, 50, RULE_multExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 304;
			unaryExpression();
			State = 310;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 962072674304L) != 0)) {
				{
				State = 305;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 962072674304L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 308;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
				case 1:
					{
					State = 306;
					unaryExpression();
					}
					break;
				case 2:
					{
					State = 307;
					multExpression();
					}
					break;
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public UnaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExpressionContext unaryExpression() {
		UnaryExpressionContext _localctx = new UnaryExpressionContext(Context, State);
		EnterRule(_localctx, 52, RULE_unaryExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 315;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__35 || _la==T__39) {
				{
				{
				State = 312;
				_la = TokenStream.LA(1);
				if ( !(_la==T__35 || _la==T__39) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 317;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 318;
			term();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RecExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RecIdentContext recIdent() {
			return GetRuleContext<RecIdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RecTypeIdentContext recTypeIdent() {
			return GetRuleContext<RecTypeIdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext[] ident() {
			return GetRuleContexts<IdentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident(int i) {
			return GetRuleContext<IdentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AllExpressionContext[] allExpression() {
			return GetRuleContexts<AllExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AllExpressionContext allExpression(int i) {
			return GetRuleContext<AllExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RecListTermContext recListTerm() {
			return GetRuleContext<RecListTermContext>(0);
		}
		public RecExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RecExpressionContext recExpression() {
		RecExpressionContext _localctx = new RecExpressionContext(Context, State);
		EnterRule(_localctx, 54, RULE_recExpression);
		int _la;
		try {
			State = 336;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 320;
				recIdent();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 321;
				recTypeIdent();
				State = 322;
				Match(T__7);
				State = 330;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==IDENTIFIER) {
					{
					{
					State = 323;
					ident();
					State = 324;
					Match(T__6);
					State = 325;
					allExpression();
					State = 326;
					Match(T__4);
					}
					}
					State = 332;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 333;
				Match(T__8);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 335;
				recListTerm();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RecListTermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RecTypeIdentContext recTypeIdent() {
			return GetRuleContext<RecTypeIdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RecExpressionContext[] recExpression() {
			return GetRuleContexts<RecExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RecExpressionContext recExpression(int i) {
			return GetRuleContext<RecExpressionContext>(i);
		}
		public RecListTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recListTerm; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecListTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RecListTermContext recListTerm() {
		RecListTermContext _localctx = new RecListTermContext(Context, State);
		EnterRule(_localctx, 56, RULE_recListTerm);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 338;
			Match(T__40);
			State = 339;
			Match(T__25);
			State = 340;
			recTypeIdent();
			State = 341;
			Match(T__26);
			State = 342;
			Match(T__7);
			State = 351;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__40 || _la==IDENTIFIER) {
				{
				State = 343;
				recExpression();
				State = 348;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__2) {
					{
					{
					State = 344;
					Match(T__2);
					State = 345;
					recExpression();
					}
					}
					State = 350;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 353;
			Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AllExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RecExpressionContext recExpression() {
			return GetRuleContext<RecExpressionContext>(0);
		}
		public AllExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_allExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAllExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AllExpressionContext allExpression() {
		AllExpressionContext _localctx = new AllExpressionContext(Context, State);
		EnterRule(_localctx, 58, RULE_allExpression);
		try {
			State = 357;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 355;
				expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 356;
				recExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM() { return GetToken(GASParser.NUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListTermContext listTerm() {
			return GetRuleContext<ListTermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALLSTRINGS() { return GetToken(GASParser.ALLSTRINGS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GroupTermContext groupTerm() {
			return GetRuleContext<GroupTermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarIdentContext varIdent() {
			return GetRuleContext<VarIdentContext>(0);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 60, RULE_term);
		try {
			State = 372;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 359;
				Match(NUM);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 360;
				Match(T__41);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 361;
				Match(T__42);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 362;
				Match(T__43);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 363;
				Match(T__1);
				State = 364;
				expression();
				State = 365;
				Match(T__3);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 367;
				listTerm();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 368;
				functionCall();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 369;
				Match(ALLSTRINGS);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 370;
				groupTerm();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 371;
				varIdent();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListTermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ListTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listTerm; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListTermContext listTerm() {
		ListTermContext _localctx = new ListTermContext(Context, State);
		EnterRule(_localctx, 62, RULE_listTerm);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 374;
			Match(T__40);
			State = 375;
			Match(T__25);
			State = 376;
			type();
			State = 377;
			Match(T__26);
			State = 378;
			Match(T__7);
			State = 387;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2039662789001220L) != 0)) {
				{
				State = 379;
				expression();
				State = 384;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__2) {
					{
					{
					State = 380;
					Match(T__2);
					State = 381;
					expression();
					}
					}
					State = 386;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 389;
			Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupTermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public GroupTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupTerm; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupTermContext groupTerm() {
		GroupTermContext _localctx = new GroupTermContext(Context, State);
		EnterRule(_localctx, 64, RULE_groupTerm);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 391;
			Match(T__44);
			State = 392;
			Match(T__1);
			State = 393;
			expression();
			State = 394;
			Match(T__2);
			State = 395;
			Match(T__7);
			State = 399;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 281475312058434L) != 0)) {
				{
				{
				State = 396;
				statement();
				}
				}
				State = 401;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 402;
			Match(T__8);
			State = 403;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AllExpressionContext[] allExpression() {
			return GetRuleContexts<AllExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AllExpressionContext allExpression(int i) {
			return GetRuleContext<AllExpressionContext>(i);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 66, RULE_functionCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 405;
			ident();
			State = 406;
			Match(T__1);
			State = 415;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2039662789001220L) != 0)) {
				{
				State = 407;
				allExpression();
				State = 412;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__2) {
					{
					{
					State = 408;
					Match(T__2);
					State = 409;
					allExpression();
					}
					}
					State = 414;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 417;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RecTypeIdentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GASParser.IDENTIFIER, 0); }
		public RecTypeIdentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recTypeIdent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecTypeIdent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RecTypeIdentContext recTypeIdent() {
		RecTypeIdentContext _localctx = new RecTypeIdentContext(Context, State);
		EnterRule(_localctx, 68, RULE_recTypeIdent);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 419;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RecIdentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GASParser.IDENTIFIER, 0); }
		public RecIdentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recIdent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecIdent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RecIdentContext recIdent() {
		RecIdentContext _localctx = new RecIdentContext(Context, State);
		EnterRule(_localctx, 70, RULE_recIdent);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 421;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarIdentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GASParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RecIdentContext recIdent() {
			return GetRuleContext<RecIdentContext>(0);
		}
		public VarIdentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varIdent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarIdent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarIdentContext varIdent() {
		VarIdentContext _localctx = new VarIdentContext(Context, State);
		EnterRule(_localctx, 72, RULE_varIdent);
		try {
			State = 428;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 423;
				Match(IDENTIFIER);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 424;
				recIdent();
				State = 425;
				Match(T__45);
				State = 426;
				Match(IDENTIFIER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GASParser.IDENTIFIER, 0); }
		public IdentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ident; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentContext ident() {
		IdentContext _localctx = new IdentContext(Context, State);
		EnterRule(_localctx, 74, RULE_ident);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 430;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,51,433,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,1,0,5,0,78,8,0,10,0,12,0,81,9,0,1,0,1,0,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,3,2,96,8,2,1,3,1,3,1,3,1,3,1,3,1,3,1,
		3,1,3,3,3,106,8,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,3,4,115,8,4,1,5,1,5,1,5,
		1,5,1,5,1,5,1,5,1,5,5,5,125,8,5,10,5,12,5,128,9,5,1,5,1,5,1,6,1,6,3,6,
		134,8,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,3,8,146,8,8,1,8,1,8,1,
		8,3,8,151,8,8,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,
		1,11,5,11,166,8,11,10,11,12,11,169,9,11,1,11,1,11,3,11,173,8,11,1,12,1,
		12,1,12,5,12,178,8,12,10,12,12,12,181,9,12,1,12,1,12,1,12,3,12,186,8,12,
		1,13,1,13,1,13,1,13,1,13,1,13,5,13,194,8,13,10,13,12,13,197,9,13,1,13,
		1,13,1,14,1,14,1,14,1,14,3,14,205,8,14,1,14,1,14,1,14,1,14,1,14,3,14,212,
		8,14,1,14,1,14,1,14,5,14,217,8,14,10,14,12,14,220,9,14,1,14,1,14,1,15,
		1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,5,16,236,8,16,10,
		16,12,16,239,9,16,3,16,241,8,16,1,16,1,16,1,16,5,16,246,8,16,10,16,12,
		16,249,9,16,1,16,1,16,1,17,1,17,1,17,3,17,256,8,17,1,18,1,18,1,19,1,19,
		1,19,1,19,1,19,1,19,3,19,266,8,19,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,
		21,1,21,3,21,277,8,21,3,21,279,8,21,1,22,1,22,1,22,1,22,3,22,285,8,22,
		3,22,287,8,22,1,23,1,23,1,23,1,23,3,23,293,8,23,3,23,295,8,23,1,24,1,24,
		1,24,1,24,3,24,301,8,24,3,24,303,8,24,1,25,1,25,1,25,1,25,3,25,309,8,25,
		3,25,311,8,25,1,26,5,26,314,8,26,10,26,12,26,317,9,26,1,26,1,26,1,27,1,
		27,1,27,1,27,1,27,1,27,1,27,1,27,5,27,329,8,27,10,27,12,27,332,9,27,1,
		27,1,27,1,27,3,27,337,8,27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,5,28,
		347,8,28,10,28,12,28,350,9,28,3,28,352,8,28,1,28,1,28,1,29,1,29,3,29,358,
		8,29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,
		3,30,373,8,30,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,5,31,383,8,31,10,
		31,12,31,386,9,31,3,31,388,8,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,
		5,32,398,8,32,10,32,12,32,401,9,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,
		1,33,5,33,411,8,33,10,33,12,33,414,9,33,3,33,416,8,33,1,33,1,33,1,34,1,
		34,1,35,1,35,1,36,1,36,1,36,1,36,1,36,3,36,429,8,36,1,37,1,37,1,37,1,247,
		0,38,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,
		48,50,52,54,56,58,60,62,64,66,68,70,72,74,0,9,2,0,7,7,10,13,1,0,14,15,
		1,0,21,24,1,0,29,30,1,0,31,32,2,0,26,27,33,34,1,0,35,36,1,0,37,39,2,0,
		36,36,40,40,457,0,79,1,0,0,0,2,84,1,0,0,0,4,95,1,0,0,0,6,105,1,0,0,0,8,
		114,1,0,0,0,10,116,1,0,0,0,12,133,1,0,0,0,14,139,1,0,0,0,16,145,1,0,0,
		0,18,152,1,0,0,0,20,156,1,0,0,0,22,159,1,0,0,0,24,185,1,0,0,0,26,187,1,
		0,0,0,28,200,1,0,0,0,30,223,1,0,0,0,32,226,1,0,0,0,34,255,1,0,0,0,36,257,
		1,0,0,0,38,265,1,0,0,0,40,267,1,0,0,0,42,272,1,0,0,0,44,280,1,0,0,0,46,
		288,1,0,0,0,48,296,1,0,0,0,50,304,1,0,0,0,52,315,1,0,0,0,54,336,1,0,0,
		0,56,338,1,0,0,0,58,357,1,0,0,0,60,372,1,0,0,0,62,374,1,0,0,0,64,391,1,
		0,0,0,66,405,1,0,0,0,68,419,1,0,0,0,70,421,1,0,0,0,72,428,1,0,0,0,74,430,
		1,0,0,0,76,78,3,4,2,0,77,76,1,0,0,0,78,81,1,0,0,0,79,77,1,0,0,0,79,80,
		1,0,0,0,80,82,1,0,0,0,81,79,1,0,0,0,82,83,5,0,0,1,83,1,1,0,0,0,84,85,5,
		1,0,0,85,86,5,2,0,0,86,87,3,42,21,0,87,88,5,3,0,0,88,89,3,42,21,0,89,90,
		5,3,0,0,90,91,3,42,21,0,91,92,5,4,0,0,92,3,1,0,0,0,93,96,3,6,3,0,94,96,
		3,8,4,0,95,93,1,0,0,0,95,94,1,0,0,0,96,5,1,0,0,0,97,106,3,16,8,0,98,106,
		3,18,9,0,99,106,3,66,33,0,100,106,3,30,15,0,101,106,3,20,10,0,102,106,
		3,2,1,0,103,106,3,12,6,0,104,106,3,14,7,0,105,97,1,0,0,0,105,98,1,0,0,
		0,105,99,1,0,0,0,105,100,1,0,0,0,105,101,1,0,0,0,105,102,1,0,0,0,105,103,
		1,0,0,0,105,104,1,0,0,0,106,107,1,0,0,0,107,108,5,5,0,0,108,7,1,0,0,0,
		109,115,3,26,13,0,110,115,3,32,16,0,111,115,3,28,14,0,112,115,3,22,11,
		0,113,115,3,10,5,0,114,109,1,0,0,0,114,110,1,0,0,0,114,111,1,0,0,0,114,
		112,1,0,0,0,114,113,1,0,0,0,115,9,1,0,0,0,116,117,5,6,0,0,117,118,3,68,
		34,0,118,119,5,7,0,0,119,126,5,8,0,0,120,121,3,34,17,0,121,122,3,74,37,
		0,122,123,5,5,0,0,123,125,1,0,0,0,124,120,1,0,0,0,125,128,1,0,0,0,126,
		124,1,0,0,0,126,127,1,0,0,0,127,129,1,0,0,0,128,126,1,0,0,0,129,130,5,
		9,0,0,130,11,1,0,0,0,131,134,3,68,34,0,132,134,3,40,20,0,133,131,1,0,0,
		0,133,132,1,0,0,0,134,135,1,0,0,0,135,136,3,70,35,0,136,137,5,7,0,0,137,
		138,3,54,27,0,138,13,1,0,0,0,139,140,3,70,35,0,140,141,5,7,0,0,141,142,
		3,54,27,0,142,15,1,0,0,0,143,146,3,36,18,0,144,146,3,38,19,0,145,143,1,
		0,0,0,145,144,1,0,0,0,146,147,1,0,0,0,147,150,3,72,36,0,148,149,5,7,0,
		0,149,151,3,42,21,0,150,148,1,0,0,0,150,151,1,0,0,0,151,17,1,0,0,0,152,
		153,3,72,36,0,153,154,7,0,0,0,154,155,3,42,21,0,155,19,1,0,0,0,156,157,
		3,72,36,0,157,158,7,1,0,0,158,21,1,0,0,0,159,160,5,16,0,0,160,161,5,2,
		0,0,161,162,3,42,21,0,162,163,5,4,0,0,163,167,5,8,0,0,164,166,3,4,2,0,
		165,164,1,0,0,0,166,169,1,0,0,0,167,165,1,0,0,0,167,168,1,0,0,0,168,170,
		1,0,0,0,169,167,1,0,0,0,170,172,5,9,0,0,171,173,3,24,12,0,172,171,1,0,
		0,0,172,173,1,0,0,0,173,23,1,0,0,0,174,175,5,17,0,0,175,179,5,8,0,0,176,
		178,3,4,2,0,177,176,1,0,0,0,178,181,1,0,0,0,179,177,1,0,0,0,179,180,1,
		0,0,0,180,182,1,0,0,0,181,179,1,0,0,0,182,186,5,9,0,0,183,184,5,17,0,0,
		184,186,3,22,11,0,185,174,1,0,0,0,185,183,1,0,0,0,186,25,1,0,0,0,187,188,
		5,18,0,0,188,189,5,2,0,0,189,190,3,42,21,0,190,191,5,4,0,0,191,195,5,8,
		0,0,192,194,3,4,2,0,193,192,1,0,0,0,194,197,1,0,0,0,195,193,1,0,0,0,195,
		196,1,0,0,0,196,198,1,0,0,0,197,195,1,0,0,0,198,199,5,9,0,0,199,27,1,0,
		0,0,200,201,5,19,0,0,201,204,5,2,0,0,202,205,3,16,8,0,203,205,3,18,9,0,
		204,202,1,0,0,0,204,203,1,0,0,0,205,206,1,0,0,0,206,207,5,5,0,0,207,208,
		3,42,21,0,208,211,5,5,0,0,209,212,3,18,9,0,210,212,3,20,10,0,211,209,1,
		0,0,0,211,210,1,0,0,0,212,213,1,0,0,0,213,214,5,4,0,0,214,218,5,8,0,0,
		215,217,3,4,2,0,216,215,1,0,0,0,217,220,1,0,0,0,218,216,1,0,0,0,218,219,
		1,0,0,0,219,221,1,0,0,0,220,218,1,0,0,0,221,222,5,9,0,0,222,29,1,0,0,0,
		223,224,5,20,0,0,224,225,3,42,21,0,225,31,1,0,0,0,226,227,3,34,17,0,227,
		228,3,74,37,0,228,240,5,2,0,0,229,230,3,34,17,0,230,237,3,74,37,0,231,
		232,5,3,0,0,232,233,3,34,17,0,233,234,3,74,37,0,234,236,1,0,0,0,235,231,
		1,0,0,0,236,239,1,0,0,0,237,235,1,0,0,0,237,238,1,0,0,0,238,241,1,0,0,
		0,239,237,1,0,0,0,240,229,1,0,0,0,240,241,1,0,0,0,241,242,1,0,0,0,242,
		243,5,4,0,0,243,247,5,8,0,0,244,246,3,4,2,0,245,244,1,0,0,0,246,249,1,
		0,0,0,247,248,1,0,0,0,247,245,1,0,0,0,248,250,1,0,0,0,249,247,1,0,0,0,
		250,251,5,9,0,0,251,33,1,0,0,0,252,256,3,36,18,0,253,256,3,38,19,0,254,
		256,3,68,34,0,255,252,1,0,0,0,255,253,1,0,0,0,255,254,1,0,0,0,256,35,1,
		0,0,0,257,258,7,2,0,0,258,37,1,0,0,0,259,260,5,25,0,0,260,261,5,26,0,0,
		261,262,3,36,18,0,262,263,5,27,0,0,263,266,1,0,0,0,264,266,5,28,0,0,265,
		259,1,0,0,0,265,264,1,0,0,0,266,39,1,0,0,0,267,268,5,25,0,0,268,269,5,
		26,0,0,269,270,3,68,34,0,270,271,5,27,0,0,271,41,1,0,0,0,272,278,3,44,
		22,0,273,276,7,3,0,0,274,277,3,44,22,0,275,277,3,42,21,0,276,274,1,0,0,
		0,276,275,1,0,0,0,277,279,1,0,0,0,278,273,1,0,0,0,278,279,1,0,0,0,279,
		43,1,0,0,0,280,286,3,46,23,0,281,284,7,4,0,0,282,285,3,46,23,0,283,285,
		3,44,22,0,284,282,1,0,0,0,284,283,1,0,0,0,285,287,1,0,0,0,286,281,1,0,
		0,0,286,287,1,0,0,0,287,45,1,0,0,0,288,294,3,48,24,0,289,292,7,5,0,0,290,
		293,3,48,24,0,291,293,3,46,23,0,292,290,1,0,0,0,292,291,1,0,0,0,293,295,
		1,0,0,0,294,289,1,0,0,0,294,295,1,0,0,0,295,47,1,0,0,0,296,302,3,50,25,
		0,297,300,7,6,0,0,298,301,3,50,25,0,299,301,3,48,24,0,300,298,1,0,0,0,
		300,299,1,0,0,0,301,303,1,0,0,0,302,297,1,0,0,0,302,303,1,0,0,0,303,49,
		1,0,0,0,304,310,3,52,26,0,305,308,7,7,0,0,306,309,3,52,26,0,307,309,3,
		50,25,0,308,306,1,0,0,0,308,307,1,0,0,0,309,311,1,0,0,0,310,305,1,0,0,
		0,310,311,1,0,0,0,311,51,1,0,0,0,312,314,7,8,0,0,313,312,1,0,0,0,314,317,
		1,0,0,0,315,313,1,0,0,0,315,316,1,0,0,0,316,318,1,0,0,0,317,315,1,0,0,
		0,318,319,3,60,30,0,319,53,1,0,0,0,320,337,3,70,35,0,321,322,3,68,34,0,
		322,330,5,8,0,0,323,324,3,74,37,0,324,325,5,7,0,0,325,326,3,58,29,0,326,
		327,5,5,0,0,327,329,1,0,0,0,328,323,1,0,0,0,329,332,1,0,0,0,330,328,1,
		0,0,0,330,331,1,0,0,0,331,333,1,0,0,0,332,330,1,0,0,0,333,334,5,9,0,0,
		334,337,1,0,0,0,335,337,3,56,28,0,336,320,1,0,0,0,336,321,1,0,0,0,336,
		335,1,0,0,0,337,55,1,0,0,0,338,339,5,41,0,0,339,340,5,26,0,0,340,341,3,
		68,34,0,341,342,5,27,0,0,342,351,5,8,0,0,343,348,3,54,27,0,344,345,5,3,
		0,0,345,347,3,54,27,0,346,344,1,0,0,0,347,350,1,0,0,0,348,346,1,0,0,0,
		348,349,1,0,0,0,349,352,1,0,0,0,350,348,1,0,0,0,351,343,1,0,0,0,351,352,
		1,0,0,0,352,353,1,0,0,0,353,354,5,9,0,0,354,57,1,0,0,0,355,358,3,42,21,
		0,356,358,3,54,27,0,357,355,1,0,0,0,357,356,1,0,0,0,358,59,1,0,0,0,359,
		373,5,49,0,0,360,373,5,42,0,0,361,373,5,43,0,0,362,373,5,44,0,0,363,364,
		5,2,0,0,364,365,3,42,21,0,365,366,5,4,0,0,366,373,1,0,0,0,367,373,3,62,
		31,0,368,373,3,66,33,0,369,373,5,50,0,0,370,373,3,64,32,0,371,373,3,72,
		36,0,372,359,1,0,0,0,372,360,1,0,0,0,372,361,1,0,0,0,372,362,1,0,0,0,372,
		363,1,0,0,0,372,367,1,0,0,0,372,368,1,0,0,0,372,369,1,0,0,0,372,370,1,
		0,0,0,372,371,1,0,0,0,373,61,1,0,0,0,374,375,5,41,0,0,375,376,5,26,0,0,
		376,377,3,36,18,0,377,378,5,27,0,0,378,387,5,8,0,0,379,384,3,42,21,0,380,
		381,5,3,0,0,381,383,3,42,21,0,382,380,1,0,0,0,383,386,1,0,0,0,384,382,
		1,0,0,0,384,385,1,0,0,0,385,388,1,0,0,0,386,384,1,0,0,0,387,379,1,0,0,
		0,387,388,1,0,0,0,388,389,1,0,0,0,389,390,5,9,0,0,390,63,1,0,0,0,391,392,
		5,45,0,0,392,393,5,2,0,0,393,394,3,42,21,0,394,395,5,3,0,0,395,399,5,8,
		0,0,396,398,3,4,2,0,397,396,1,0,0,0,398,401,1,0,0,0,399,397,1,0,0,0,399,
		400,1,0,0,0,400,402,1,0,0,0,401,399,1,0,0,0,402,403,5,9,0,0,403,404,5,
		4,0,0,404,65,1,0,0,0,405,406,3,74,37,0,406,415,5,2,0,0,407,412,3,58,29,
		0,408,409,5,3,0,0,409,411,3,58,29,0,410,408,1,0,0,0,411,414,1,0,0,0,412,
		410,1,0,0,0,412,413,1,0,0,0,413,416,1,0,0,0,414,412,1,0,0,0,415,407,1,
		0,0,0,415,416,1,0,0,0,416,417,1,0,0,0,417,418,5,4,0,0,418,67,1,0,0,0,419,
		420,5,48,0,0,420,69,1,0,0,0,421,422,5,48,0,0,422,71,1,0,0,0,423,429,5,
		48,0,0,424,425,3,70,35,0,425,426,5,46,0,0,426,427,5,48,0,0,427,429,1,0,
		0,0,428,423,1,0,0,0,428,424,1,0,0,0,429,73,1,0,0,0,430,431,5,48,0,0,431,
		75,1,0,0,0,44,79,95,105,114,126,133,145,150,167,172,179,185,195,204,211,
		218,237,240,247,255,265,276,278,284,286,292,294,300,302,308,310,315,330,
		336,348,351,357,372,384,387,399,412,415,428
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}

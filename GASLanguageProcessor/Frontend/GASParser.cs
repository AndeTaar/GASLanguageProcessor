//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/thomas/Documents/GASLanguageProcessor/GASLanguageProcessor/Frontend/GAS.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class GASParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, COMMENT=47, IDENTIFIER=48, NUM=49, ALLSTRINGS=50, WS=51;
	public const int
		RULE_program = 0, RULE_canvas = 1, RULE_statement = 2, RULE_simpleStatement = 3, 
		RULE_complexStatement = 4, RULE_recDefinition = 5, RULE_declaration = 6, 
		RULE_assignment = 7, RULE_increment = 8, RULE_ifStatement = 9, RULE_elseStatement = 10, 
		RULE_whileStatement = 11, RULE_forStatement = 12, RULE_returnStatement = 13, 
		RULE_functionDeclaration = 14, RULE_allTypes = 15, RULE_type = 16, RULE_collectionType = 17, 
		RULE_expression = 18, RULE_equalityExpression = 19, RULE_relationExpression = 20, 
		RULE_binaryExpression = 21, RULE_multExpression = 22, RULE_unaryExpression = 23, 
		RULE_term = 24, RULE_recordTerm = 25, RULE_listTerm = 26, RULE_groupTerm = 27, 
		RULE_functionCall = 28, RULE_recordTypeIdentifier = 29, RULE_identifier = 30, 
		RULE_attributeIdentifier = 31;
	public static readonly string[] ruleNames = {
		"program", "canvas", "statement", "simpleStatement", "complexStatement", 
		"recDefinition", "declaration", "assignment", "increment", "ifStatement", 
		"elseStatement", "whileStatement", "forStatement", "returnStatement", 
		"functionDeclaration", "allTypes", "type", "collectionType", "expression", 
		"equalityExpression", "relationExpression", "binaryExpression", "multExpression", 
		"unaryExpression", "term", "recordTerm", "listTerm", "groupTerm", "functionCall", 
		"recordTypeIdentifier", "identifier", "attributeIdentifier"
	};

	private static readonly string[] _LiteralNames = {
		null, "'canvas'", "'('", "','", "')'", "';'", "'TypeDef'", "'='", "'{'", 
		"'}'", "'+='", "'-='", "'*='", "'/='", "'++'", "'--'", "'if'", "'else'", 
		"'while'", "'for'", "'return'", "'num'", "'bool'", "'string'", "'void'", 
		"'list'", "'<'", "'>'", "'group'", "'||'", "'&&'", "'=='", "'!='", "'<='", 
		"'>='", "'+'", "'-'", "'*'", "'/'", "'%'", "'!'", "'true'", "'false'", 
		"'null'", "'List'", "'Group'", "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, "COMMENT", 
		"IDENTIFIER", "NUM", "ALLSTRINGS", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "GAS.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static GASParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public GASParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public GASParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(GASParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 67;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 281475312058434L) != 0)) {
				{
				{
				State = 64;
				statement();
				}
				}
				State = 69;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 70;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CanvasContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public CanvasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_canvas; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCanvas(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CanvasContext canvas() {
		CanvasContext _localctx = new CanvasContext(Context, State);
		EnterRule(_localctx, 2, RULE_canvas);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 72;
			Match(T__0);
			State = 73;
			Match(T__1);
			State = 74;
			expression();
			State = 75;
			Match(T__2);
			State = 76;
			expression();
			State = 77;
			Match(T__2);
			State = 78;
			expression();
			State = 79;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleStatementContext simpleStatement() {
			return GetRuleContext<SimpleStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComplexStatementContext complexStatement() {
			return GetRuleContext<ComplexStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			State = 83;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 81;
				simpleStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 82;
				complexStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IncrementContext increment() {
			return GetRuleContext<IncrementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CanvasContext canvas() {
			return GetRuleContext<CanvasContext>(0);
		}
		public SimpleStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleStatementContext simpleStatement() {
		SimpleStatementContext _localctx = new SimpleStatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_simpleStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 91;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				{
				State = 85;
				declaration();
				}
				break;
			case 2:
				{
				State = 86;
				assignment();
				}
				break;
			case 3:
				{
				State = 87;
				functionCall();
				}
				break;
			case 4:
				{
				State = 88;
				returnStatement();
				}
				break;
			case 5:
				{
				State = 89;
				increment();
				}
				break;
			case 6:
				{
				State = 90;
				canvas();
				}
				break;
			}
			State = 93;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComplexStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RecDefinitionContext recDefinition() {
			return GetRuleContext<RecDefinitionContext>(0);
		}
		public ComplexStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complexStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComplexStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComplexStatementContext complexStatement() {
		ComplexStatementContext _localctx = new ComplexStatementContext(Context, State);
		EnterRule(_localctx, 8, RULE_complexStatement);
		try {
			State = 100;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__17:
				EnterOuterAlt(_localctx, 1);
				{
				State = 95;
				whileStatement();
				}
				break;
			case T__20:
			case T__21:
			case T__22:
			case T__23:
			case T__24:
			case T__27:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 96;
				functionDeclaration();
				}
				break;
			case T__18:
				EnterOuterAlt(_localctx, 3);
				{
				State = 97;
				forStatement();
				}
				break;
			case T__15:
				EnterOuterAlt(_localctx, 4);
				{
				State = 98;
				ifStatement();
				}
				break;
			case T__5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 99;
				recDefinition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RecDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RecordTypeIdentifierContext recordTypeIdentifier() {
			return GetRuleContext<RecordTypeIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AllTypesContext[] allTypes() {
			return GetRuleContexts<AllTypesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AllTypesContext allTypes(int i) {
			return GetRuleContext<AllTypesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public RecDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RecDefinitionContext recDefinition() {
		RecDefinitionContext _localctx = new RecDefinitionContext(Context, State);
		EnterRule(_localctx, 10, RULE_recDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 102;
			Match(T__5);
			State = 103;
			recordTypeIdentifier();
			State = 104;
			Match(T__6);
			State = 105;
			Match(T__7);
			State = 112;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 281475310157824L) != 0)) {
				{
				{
				State = 106;
				allTypes();
				State = 107;
				identifier();
				State = 108;
				Match(T__4);
				}
				}
				State = 114;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 115;
			Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CollectionTypeContext collectionType() {
			return GetRuleContext<CollectionTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeIdentifierContext attributeIdentifier() {
			return GetRuleContext<AttributeIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 12, RULE_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 119;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__20:
			case T__21:
			case T__22:
			case T__23:
			case IDENTIFIER:
				{
				State = 117;
				type();
				}
				break;
			case T__24:
			case T__27:
				{
				State = 118;
				collectionType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 123;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				State = 121;
				attributeIdentifier();
				}
				break;
			case 2:
				{
				State = 122;
				identifier();
				}
				break;
			}
			State = 127;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__6) {
				{
				State = 125;
				Match(T__6);
				State = 126;
				expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeIdentifierContext attributeIdentifier() {
			return GetRuleContext<AttributeIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 14, RULE_assignment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 131;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				{
				State = 129;
				attributeIdentifier();
				}
				break;
			case 2:
				{
				State = 130;
				identifier();
				}
				break;
			}
			State = 133;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 15488L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 134;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncrementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AttributeIdentifierContext attributeIdentifier() {
			return GetRuleContext<AttributeIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public IncrementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_increment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIncrement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IncrementContext increment() {
		IncrementContext _localctx = new IncrementContext(Context, State);
		EnterRule(_localctx, 16, RULE_increment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 138;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				{
				State = 136;
				attributeIdentifier();
				}
				break;
			case 2:
				{
				State = 137;
				identifier();
				}
				break;
			}
			State = 140;
			_la = TokenStream.LA(1);
			if ( !(_la==T__13 || _la==T__14) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseStatementContext elseStatement() {
			return GetRuleContext<ElseStatementContext>(0);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 18, RULE_ifStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 142;
			Match(T__15);
			State = 143;
			Match(T__1);
			State = 144;
			expression();
			State = 145;
			Match(T__3);
			State = 146;
			Match(T__7);
			State = 150;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 281475312058434L) != 0)) {
				{
				{
				State = 147;
				statement();
				}
				}
				State = 152;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 153;
			Match(T__8);
			State = 155;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__16) {
				{
				State = 154;
				elseStatement();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		public ElseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseStatementContext elseStatement() {
		ElseStatementContext _localctx = new ElseStatementContext(Context, State);
		EnterRule(_localctx, 20, RULE_elseStatement);
		int _la;
		try {
			State = 168;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 157;
				Match(T__16);
				{
				State = 158;
				Match(T__7);
				State = 162;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 281475312058434L) != 0)) {
					{
					{
					State = 159;
					statement();
					}
					}
					State = 164;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 165;
				Match(T__8);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 166;
				Match(T__16);
				State = 167;
				ifStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 22, RULE_whileStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 170;
			Match(T__17);
			State = 171;
			Match(T__1);
			State = 172;
			expression();
			State = 173;
			Match(T__3);
			State = 174;
			Match(T__7);
			State = 178;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 281475312058434L) != 0)) {
				{
				{
				State = 175;
				statement();
				}
				}
				State = 180;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 181;
			Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext[] assignment() {
			return GetRuleContexts<AssignmentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment(int i) {
			return GetRuleContext<AssignmentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IncrementContext increment() {
			return GetRuleContext<IncrementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 24, RULE_forStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 183;
			Match(T__18);
			State = 184;
			Match(T__1);
			State = 187;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				{
				State = 185;
				declaration();
				}
				break;
			case 2:
				{
				State = 186;
				assignment();
				}
				break;
			}
			State = 189;
			Match(T__4);
			State = 190;
			expression();
			State = 191;
			Match(T__4);
			State = 194;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				{
				State = 192;
				assignment();
				}
				break;
			case 2:
				{
				State = 193;
				increment();
				}
				break;
			}
			State = 196;
			Match(T__3);
			State = 197;
			Match(T__7);
			State = 201;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 281475312058434L) != 0)) {
				{
				{
				State = 198;
				statement();
				}
				}
				State = 203;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 204;
			Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 26, RULE_returnStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 206;
			Match(T__19);
			State = 207;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AllTypesContext[] allTypes() {
			return GetRuleContexts<AllTypesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AllTypesContext allTypes(int i) {
			return GetRuleContext<AllTypesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public FunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclarationContext functionDeclaration() {
		FunctionDeclarationContext _localctx = new FunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 28, RULE_functionDeclaration);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 209;
			allTypes();
			State = 210;
			identifier();
			State = 211;
			Match(T__1);
			State = 223;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 281475310157824L) != 0)) {
				{
				State = 212;
				allTypes();
				State = 213;
				identifier();
				State = 220;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__2) {
					{
					{
					State = 214;
					Match(T__2);
					State = 215;
					allTypes();
					State = 216;
					identifier();
					}
					}
					State = 222;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 225;
			Match(T__3);
			State = 226;
			Match(T__7);
			State = 230;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 227;
					statement();
					}
					} 
				}
				State = 232;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			}
			State = 233;
			Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AllTypesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CollectionTypeContext collectionType() {
			return GetRuleContext<CollectionTypeContext>(0);
		}
		public AllTypesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_allTypes; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAllTypes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AllTypesContext allTypes() {
		AllTypesContext _localctx = new AllTypesContext(Context, State);
		EnterRule(_localctx, 30, RULE_allTypes);
		try {
			State = 237;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__20:
			case T__21:
			case T__22:
			case T__23:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 235;
				type();
				}
				break;
			case T__24:
			case T__27:
				EnterOuterAlt(_localctx, 2);
				{
				State = 236;
				collectionType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 32, RULE_type);
		try {
			State = 244;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__20:
				EnterOuterAlt(_localctx, 1);
				{
				State = 239;
				Match(T__20);
				}
				break;
			case T__21:
				EnterOuterAlt(_localctx, 2);
				{
				State = 240;
				Match(T__21);
				}
				break;
			case T__22:
				EnterOuterAlt(_localctx, 3);
				{
				State = 241;
				Match(T__22);
				}
				break;
			case T__23:
				EnterOuterAlt(_localctx, 4);
				{
				State = 242;
				Match(T__23);
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 5);
				{
				State = 243;
				identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollectionTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public CollectionTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collectionType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollectionType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CollectionTypeContext collectionType() {
		CollectionTypeContext _localctx = new CollectionTypeContext(Context, State);
		EnterRule(_localctx, 34, RULE_collectionType);
		try {
			State = 252;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__24:
				EnterOuterAlt(_localctx, 1);
				{
				State = 246;
				Match(T__24);
				State = 247;
				Match(T__25);
				{
				State = 248;
				type();
				}
				State = 249;
				Match(T__26);
				}
				break;
			case T__27:
				EnterOuterAlt(_localctx, 2);
				{
				State = 251;
				Match(T__27);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EqualityExpressionContext[] equalityExpression() {
			return GetRuleContexts<EqualityExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EqualityExpressionContext equalityExpression(int i) {
			return GetRuleContext<EqualityExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 36, RULE_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 254;
			equalityExpression();
			State = 260;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__28 || _la==T__29) {
				{
				State = 255;
				_la = TokenStream.LA(1);
				if ( !(_la==T__28 || _la==T__29) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 258;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
				case 1:
					{
					State = 256;
					equalityExpression();
					}
					break;
				case 2:
					{
					State = 257;
					expression();
					}
					break;
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EqualityExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RelationExpressionContext[] relationExpression() {
			return GetRuleContexts<RelationExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationExpressionContext relationExpression(int i) {
			return GetRuleContext<RelationExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EqualityExpressionContext equalityExpression() {
			return GetRuleContext<EqualityExpressionContext>(0);
		}
		public EqualityExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equalityExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EqualityExpressionContext equalityExpression() {
		EqualityExpressionContext _localctx = new EqualityExpressionContext(Context, State);
		EnterRule(_localctx, 38, RULE_equalityExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 262;
			relationExpression();
			State = 268;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__30 || _la==T__31) {
				{
				State = 263;
				_la = TokenStream.LA(1);
				if ( !(_la==T__30 || _la==T__31) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 266;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
				case 1:
					{
					State = 264;
					relationExpression();
					}
					break;
				case 2:
					{
					State = 265;
					equalityExpression();
					}
					break;
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BinaryExpressionContext[] binaryExpression() {
			return GetRuleContexts<BinaryExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BinaryExpressionContext binaryExpression(int i) {
			return GetRuleContext<BinaryExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationExpressionContext relationExpression() {
			return GetRuleContext<RelationExpressionContext>(0);
		}
		public RelationExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationExpressionContext relationExpression() {
		RelationExpressionContext _localctx = new RelationExpressionContext(Context, State);
		EnterRule(_localctx, 40, RULE_relationExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 270;
			binaryExpression();
			State = 276;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 25971130368L) != 0)) {
				{
				State = 271;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 25971130368L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 274;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
				case 1:
					{
					State = 272;
					binaryExpression();
					}
					break;
				case 2:
					{
					State = 273;
					relationExpression();
					}
					break;
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinaryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MultExpressionContext[] multExpression() {
			return GetRuleContexts<MultExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultExpressionContext multExpression(int i) {
			return GetRuleContext<MultExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BinaryExpressionContext binaryExpression() {
			return GetRuleContext<BinaryExpressionContext>(0);
		}
		public BinaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binaryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BinaryExpressionContext binaryExpression() {
		BinaryExpressionContext _localctx = new BinaryExpressionContext(Context, State);
		EnterRule(_localctx, 42, RULE_binaryExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 278;
			multExpression();
			State = 284;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__34 || _la==T__35) {
				{
				State = 279;
				_la = TokenStream.LA(1);
				if ( !(_la==T__34 || _la==T__35) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 282;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
				case 1:
					{
					State = 280;
					multExpression();
					}
					break;
				case 2:
					{
					State = 281;
					binaryExpression();
					}
					break;
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext[] unaryExpression() {
			return GetRuleContexts<UnaryExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext unaryExpression(int i) {
			return GetRuleContext<UnaryExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultExpressionContext multExpression() {
			return GetRuleContext<MultExpressionContext>(0);
		}
		public MultExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultExpressionContext multExpression() {
		MultExpressionContext _localctx = new MultExpressionContext(Context, State);
		EnterRule(_localctx, 44, RULE_multExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 286;
			unaryExpression();
			State = 292;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 962072674304L) != 0)) {
				{
				State = 287;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 962072674304L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 290;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
				case 1:
					{
					State = 288;
					unaryExpression();
					}
					break;
				case 2:
					{
					State = 289;
					multExpression();
					}
					break;
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public UnaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExpressionContext unaryExpression() {
		UnaryExpressionContext _localctx = new UnaryExpressionContext(Context, State);
		EnterRule(_localctx, 46, RULE_unaryExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 297;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__35 || _la==T__39) {
				{
				{
				State = 294;
				_la = TokenStream.LA(1);
				if ( !(_la==T__35 || _la==T__39) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 299;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 300;
			term();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM() { return GetToken(GASParser.NUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListTermContext listTerm() {
			return GetRuleContext<ListTermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALLSTRINGS() { return GetToken(GASParser.ALLSTRINGS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GroupTermContext groupTerm() {
			return GetRuleContext<GroupTermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeIdentifierContext attributeIdentifier() {
			return GetRuleContext<AttributeIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RecordTermContext recordTerm() {
			return GetRuleContext<RecordTermContext>(0);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 48, RULE_term);
		try {
			State = 317;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 302;
				Match(NUM);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 303;
				Match(T__40);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 304;
				Match(T__41);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 305;
				Match(T__42);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 306;
				Match(T__1);
				State = 307;
				expression();
				State = 308;
				Match(T__3);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 310;
				listTerm();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 311;
				functionCall();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 312;
				Match(ALLSTRINGS);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 313;
				groupTerm();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 314;
				attributeIdentifier();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 315;
				identifier();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 316;
				recordTerm();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RecordTermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RecordTypeIdentifierContext recordTypeIdentifier() {
			return GetRuleContext<RecordTypeIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public RecordTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recordTerm; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecordTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RecordTermContext recordTerm() {
		RecordTermContext _localctx = new RecordTermContext(Context, State);
		EnterRule(_localctx, 50, RULE_recordTerm);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 319;
			recordTypeIdentifier();
			State = 320;
			Match(T__7);
			State = 328;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER) {
				{
				{
				State = 321;
				identifier();
				State = 322;
				Match(T__6);
				State = 323;
				expression();
				State = 324;
				Match(T__4);
				}
				}
				State = 330;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 331;
			Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListTermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ListTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listTerm; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListTermContext listTerm() {
		ListTermContext _localctx = new ListTermContext(Context, State);
		EnterRule(_localctx, 52, RULE_listTerm);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 333;
			Match(T__43);
			State = 334;
			Match(T__25);
			State = 335;
			type();
			State = 336;
			Match(T__26);
			State = 337;
			Match(T__7);
			State = 346;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2039662789001220L) != 0)) {
				{
				State = 338;
				expression();
				State = 343;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__2) {
					{
					{
					State = 339;
					Match(T__2);
					State = 340;
					expression();
					}
					}
					State = 345;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 348;
			Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupTermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public GroupTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupTerm; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupTermContext groupTerm() {
		GroupTermContext _localctx = new GroupTermContext(Context, State);
		EnterRule(_localctx, 54, RULE_groupTerm);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 350;
			Match(T__44);
			State = 351;
			Match(T__1);
			State = 352;
			expression();
			State = 353;
			Match(T__2);
			State = 354;
			Match(T__7);
			State = 358;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 281475312058434L) != 0)) {
				{
				{
				State = 355;
				statement();
				}
				}
				State = 360;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 361;
			Match(T__8);
			State = 362;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 56, RULE_functionCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 364;
			identifier();
			State = 365;
			Match(T__1);
			State = 374;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2039662789001220L) != 0)) {
				{
				State = 366;
				expression();
				State = 371;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__2) {
					{
					{
					State = 367;
					Match(T__2);
					State = 368;
					expression();
					}
					}
					State = 373;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 376;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RecordTypeIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GASParser.IDENTIFIER, 0); }
		public RecordTypeIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recordTypeIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecordTypeIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RecordTypeIdentifierContext recordTypeIdentifier() {
		RecordTypeIdentifierContext _localctx = new RecordTypeIdentifierContext(Context, State);
		EnterRule(_localctx, 58, RULE_recordTypeIdentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 378;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GASParser.IDENTIFIER, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 60, RULE_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 380;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public AttributeIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributeIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeIdentifierContext attributeIdentifier() {
		AttributeIdentifierContext _localctx = new AttributeIdentifierContext(Context, State);
		EnterRule(_localctx, 62, RULE_attributeIdentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 382;
			identifier();
			State = 383;
			Match(T__45);
			State = 384;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,51,387,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,1,0,5,0,66,8,0,10,0,12,0,69,9,0,1,0,1,0,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,3,2,84,8,2,1,3,1,3,1,3,1,3,
		1,3,1,3,3,3,92,8,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,3,4,101,8,4,1,5,1,5,1,5,
		1,5,1,5,1,5,1,5,1,5,5,5,111,8,5,10,5,12,5,114,9,5,1,5,1,5,1,6,1,6,3,6,
		120,8,6,1,6,1,6,3,6,124,8,6,1,6,1,6,3,6,128,8,6,1,7,1,7,3,7,132,8,7,1,
		7,1,7,1,7,1,8,1,8,3,8,139,8,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,5,9,149,
		8,9,10,9,12,9,152,9,9,1,9,1,9,3,9,156,8,9,1,10,1,10,1,10,5,10,161,8,10,
		10,10,12,10,164,9,10,1,10,1,10,1,10,3,10,169,8,10,1,11,1,11,1,11,1,11,
		1,11,1,11,5,11,177,8,11,10,11,12,11,180,9,11,1,11,1,11,1,12,1,12,1,12,
		1,12,3,12,188,8,12,1,12,1,12,1,12,1,12,1,12,3,12,195,8,12,1,12,1,12,1,
		12,5,12,200,8,12,10,12,12,12,203,9,12,1,12,1,12,1,13,1,13,1,13,1,14,1,
		14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,5,14,219,8,14,10,14,12,14,222,9,
		14,3,14,224,8,14,1,14,1,14,1,14,5,14,229,8,14,10,14,12,14,232,9,14,1,14,
		1,14,1,15,1,15,3,15,238,8,15,1,16,1,16,1,16,1,16,1,16,3,16,245,8,16,1,
		17,1,17,1,17,1,17,1,17,1,17,3,17,253,8,17,1,18,1,18,1,18,1,18,3,18,259,
		8,18,3,18,261,8,18,1,19,1,19,1,19,1,19,3,19,267,8,19,3,19,269,8,19,1,20,
		1,20,1,20,1,20,3,20,275,8,20,3,20,277,8,20,1,21,1,21,1,21,1,21,3,21,283,
		8,21,3,21,285,8,21,1,22,1,22,1,22,1,22,3,22,291,8,22,3,22,293,8,22,1,23,
		5,23,296,8,23,10,23,12,23,299,9,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,
		1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,3,24,318,8,24,1,25,1,
		25,1,25,1,25,1,25,1,25,1,25,5,25,327,8,25,10,25,12,25,330,9,25,1,25,1,
		25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,5,26,342,8,26,10,26,12,26,345,
		9,26,3,26,347,8,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,5,27,357,8,
		27,10,27,12,27,360,9,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,5,28,370,
		8,28,10,28,12,28,373,9,28,3,28,375,8,28,1,28,1,28,1,29,1,29,1,30,1,30,
		1,31,1,31,1,31,1,31,1,31,1,230,0,32,0,2,4,6,8,10,12,14,16,18,20,22,24,
		26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,0,8,2,0,7,7,10,
		13,1,0,14,15,1,0,29,30,1,0,31,32,2,0,26,27,33,34,1,0,35,36,1,0,37,39,2,
		0,36,36,40,40,416,0,67,1,0,0,0,2,72,1,0,0,0,4,83,1,0,0,0,6,91,1,0,0,0,
		8,100,1,0,0,0,10,102,1,0,0,0,12,119,1,0,0,0,14,131,1,0,0,0,16,138,1,0,
		0,0,18,142,1,0,0,0,20,168,1,0,0,0,22,170,1,0,0,0,24,183,1,0,0,0,26,206,
		1,0,0,0,28,209,1,0,0,0,30,237,1,0,0,0,32,244,1,0,0,0,34,252,1,0,0,0,36,
		254,1,0,0,0,38,262,1,0,0,0,40,270,1,0,0,0,42,278,1,0,0,0,44,286,1,0,0,
		0,46,297,1,0,0,0,48,317,1,0,0,0,50,319,1,0,0,0,52,333,1,0,0,0,54,350,1,
		0,0,0,56,364,1,0,0,0,58,378,1,0,0,0,60,380,1,0,0,0,62,382,1,0,0,0,64,66,
		3,4,2,0,65,64,1,0,0,0,66,69,1,0,0,0,67,65,1,0,0,0,67,68,1,0,0,0,68,70,
		1,0,0,0,69,67,1,0,0,0,70,71,5,0,0,1,71,1,1,0,0,0,72,73,5,1,0,0,73,74,5,
		2,0,0,74,75,3,36,18,0,75,76,5,3,0,0,76,77,3,36,18,0,77,78,5,3,0,0,78,79,
		3,36,18,0,79,80,5,4,0,0,80,3,1,0,0,0,81,84,3,6,3,0,82,84,3,8,4,0,83,81,
		1,0,0,0,83,82,1,0,0,0,84,5,1,0,0,0,85,92,3,12,6,0,86,92,3,14,7,0,87,92,
		3,56,28,0,88,92,3,26,13,0,89,92,3,16,8,0,90,92,3,2,1,0,91,85,1,0,0,0,91,
		86,1,0,0,0,91,87,1,0,0,0,91,88,1,0,0,0,91,89,1,0,0,0,91,90,1,0,0,0,92,
		93,1,0,0,0,93,94,5,5,0,0,94,7,1,0,0,0,95,101,3,22,11,0,96,101,3,28,14,
		0,97,101,3,24,12,0,98,101,3,18,9,0,99,101,3,10,5,0,100,95,1,0,0,0,100,
		96,1,0,0,0,100,97,1,0,0,0,100,98,1,0,0,0,100,99,1,0,0,0,101,9,1,0,0,0,
		102,103,5,6,0,0,103,104,3,58,29,0,104,105,5,7,0,0,105,112,5,8,0,0,106,
		107,3,30,15,0,107,108,3,60,30,0,108,109,5,5,0,0,109,111,1,0,0,0,110,106,
		1,0,0,0,111,114,1,0,0,0,112,110,1,0,0,0,112,113,1,0,0,0,113,115,1,0,0,
		0,114,112,1,0,0,0,115,116,5,9,0,0,116,11,1,0,0,0,117,120,3,32,16,0,118,
		120,3,34,17,0,119,117,1,0,0,0,119,118,1,0,0,0,120,123,1,0,0,0,121,124,
		3,62,31,0,122,124,3,60,30,0,123,121,1,0,0,0,123,122,1,0,0,0,124,127,1,
		0,0,0,125,126,5,7,0,0,126,128,3,36,18,0,127,125,1,0,0,0,127,128,1,0,0,
		0,128,13,1,0,0,0,129,132,3,62,31,0,130,132,3,60,30,0,131,129,1,0,0,0,131,
		130,1,0,0,0,132,133,1,0,0,0,133,134,7,0,0,0,134,135,3,36,18,0,135,15,1,
		0,0,0,136,139,3,62,31,0,137,139,3,60,30,0,138,136,1,0,0,0,138,137,1,0,
		0,0,139,140,1,0,0,0,140,141,7,1,0,0,141,17,1,0,0,0,142,143,5,16,0,0,143,
		144,5,2,0,0,144,145,3,36,18,0,145,146,5,4,0,0,146,150,5,8,0,0,147,149,
		3,4,2,0,148,147,1,0,0,0,149,152,1,0,0,0,150,148,1,0,0,0,150,151,1,0,0,
		0,151,153,1,0,0,0,152,150,1,0,0,0,153,155,5,9,0,0,154,156,3,20,10,0,155,
		154,1,0,0,0,155,156,1,0,0,0,156,19,1,0,0,0,157,158,5,17,0,0,158,162,5,
		8,0,0,159,161,3,4,2,0,160,159,1,0,0,0,161,164,1,0,0,0,162,160,1,0,0,0,
		162,163,1,0,0,0,163,165,1,0,0,0,164,162,1,0,0,0,165,169,5,9,0,0,166,167,
		5,17,0,0,167,169,3,18,9,0,168,157,1,0,0,0,168,166,1,0,0,0,169,21,1,0,0,
		0,170,171,5,18,0,0,171,172,5,2,0,0,172,173,3,36,18,0,173,174,5,4,0,0,174,
		178,5,8,0,0,175,177,3,4,2,0,176,175,1,0,0,0,177,180,1,0,0,0,178,176,1,
		0,0,0,178,179,1,0,0,0,179,181,1,0,0,0,180,178,1,0,0,0,181,182,5,9,0,0,
		182,23,1,0,0,0,183,184,5,19,0,0,184,187,5,2,0,0,185,188,3,12,6,0,186,188,
		3,14,7,0,187,185,1,0,0,0,187,186,1,0,0,0,188,189,1,0,0,0,189,190,5,5,0,
		0,190,191,3,36,18,0,191,194,5,5,0,0,192,195,3,14,7,0,193,195,3,16,8,0,
		194,192,1,0,0,0,194,193,1,0,0,0,195,196,1,0,0,0,196,197,5,4,0,0,197,201,
		5,8,0,0,198,200,3,4,2,0,199,198,1,0,0,0,200,203,1,0,0,0,201,199,1,0,0,
		0,201,202,1,0,0,0,202,204,1,0,0,0,203,201,1,0,0,0,204,205,5,9,0,0,205,
		25,1,0,0,0,206,207,5,20,0,0,207,208,3,36,18,0,208,27,1,0,0,0,209,210,3,
		30,15,0,210,211,3,60,30,0,211,223,5,2,0,0,212,213,3,30,15,0,213,220,3,
		60,30,0,214,215,5,3,0,0,215,216,3,30,15,0,216,217,3,60,30,0,217,219,1,
		0,0,0,218,214,1,0,0,0,219,222,1,0,0,0,220,218,1,0,0,0,220,221,1,0,0,0,
		221,224,1,0,0,0,222,220,1,0,0,0,223,212,1,0,0,0,223,224,1,0,0,0,224,225,
		1,0,0,0,225,226,5,4,0,0,226,230,5,8,0,0,227,229,3,4,2,0,228,227,1,0,0,
		0,229,232,1,0,0,0,230,231,1,0,0,0,230,228,1,0,0,0,231,233,1,0,0,0,232,
		230,1,0,0,0,233,234,5,9,0,0,234,29,1,0,0,0,235,238,3,32,16,0,236,238,3,
		34,17,0,237,235,1,0,0,0,237,236,1,0,0,0,238,31,1,0,0,0,239,245,5,21,0,
		0,240,245,5,22,0,0,241,245,5,23,0,0,242,245,5,24,0,0,243,245,3,60,30,0,
		244,239,1,0,0,0,244,240,1,0,0,0,244,241,1,0,0,0,244,242,1,0,0,0,244,243,
		1,0,0,0,245,33,1,0,0,0,246,247,5,25,0,0,247,248,5,26,0,0,248,249,3,32,
		16,0,249,250,5,27,0,0,250,253,1,0,0,0,251,253,5,28,0,0,252,246,1,0,0,0,
		252,251,1,0,0,0,253,35,1,0,0,0,254,260,3,38,19,0,255,258,7,2,0,0,256,259,
		3,38,19,0,257,259,3,36,18,0,258,256,1,0,0,0,258,257,1,0,0,0,259,261,1,
		0,0,0,260,255,1,0,0,0,260,261,1,0,0,0,261,37,1,0,0,0,262,268,3,40,20,0,
		263,266,7,3,0,0,264,267,3,40,20,0,265,267,3,38,19,0,266,264,1,0,0,0,266,
		265,1,0,0,0,267,269,1,0,0,0,268,263,1,0,0,0,268,269,1,0,0,0,269,39,1,0,
		0,0,270,276,3,42,21,0,271,274,7,4,0,0,272,275,3,42,21,0,273,275,3,40,20,
		0,274,272,1,0,0,0,274,273,1,0,0,0,275,277,1,0,0,0,276,271,1,0,0,0,276,
		277,1,0,0,0,277,41,1,0,0,0,278,284,3,44,22,0,279,282,7,5,0,0,280,283,3,
		44,22,0,281,283,3,42,21,0,282,280,1,0,0,0,282,281,1,0,0,0,283,285,1,0,
		0,0,284,279,1,0,0,0,284,285,1,0,0,0,285,43,1,0,0,0,286,292,3,46,23,0,287,
		290,7,6,0,0,288,291,3,46,23,0,289,291,3,44,22,0,290,288,1,0,0,0,290,289,
		1,0,0,0,291,293,1,0,0,0,292,287,1,0,0,0,292,293,1,0,0,0,293,45,1,0,0,0,
		294,296,7,7,0,0,295,294,1,0,0,0,296,299,1,0,0,0,297,295,1,0,0,0,297,298,
		1,0,0,0,298,300,1,0,0,0,299,297,1,0,0,0,300,301,3,48,24,0,301,47,1,0,0,
		0,302,318,5,49,0,0,303,318,5,41,0,0,304,318,5,42,0,0,305,318,5,43,0,0,
		306,307,5,2,0,0,307,308,3,36,18,0,308,309,5,4,0,0,309,318,1,0,0,0,310,
		318,3,52,26,0,311,318,3,56,28,0,312,318,5,50,0,0,313,318,3,54,27,0,314,
		318,3,62,31,0,315,318,3,60,30,0,316,318,3,50,25,0,317,302,1,0,0,0,317,
		303,1,0,0,0,317,304,1,0,0,0,317,305,1,0,0,0,317,306,1,0,0,0,317,310,1,
		0,0,0,317,311,1,0,0,0,317,312,1,0,0,0,317,313,1,0,0,0,317,314,1,0,0,0,
		317,315,1,0,0,0,317,316,1,0,0,0,318,49,1,0,0,0,319,320,3,58,29,0,320,328,
		5,8,0,0,321,322,3,60,30,0,322,323,5,7,0,0,323,324,3,36,18,0,324,325,5,
		5,0,0,325,327,1,0,0,0,326,321,1,0,0,0,327,330,1,0,0,0,328,326,1,0,0,0,
		328,329,1,0,0,0,329,331,1,0,0,0,330,328,1,0,0,0,331,332,5,9,0,0,332,51,
		1,0,0,0,333,334,5,44,0,0,334,335,5,26,0,0,335,336,3,32,16,0,336,337,5,
		27,0,0,337,346,5,8,0,0,338,343,3,36,18,0,339,340,5,3,0,0,340,342,3,36,
		18,0,341,339,1,0,0,0,342,345,1,0,0,0,343,341,1,0,0,0,343,344,1,0,0,0,344,
		347,1,0,0,0,345,343,1,0,0,0,346,338,1,0,0,0,346,347,1,0,0,0,347,348,1,
		0,0,0,348,349,5,9,0,0,349,53,1,0,0,0,350,351,5,45,0,0,351,352,5,2,0,0,
		352,353,3,36,18,0,353,354,5,3,0,0,354,358,5,8,0,0,355,357,3,4,2,0,356,
		355,1,0,0,0,357,360,1,0,0,0,358,356,1,0,0,0,358,359,1,0,0,0,359,361,1,
		0,0,0,360,358,1,0,0,0,361,362,5,9,0,0,362,363,5,4,0,0,363,55,1,0,0,0,364,
		365,3,60,30,0,365,374,5,2,0,0,366,371,3,36,18,0,367,368,5,3,0,0,368,370,
		3,36,18,0,369,367,1,0,0,0,370,373,1,0,0,0,371,369,1,0,0,0,371,372,1,0,
		0,0,372,375,1,0,0,0,373,371,1,0,0,0,374,366,1,0,0,0,374,375,1,0,0,0,375,
		376,1,0,0,0,376,377,5,4,0,0,377,57,1,0,0,0,378,379,5,48,0,0,379,59,1,0,
		0,0,380,381,5,48,0,0,381,61,1,0,0,0,382,383,3,60,30,0,383,384,5,46,0,0,
		384,385,3,60,30,0,385,63,1,0,0,0,42,67,83,91,100,112,119,123,127,131,138,
		150,155,162,168,178,187,194,201,220,223,230,237,244,252,258,260,266,268,
		274,276,282,284,290,292,297,317,328,343,346,358,371,374
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}

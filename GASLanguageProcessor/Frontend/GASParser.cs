//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/Daniel/CLionProjects/terminalgraphics/GASLanguageProcessor/GASLanguageProcessor/Frontend/GAS.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class GASParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, IDENTIFIER=40, NUM=41, WS=42, ALLSTRINGS=43;
	public const int
		RULE_program = 0, RULE_canvas = 1, RULE_statement = 2, RULE_declaration = 3, 
		RULE_assignment = 4, RULE_ifStatement = 5, RULE_whileStatement = 6, RULE_print = 7, 
		RULE_functionDeclaration = 8, RULE_point = 9, RULE_rectangle = 10, RULE_square = 11, 
		RULE_circle = 12, RULE_polygon = 13, RULE_text = 14, RULE_line = 15, RULE_pointDeclaration = 16, 
		RULE_rectangleDeclaration = 17, RULE_squareDeclaration = 18, RULE_circleDeclaration = 19, 
		RULE_polygonDeclaration = 20, RULE_textDecleration = 21, RULE_lineDeclaration = 22, 
		RULE_colourDeclaration = 23, RULE_stringDecleration = 24, RULE_collectionDeclaration = 25, 
		RULE_list = 26, RULE_groupDeclaration = 27, RULE_listAccess = 28, RULE_dataType = 29, 
		RULE_allTypes = 30, RULE_string = 31, RULE_colour = 32, RULE_expression = 33, 
		RULE_equalityExpression = 34, RULE_relationExpression = 35, RULE_binaryExpression = 36, 
		RULE_multExpression = 37, RULE_notExpression = 38, RULE_term = 39, RULE_pointTerm = 40, 
		RULE_colourTerm = 41, RULE_listTerm = 42, RULE_stringTerm = 43, RULE_lineTerm = 44, 
		RULE_functionCall = 45;
	public static readonly string[] ruleNames = {
		"program", "canvas", "statement", "declaration", "assignment", "ifStatement", 
		"whileStatement", "print", "functionDeclaration", "point", "rectangle", 
		"square", "circle", "polygon", "text", "line", "pointDeclaration", "rectangleDeclaration", 
		"squareDeclaration", "circleDeclaration", "polygonDeclaration", "textDecleration", 
		"lineDeclaration", "colourDeclaration", "stringDecleration", "collectionDeclaration", 
		"list", "groupDeclaration", "listAccess", "dataType", "allTypes", "string", 
		"colour", "expression", "equalityExpression", "relationExpression", "binaryExpression", 
		"multExpression", "notExpression", "term", "pointTerm", "colourTerm", 
		"listTerm", "stringTerm", "lineTerm", "functionCall"
	};

	private static readonly string[] _LiteralNames = {
		null, "'canvas'", "'('", "','", "')'", "';'", "'='", "'if'", "'{'", "'}'", 
		"'else'", "'while'", "'print'", "'point'", "'rectangle'", "'square'", 
		"'circle'", "'polygon'", "'text'", "'line'", "'<'", "'>'", "'list'", "'group'", 
		"'['", "']'", "'number'", "'bool'", "'string'", "'colour'", "'color'", 
		"'||'", "'=='", "'!='", "'+'", "'-'", "'*'", "'!'", "'true'", "'false'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, "IDENTIFIER", "NUM", "WS", "ALLSTRINGS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "GAS.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static GASParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public GASParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public GASParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CanvasContext canvas() {
			return GetRuleContext<CanvasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 92;
			canvas();
			State = 96;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1101605632128L) != 0)) {
				{
				{
				State = 93;
				statement();
				}
				}
				State = 98;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CanvasContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NUM() { return GetTokens(GASParser.NUM); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM(int i) {
			return GetToken(GASParser.NUM, i);
		}
		public CanvasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_canvas; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCanvas(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CanvasContext canvas() {
		CanvasContext _localctx = new CanvasContext(Context, State);
		EnterRule(_localctx, 2, RULE_canvas);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 99;
			Match(T__0);
			State = 100;
			Match(T__1);
			State = 101;
			Match(NUM);
			State = 102;
			Match(T__2);
			State = 103;
			Match(NUM);
			State = 104;
			Match(T__3);
			State = 105;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PointDeclarationContext pointDeclaration() {
			return GetRuleContext<PointDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SquareDeclarationContext squareDeclaration() {
			return GetRuleContext<SquareDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RectangleDeclarationContext rectangleDeclaration() {
			return GetRuleContext<RectangleDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CircleDeclarationContext circleDeclaration() {
			return GetRuleContext<CircleDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintContext print() {
			return GetRuleContext<PrintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CollectionDeclarationContext collectionDeclaration() {
			return GetRuleContext<CollectionDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GroupDeclarationContext groupDeclaration() {
			return GetRuleContext<GroupDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PolygonDeclarationContext polygonDeclaration() {
			return GetRuleContext<PolygonDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TextDeclerationContext textDecleration() {
			return GetRuleContext<TextDeclerationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineDeclarationContext lineDeclaration() {
			return GetRuleContext<LineDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColourDeclarationContext colourDeclaration() {
			return GetRuleContext<ColourDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringDeclerationContext stringDecleration() {
			return GetRuleContext<StringDeclerationContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			State = 125;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 107;
				declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 108;
				pointDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 109;
				squareDeclaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 110;
				rectangleDeclaration();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 111;
				circleDeclaration();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 112;
				assignment();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 113;
				print();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 114;
				ifStatement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 115;
				whileStatement();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 116;
				collectionDeclaration();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 117;
				groupDeclaration();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 118;
				functionCall();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 119;
				functionDeclaration();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 120;
				polygonDeclaration();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 121;
				textDecleration();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 122;
				lineDeclaration();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 123;
				colourDeclaration();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 124;
				stringDecleration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GASParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 6, RULE_declaration);
		try {
			State = 137;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 127;
				dataType();
				State = 128;
				Match(IDENTIFIER);
				State = 129;
				Match(T__4);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 131;
				dataType();
				State = 132;
				Match(IDENTIFIER);
				State = 133;
				Match(T__5);
				State = 134;
				expression();
				State = 135;
				Match(T__4);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GASParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 8, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 139;
			Match(IDENTIFIER);
			State = 140;
			Match(T__5);
			State = 141;
			expression();
			State = 142;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 10, RULE_ifStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144;
			Match(T__6);
			State = 145;
			Match(T__1);
			State = 146;
			expression();
			State = 147;
			Match(T__3);
			State = 148;
			Match(T__7);
			State = 152;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1101605632128L) != 0)) {
				{
				{
				State = 149;
				statement();
				}
				}
				State = 154;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 155;
			Match(T__8);
			State = 165;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__9) {
				{
				State = 156;
				Match(T__9);
				State = 157;
				Match(T__7);
				State = 161;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1101605632128L) != 0)) {
					{
					{
					State = 158;
					statement();
					}
					}
					State = 163;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 164;
				Match(T__8);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 12, RULE_whileStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 167;
			Match(T__10);
			State = 168;
			Match(T__1);
			State = 169;
			expression();
			State = 170;
			Match(T__3);
			State = 171;
			Match(T__7);
			State = 175;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1101605632128L) != 0)) {
				{
				{
				State = 172;
				statement();
				}
				}
				State = 177;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 178;
			Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PrintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_print; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintContext print() {
		PrintContext _localctx = new PrintContext(Context, State);
		EnterRule(_localctx, 14, RULE_print);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 180;
			Match(T__11);
			State = 181;
			expression();
			State = 182;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AllTypesContext[] allTypes() {
			return GetRuleContexts<AllTypesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AllTypesContext allTypes(int i) {
			return GetRuleContext<AllTypesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(GASParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(GASParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public FunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclarationContext functionDeclaration() {
		FunctionDeclarationContext _localctx = new FunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 16, RULE_functionDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 184;
			allTypes();
			State = 185;
			Match(IDENTIFIER);
			State = 186;
			Match(T__1);
			State = 198;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2080890880L) != 0)) {
				{
				State = 187;
				allTypes();
				State = 188;
				Match(IDENTIFIER);
				State = 195;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__2) {
					{
					{
					State = 189;
					Match(T__2);
					State = 190;
					allTypes();
					State = 191;
					Match(IDENTIFIER);
					}
					}
					State = 197;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 200;
			Match(T__3);
			State = 201;
			Match(T__7);
			State = 205;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1101605632128L) != 0)) {
				{
				{
				State = 202;
				statement();
				}
				}
				State = 207;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 208;
			Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PointContext : ParserRuleContext {
		public PointContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_point; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPoint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PointContext point() {
		PointContext _localctx = new PointContext(Context, State);
		EnterRule(_localctx, 18, RULE_point);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 210;
			Match(T__12);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RectangleContext : ParserRuleContext {
		public RectangleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rectangle; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRectangle(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RectangleContext rectangle() {
		RectangleContext _localctx = new RectangleContext(Context, State);
		EnterRule(_localctx, 20, RULE_rectangle);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 212;
			Match(T__13);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SquareContext : ParserRuleContext {
		public SquareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_square; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSquare(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SquareContext square() {
		SquareContext _localctx = new SquareContext(Context, State);
		EnterRule(_localctx, 22, RULE_square);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 214;
			Match(T__14);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CircleContext : ParserRuleContext {
		public CircleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_circle; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCircle(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CircleContext circle() {
		CircleContext _localctx = new CircleContext(Context, State);
		EnterRule(_localctx, 24, RULE_circle);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 216;
			Match(T__15);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PolygonContext : ParserRuleContext {
		public PolygonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_polygon; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPolygon(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PolygonContext polygon() {
		PolygonContext _localctx = new PolygonContext(Context, State);
		EnterRule(_localctx, 26, RULE_polygon);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 218;
			Match(T__16);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextContext : ParserRuleContext {
		public TextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_text; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TextContext text() {
		TextContext _localctx = new TextContext(Context, State);
		EnterRule(_localctx, 28, RULE_text);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 220;
			Match(T__17);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineContext : ParserRuleContext {
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(Context, State);
		EnterRule(_localctx, 30, RULE_line);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 222;
			Match(T__18);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PointDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PointContext point() {
			return GetRuleContext<PointContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GASParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PointTermContext pointTerm() {
			return GetRuleContext<PointTermContext>(0);
		}
		public PointDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pointDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPointDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PointDeclarationContext pointDeclaration() {
		PointDeclarationContext _localctx = new PointDeclarationContext(Context, State);
		EnterRule(_localctx, 32, RULE_pointDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 224;
			point();
			State = 225;
			Match(IDENTIFIER);
			State = 226;
			Match(T__5);
			State = 227;
			pointTerm();
			State = 228;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RectangleDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RectangleContext rectangle() {
			return GetRuleContext<RectangleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GASParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PointTermContext pointTerm() {
			return GetRuleContext<PointTermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NUM() { return GetTokens(GASParser.NUM); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM(int i) {
			return GetToken(GASParser.NUM, i);
		}
		public RectangleDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rectangleDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRectangleDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RectangleDeclarationContext rectangleDeclaration() {
		RectangleDeclarationContext _localctx = new RectangleDeclarationContext(Context, State);
		EnterRule(_localctx, 34, RULE_rectangleDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 230;
			rectangle();
			State = 231;
			Match(IDENTIFIER);
			State = 232;
			Match(T__5);
			State = 233;
			Match(T__1);
			State = 234;
			pointTerm();
			State = 235;
			Match(T__2);
			State = 236;
			Match(NUM);
			State = 237;
			Match(T__2);
			State = 238;
			Match(NUM);
			State = 239;
			Match(T__3);
			State = 240;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SquareDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SquareContext square() {
			return GetRuleContext<SquareContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GASParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PointTermContext pointTerm() {
			return GetRuleContext<PointTermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM() { return GetToken(GASParser.NUM, 0); }
		public SquareDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_squareDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSquareDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SquareDeclarationContext squareDeclaration() {
		SquareDeclarationContext _localctx = new SquareDeclarationContext(Context, State);
		EnterRule(_localctx, 36, RULE_squareDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 242;
			square();
			State = 243;
			Match(IDENTIFIER);
			State = 244;
			Match(T__5);
			State = 245;
			Match(T__1);
			State = 246;
			pointTerm();
			State = 247;
			Match(T__2);
			State = 248;
			Match(NUM);
			State = 249;
			Match(T__3);
			State = 250;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CircleDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CircleContext circle() {
			return GetRuleContext<CircleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GASParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PointTermContext pointTerm() {
			return GetRuleContext<PointTermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM() { return GetToken(GASParser.NUM, 0); }
		public CircleDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_circleDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCircleDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CircleDeclarationContext circleDeclaration() {
		CircleDeclarationContext _localctx = new CircleDeclarationContext(Context, State);
		EnterRule(_localctx, 38, RULE_circleDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 252;
			circle();
			State = 253;
			Match(IDENTIFIER);
			State = 254;
			Match(T__5);
			State = 255;
			Match(T__1);
			State = 256;
			pointTerm();
			State = 257;
			Match(T__2);
			State = 258;
			Match(NUM);
			State = 259;
			Match(T__3);
			State = 260;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PolygonDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PolygonContext polygon() {
			return GetRuleContext<PolygonContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GASParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ListTermContext listTerm() {
			return GetRuleContext<ListTermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColourTermContext colourTerm() {
			return GetRuleContext<ColourTermContext>(0);
		}
		public PolygonDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_polygonDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPolygonDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PolygonDeclarationContext polygonDeclaration() {
		PolygonDeclarationContext _localctx = new PolygonDeclarationContext(Context, State);
		EnterRule(_localctx, 40, RULE_polygonDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 262;
			polygon();
			State = 263;
			Match(IDENTIFIER);
			State = 264;
			Match(T__5);
			State = 265;
			Match(T__1);
			State = 266;
			listTerm();
			State = 269;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__2) {
				{
				State = 267;
				Match(T__2);
				State = 268;
				colourTerm();
				}
			}

			State = 271;
			Match(T__3);
			State = 272;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextDeclerationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TextContext text() {
			return GetRuleContext<TextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GASParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PointTermContext pointTerm() {
			return GetRuleContext<PointTermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringTermContext stringTerm() {
			return GetRuleContext<StringTermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM() { return GetToken(GASParser.NUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColourTermContext colourTerm() {
			return GetRuleContext<ColourTermContext>(0);
		}
		public TextDeclerationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_textDecleration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTextDecleration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TextDeclerationContext textDecleration() {
		TextDeclerationContext _localctx = new TextDeclerationContext(Context, State);
		EnterRule(_localctx, 42, RULE_textDecleration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 274;
			text();
			State = 275;
			Match(IDENTIFIER);
			State = 276;
			Match(T__5);
			State = 277;
			Match(T__1);
			State = 278;
			pointTerm();
			State = 279;
			Match(T__2);
			State = 280;
			stringTerm();
			State = 281;
			Match(T__2);
			State = 282;
			Match(NUM);
			State = 285;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__2) {
				{
				State = 283;
				Match(T__2);
				State = 284;
				colourTerm();
				}
			}

			State = 287;
			Match(T__3);
			State = 288;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line() {
			return GetRuleContext<LineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GASParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LineTermContext lineTerm() {
			return GetRuleContext<LineTermContext>(0);
		}
		public LineDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lineDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineDeclarationContext lineDeclaration() {
		LineDeclarationContext _localctx = new LineDeclarationContext(Context, State);
		EnterRule(_localctx, 44, RULE_lineDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 290;
			line();
			State = 291;
			Match(IDENTIFIER);
			State = 292;
			Match(T__5);
			State = 293;
			lineTerm();
			State = 294;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColourDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColourContext colour() {
			return GetRuleContext<ColourContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GASParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColourTermContext colourTerm() {
			return GetRuleContext<ColourTermContext>(0);
		}
		public ColourDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_colourDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColourDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColourDeclarationContext colourDeclaration() {
		ColourDeclarationContext _localctx = new ColourDeclarationContext(Context, State);
		EnterRule(_localctx, 46, RULE_colourDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 296;
			colour();
			State = 297;
			Match(IDENTIFIER);
			State = 298;
			Match(T__5);
			State = 299;
			colourTerm();
			State = 300;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringDeclerationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GASParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringTermContext stringTerm() {
			return GetRuleContext<StringTermContext>(0);
		}
		public StringDeclerationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringDecleration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringDecleration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringDeclerationContext stringDecleration() {
		StringDeclerationContext _localctx = new StringDeclerationContext(Context, State);
		EnterRule(_localctx, 48, RULE_stringDecleration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 302;
			@string();
			State = 303;
			Match(IDENTIFIER);
			State = 304;
			Match(T__5);
			State = 305;
			stringTerm();
			State = 306;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollectionDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ListContext list() {
			return GetRuleContext<ListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AllTypesContext allTypes() {
			return GetRuleContext<AllTypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GASParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public CollectionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collectionDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollectionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CollectionDeclarationContext collectionDeclaration() {
		CollectionDeclarationContext _localctx = new CollectionDeclarationContext(Context, State);
		EnterRule(_localctx, 50, RULE_collectionDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 308;
			list();
			State = 309;
			Match(T__19);
			State = 310;
			allTypes();
			State = 311;
			Match(T__20);
			State = 312;
			Match(IDENTIFIER);
			State = 313;
			Match(T__5);
			State = 314;
			Match(T__7);
			State = 323;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4294967296260L) != 0)) {
				{
				State = 315;
				expression();
				State = 320;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__2) {
					{
					{
					State = 316;
					Match(T__2);
					State = 317;
					expression();
					}
					}
					State = 322;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 325;
			Match(T__8);
			State = 326;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListContext : ParserRuleContext {
		public ListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListContext list() {
		ListContext _localctx = new ListContext(Context, State);
		EnterRule(_localctx, 52, RULE_list);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 328;
			Match(T__21);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GASParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PointTermContext pointTerm() {
			return GetRuleContext<PointTermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public GroupDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupDeclarationContext groupDeclaration() {
		GroupDeclarationContext _localctx = new GroupDeclarationContext(Context, State);
		EnterRule(_localctx, 54, RULE_groupDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 330;
			Match(T__22);
			State = 331;
			Match(IDENTIFIER);
			State = 332;
			Match(T__5);
			State = 333;
			Match(T__1);
			State = 334;
			pointTerm();
			State = 335;
			Match(T__2);
			State = 336;
			Match(T__7);
			State = 345;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4294967296260L) != 0)) {
				{
				State = 337;
				expression();
				State = 342;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__2) {
					{
					{
					State = 338;
					Match(T__2);
					State = 339;
					expression();
					}
					}
					State = 344;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 347;
			Match(T__8);
			State = 348;
			Match(T__3);
			State = 349;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GASParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ListAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListAccessContext listAccess() {
		ListAccessContext _localctx = new ListAccessContext(Context, State);
		EnterRule(_localctx, 56, RULE_listAccess);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 351;
			Match(IDENTIFIER);
			State = 352;
			Match(T__23);
			State = 353;
			expression();
			State = 354;
			Match(T__24);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataTypeContext : ParserRuleContext {
		public DataTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dataType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDataType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DataTypeContext dataType() {
		DataTypeContext _localctx = new DataTypeContext(Context, State);
		EnterRule(_localctx, 58, RULE_dataType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 356;
			_la = TokenStream.LA(1);
			if ( !(_la==T__25 || _la==T__26) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AllTypesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PointContext point() {
			return GetRuleContext<PointContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RectangleContext rectangle() {
			return GetRuleContext<RectangleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SquareContext square() {
			return GetRuleContext<SquareContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CircleContext circle() {
			return GetRuleContext<CircleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TextContext text() {
			return GetRuleContext<TextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PolygonContext polygon() {
			return GetRuleContext<PolygonContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColourContext colour() {
			return GetRuleContext<ColourContext>(0);
		}
		public AllTypesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_allTypes; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAllTypes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AllTypesContext allTypes() {
		AllTypesContext _localctx = new AllTypesContext(Context, State);
		EnterRule(_localctx, 60, RULE_allTypes);
		try {
			State = 367;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__25:
			case T__26:
				EnterOuterAlt(_localctx, 1);
				{
				State = 358;
				dataType();
				}
				break;
			case T__12:
				EnterOuterAlt(_localctx, 2);
				{
				State = 359;
				point();
				}
				break;
			case T__13:
				EnterOuterAlt(_localctx, 3);
				{
				State = 360;
				rectangle();
				}
				break;
			case T__14:
				EnterOuterAlt(_localctx, 4);
				{
				State = 361;
				square();
				}
				break;
			case T__15:
				EnterOuterAlt(_localctx, 5);
				{
				State = 362;
				circle();
				}
				break;
			case T__27:
				EnterOuterAlt(_localctx, 6);
				{
				State = 363;
				@string();
				}
				break;
			case T__17:
				EnterOuterAlt(_localctx, 7);
				{
				State = 364;
				text();
				}
				break;
			case T__16:
				EnterOuterAlt(_localctx, 8);
				{
				State = 365;
				polygon();
				}
				break;
			case T__28:
			case T__29:
				EnterOuterAlt(_localctx, 9);
				{
				State = 366;
				colour();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 62, RULE_string);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 369;
			Match(T__27);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColourContext : ParserRuleContext {
		public ColourContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_colour; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColour(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColourContext colour() {
		ColourContext _localctx = new ColourContext(Context, State);
		EnterRule(_localctx, 64, RULE_colour);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 371;
			_la = TokenStream.LA(1);
			if ( !(_la==T__28 || _la==T__29) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EqualityExpressionContext[] equalityExpression() {
			return GetRuleContexts<EqualityExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EqualityExpressionContext equalityExpression(int i) {
			return GetRuleContext<EqualityExpressionContext>(i);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 66, RULE_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 373;
			equalityExpression();
			State = 378;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__30) {
				{
				{
				State = 374;
				Match(T__30);
				State = 375;
				equalityExpression();
				}
				}
				State = 380;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EqualityExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RelationExpressionContext[] relationExpression() {
			return GetRuleContexts<RelationExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationExpressionContext relationExpression(int i) {
			return GetRuleContext<RelationExpressionContext>(i);
		}
		public EqualityExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equalityExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EqualityExpressionContext equalityExpression() {
		EqualityExpressionContext _localctx = new EqualityExpressionContext(Context, State);
		EnterRule(_localctx, 68, RULE_equalityExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 381;
			relationExpression();
			State = 386;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__31 || _la==T__32) {
				{
				{
				State = 382;
				_la = TokenStream.LA(1);
				if ( !(_la==T__31 || _la==T__32) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 383;
				relationExpression();
				}
				}
				State = 388;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BinaryExpressionContext[] binaryExpression() {
			return GetRuleContexts<BinaryExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BinaryExpressionContext binaryExpression(int i) {
			return GetRuleContext<BinaryExpressionContext>(i);
		}
		public RelationExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationExpressionContext relationExpression() {
		RelationExpressionContext _localctx = new RelationExpressionContext(Context, State);
		EnterRule(_localctx, 70, RULE_relationExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 389;
			binaryExpression();
			State = 394;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__19) {
				{
				{
				State = 390;
				Match(T__19);
				State = 391;
				binaryExpression();
				}
				}
				State = 396;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinaryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MultExpressionContext[] multExpression() {
			return GetRuleContexts<MultExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultExpressionContext multExpression(int i) {
			return GetRuleContext<MultExpressionContext>(i);
		}
		public BinaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binaryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BinaryExpressionContext binaryExpression() {
		BinaryExpressionContext _localctx = new BinaryExpressionContext(Context, State);
		EnterRule(_localctx, 72, RULE_binaryExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 397;
			multExpression();
			State = 402;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__33 || _la==T__34) {
				{
				{
				State = 398;
				_la = TokenStream.LA(1);
				if ( !(_la==T__33 || _la==T__34) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 399;
				multExpression();
				}
				}
				State = 404;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NotExpressionContext[] notExpression() {
			return GetRuleContexts<NotExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NotExpressionContext notExpression(int i) {
			return GetRuleContext<NotExpressionContext>(i);
		}
		public MultExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultExpressionContext multExpression() {
		MultExpressionContext _localctx = new MultExpressionContext(Context, State);
		EnterRule(_localctx, 74, RULE_multExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 405;
			notExpression();
			State = 410;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__35) {
				{
				{
				State = 406;
				Match(T__35);
				State = 407;
				notExpression();
				}
				}
				State = 412;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NotExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public NotExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_notExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NotExpressionContext notExpression() {
		NotExpressionContext _localctx = new NotExpressionContext(Context, State);
		EnterRule(_localctx, 76, RULE_notExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 416;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__34 || _la==T__36) {
				{
				{
				State = 413;
				_la = TokenStream.LA(1);
				if ( !(_la==T__34 || _la==T__36) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 418;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 419;
			term();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GASParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM() { return GetToken(GASParser.NUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PointTermContext pointTerm() {
			return GetRuleContext<PointTermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColourTermContext colourTerm() {
			return GetRuleContext<ColourTermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListTermContext listTerm() {
			return GetRuleContext<ListTermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListAccessContext listAccess() {
			return GetRuleContext<ListAccessContext>(0);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 78, RULE_term);
		try {
			State = 435;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 421;
				Match(IDENTIFIER);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 422;
				Match(NUM);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 423;
				Match(T__37);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 424;
				Match(T__38);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 425;
				Match(T__1);
				State = 426;
				expression();
				State = 427;
				Match(T__3);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 429;
				pointTerm();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 430;
				pointTerm();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 431;
				colourTerm();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 432;
				listTerm();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 433;
				functionCall();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 434;
				listAccess();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PointTermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GASParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NUM() { return GetTokens(GASParser.NUM); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM(int i) {
			return GetToken(GASParser.NUM, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public PointTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pointTerm; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPointTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PointTermContext pointTerm() {
		PointTermContext _localctx = new PointTermContext(Context, State);
		EnterRule(_localctx, 80, RULE_pointTerm);
		try {
			State = 444;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 437;
				Match(IDENTIFIER);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 438;
				Match(T__1);
				State = 439;
				Match(NUM);
				State = 440;
				Match(T__2);
				State = 441;
				Match(NUM);
				State = 442;
				Match(T__3);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 443;
				functionCall();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColourTermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GASParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NUM() { return GetTokens(GASParser.NUM); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM(int i) {
			return GetToken(GASParser.NUM, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public ColourTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_colourTerm; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColourTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColourTermContext colourTerm() {
		ColourTermContext _localctx = new ColourTermContext(Context, State);
		EnterRule(_localctx, 82, RULE_colourTerm);
		try {
			State = 457;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 446;
				Match(IDENTIFIER);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 447;
				Match(T__1);
				State = 448;
				Match(NUM);
				State = 449;
				Match(T__2);
				State = 450;
				Match(NUM);
				State = 451;
				Match(T__2);
				State = 452;
				Match(NUM);
				State = 453;
				Match(T__2);
				State = 454;
				Match(NUM);
				State = 455;
				Match(T__3);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 456;
				functionCall();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListTermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GASParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public ListTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listTerm; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListTermContext listTerm() {
		ListTermContext _localctx = new ListTermContext(Context, State);
		EnterRule(_localctx, 84, RULE_listTerm);
		int _la;
		try {
			State = 473;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 459;
				Match(IDENTIFIER);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 460;
				Match(T__7);
				State = 469;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4294967296260L) != 0)) {
					{
					State = 461;
					expression();
					State = 466;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__2) {
						{
						{
						State = 462;
						Match(T__2);
						State = 463;
						expression();
						}
						}
						State = 468;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 471;
				Match(T__8);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 472;
				functionCall();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringTermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GASParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALLSTRINGS() { return GetToken(GASParser.ALLSTRINGS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public StringTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringTerm; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringTermContext stringTerm() {
		StringTermContext _localctx = new StringTermContext(Context, State);
		EnterRule(_localctx, 86, RULE_stringTerm);
		try {
			State = 478;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 475;
				Match(IDENTIFIER);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 476;
				Match(ALLSTRINGS);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 477;
				functionCall();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineTermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GASParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PointTermContext[] pointTerm() {
			return GetRuleContexts<PointTermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PointTermContext pointTerm(int i) {
			return GetRuleContext<PointTermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColourTermContext colourTerm() {
			return GetRuleContext<ColourTermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public LineTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lineTerm; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineTermContext lineTerm() {
		LineTermContext _localctx = new LineTermContext(Context, State);
		EnterRule(_localctx, 88, RULE_lineTerm);
		int _la;
		try {
			State = 490;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 480;
				Match(IDENTIFIER);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 481;
				Match(T__1);
				State = 482;
				pointTerm();
				State = 483;
				Match(T__2);
				State = 484;
				pointTerm();
				State = 487;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__2) {
					{
					State = 485;
					Match(T__2);
					State = 486;
					colourTerm();
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 489;
				functionCall();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GASParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 90, RULE_functionCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 492;
			Match(IDENTIFIER);
			State = 493;
			Match(T__1);
			State = 502;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4294967296260L) != 0)) {
				{
				State = 494;
				expression();
				State = 499;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__2) {
					{
					{
					State = 495;
					Match(T__2);
					State = 496;
					expression();
					}
					}
					State = 501;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 504;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,43,507,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,1,0,1,0,5,0,95,8,0,10,0,12,0,98,9,0,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
		2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,126,8,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
		1,3,1,3,1,3,3,3,138,8,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,5,
		5,151,8,5,10,5,12,5,154,9,5,1,5,1,5,1,5,1,5,5,5,160,8,5,10,5,12,5,163,
		9,5,1,5,3,5,166,8,5,1,6,1,6,1,6,1,6,1,6,1,6,5,6,174,8,6,10,6,12,6,177,
		9,6,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,5,8,194,
		8,8,10,8,12,8,197,9,8,3,8,199,8,8,1,8,1,8,1,8,5,8,204,8,8,10,8,12,8,207,
		9,8,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,
		1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,
		1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,
		1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,
		1,20,1,20,1,20,1,20,1,20,3,20,270,8,20,1,20,1,20,1,20,1,21,1,21,1,21,1,
		21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,3,21,286,8,21,1,21,1,21,1,21,1,22,
		1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,
		1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,5,25,
		319,8,25,10,25,12,25,322,9,25,3,25,324,8,25,1,25,1,25,1,25,1,26,1,26,1,
		27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,5,27,341,8,27,10,27,12,
		27,344,9,27,3,27,346,8,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,
		1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,3,30,368,8,30,1,
		31,1,31,1,32,1,32,1,33,1,33,1,33,5,33,377,8,33,10,33,12,33,380,9,33,1,
		34,1,34,1,34,5,34,385,8,34,10,34,12,34,388,9,34,1,35,1,35,1,35,5,35,393,
		8,35,10,35,12,35,396,9,35,1,36,1,36,1,36,5,36,401,8,36,10,36,12,36,404,
		9,36,1,37,1,37,1,37,5,37,409,8,37,10,37,12,37,412,9,37,1,38,5,38,415,8,
		38,10,38,12,38,418,9,38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,
		39,1,39,1,39,1,39,1,39,1,39,1,39,3,39,436,8,39,1,40,1,40,1,40,1,40,1,40,
		1,40,1,40,3,40,445,8,40,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,
		41,1,41,3,41,458,8,41,1,42,1,42,1,42,1,42,1,42,5,42,465,8,42,10,42,12,
		42,468,9,42,3,42,470,8,42,1,42,1,42,3,42,474,8,42,1,43,1,43,1,43,3,43,
		479,8,43,1,44,1,44,1,44,1,44,1,44,1,44,1,44,3,44,488,8,44,1,44,3,44,491,
		8,44,1,45,1,45,1,45,1,45,1,45,5,45,498,8,45,10,45,12,45,501,9,45,3,45,
		503,8,45,1,45,1,45,1,45,0,0,46,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,
		30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,
		78,80,82,84,86,88,90,0,5,1,0,26,27,1,0,29,30,1,0,32,33,1,0,34,35,2,0,35,
		35,37,37,531,0,92,1,0,0,0,2,99,1,0,0,0,4,125,1,0,0,0,6,137,1,0,0,0,8,139,
		1,0,0,0,10,144,1,0,0,0,12,167,1,0,0,0,14,180,1,0,0,0,16,184,1,0,0,0,18,
		210,1,0,0,0,20,212,1,0,0,0,22,214,1,0,0,0,24,216,1,0,0,0,26,218,1,0,0,
		0,28,220,1,0,0,0,30,222,1,0,0,0,32,224,1,0,0,0,34,230,1,0,0,0,36,242,1,
		0,0,0,38,252,1,0,0,0,40,262,1,0,0,0,42,274,1,0,0,0,44,290,1,0,0,0,46,296,
		1,0,0,0,48,302,1,0,0,0,50,308,1,0,0,0,52,328,1,0,0,0,54,330,1,0,0,0,56,
		351,1,0,0,0,58,356,1,0,0,0,60,367,1,0,0,0,62,369,1,0,0,0,64,371,1,0,0,
		0,66,373,1,0,0,0,68,381,1,0,0,0,70,389,1,0,0,0,72,397,1,0,0,0,74,405,1,
		0,0,0,76,416,1,0,0,0,78,435,1,0,0,0,80,444,1,0,0,0,82,457,1,0,0,0,84,473,
		1,0,0,0,86,478,1,0,0,0,88,490,1,0,0,0,90,492,1,0,0,0,92,96,3,2,1,0,93,
		95,3,4,2,0,94,93,1,0,0,0,95,98,1,0,0,0,96,94,1,0,0,0,96,97,1,0,0,0,97,
		1,1,0,0,0,98,96,1,0,0,0,99,100,5,1,0,0,100,101,5,2,0,0,101,102,5,41,0,
		0,102,103,5,3,0,0,103,104,5,41,0,0,104,105,5,4,0,0,105,106,5,5,0,0,106,
		3,1,0,0,0,107,126,3,6,3,0,108,126,3,32,16,0,109,126,3,36,18,0,110,126,
		3,34,17,0,111,126,3,38,19,0,112,126,3,8,4,0,113,126,3,14,7,0,114,126,3,
		10,5,0,115,126,3,12,6,0,116,126,3,50,25,0,117,126,3,54,27,0,118,126,3,
		90,45,0,119,126,3,16,8,0,120,126,3,40,20,0,121,126,3,42,21,0,122,126,3,
		44,22,0,123,126,3,46,23,0,124,126,3,48,24,0,125,107,1,0,0,0,125,108,1,
		0,0,0,125,109,1,0,0,0,125,110,1,0,0,0,125,111,1,0,0,0,125,112,1,0,0,0,
		125,113,1,0,0,0,125,114,1,0,0,0,125,115,1,0,0,0,125,116,1,0,0,0,125,117,
		1,0,0,0,125,118,1,0,0,0,125,119,1,0,0,0,125,120,1,0,0,0,125,121,1,0,0,
		0,125,122,1,0,0,0,125,123,1,0,0,0,125,124,1,0,0,0,126,5,1,0,0,0,127,128,
		3,58,29,0,128,129,5,40,0,0,129,130,5,5,0,0,130,138,1,0,0,0,131,132,3,58,
		29,0,132,133,5,40,0,0,133,134,5,6,0,0,134,135,3,66,33,0,135,136,5,5,0,
		0,136,138,1,0,0,0,137,127,1,0,0,0,137,131,1,0,0,0,138,7,1,0,0,0,139,140,
		5,40,0,0,140,141,5,6,0,0,141,142,3,66,33,0,142,143,5,5,0,0,143,9,1,0,0,
		0,144,145,5,7,0,0,145,146,5,2,0,0,146,147,3,66,33,0,147,148,5,4,0,0,148,
		152,5,8,0,0,149,151,3,4,2,0,150,149,1,0,0,0,151,154,1,0,0,0,152,150,1,
		0,0,0,152,153,1,0,0,0,153,155,1,0,0,0,154,152,1,0,0,0,155,165,5,9,0,0,
		156,157,5,10,0,0,157,161,5,8,0,0,158,160,3,4,2,0,159,158,1,0,0,0,160,163,
		1,0,0,0,161,159,1,0,0,0,161,162,1,0,0,0,162,164,1,0,0,0,163,161,1,0,0,
		0,164,166,5,9,0,0,165,156,1,0,0,0,165,166,1,0,0,0,166,11,1,0,0,0,167,168,
		5,11,0,0,168,169,5,2,0,0,169,170,3,66,33,0,170,171,5,4,0,0,171,175,5,8,
		0,0,172,174,3,4,2,0,173,172,1,0,0,0,174,177,1,0,0,0,175,173,1,0,0,0,175,
		176,1,0,0,0,176,178,1,0,0,0,177,175,1,0,0,0,178,179,5,9,0,0,179,13,1,0,
		0,0,180,181,5,12,0,0,181,182,3,66,33,0,182,183,5,5,0,0,183,15,1,0,0,0,
		184,185,3,60,30,0,185,186,5,40,0,0,186,198,5,2,0,0,187,188,3,60,30,0,188,
		195,5,40,0,0,189,190,5,3,0,0,190,191,3,60,30,0,191,192,5,40,0,0,192,194,
		1,0,0,0,193,189,1,0,0,0,194,197,1,0,0,0,195,193,1,0,0,0,195,196,1,0,0,
		0,196,199,1,0,0,0,197,195,1,0,0,0,198,187,1,0,0,0,198,199,1,0,0,0,199,
		200,1,0,0,0,200,201,5,4,0,0,201,205,5,8,0,0,202,204,3,4,2,0,203,202,1,
		0,0,0,204,207,1,0,0,0,205,203,1,0,0,0,205,206,1,0,0,0,206,208,1,0,0,0,
		207,205,1,0,0,0,208,209,5,9,0,0,209,17,1,0,0,0,210,211,5,13,0,0,211,19,
		1,0,0,0,212,213,5,14,0,0,213,21,1,0,0,0,214,215,5,15,0,0,215,23,1,0,0,
		0,216,217,5,16,0,0,217,25,1,0,0,0,218,219,5,17,0,0,219,27,1,0,0,0,220,
		221,5,18,0,0,221,29,1,0,0,0,222,223,5,19,0,0,223,31,1,0,0,0,224,225,3,
		18,9,0,225,226,5,40,0,0,226,227,5,6,0,0,227,228,3,80,40,0,228,229,5,5,
		0,0,229,33,1,0,0,0,230,231,3,20,10,0,231,232,5,40,0,0,232,233,5,6,0,0,
		233,234,5,2,0,0,234,235,3,80,40,0,235,236,5,3,0,0,236,237,5,41,0,0,237,
		238,5,3,0,0,238,239,5,41,0,0,239,240,5,4,0,0,240,241,5,5,0,0,241,35,1,
		0,0,0,242,243,3,22,11,0,243,244,5,40,0,0,244,245,5,6,0,0,245,246,5,2,0,
		0,246,247,3,80,40,0,247,248,5,3,0,0,248,249,5,41,0,0,249,250,5,4,0,0,250,
		251,5,5,0,0,251,37,1,0,0,0,252,253,3,24,12,0,253,254,5,40,0,0,254,255,
		5,6,0,0,255,256,5,2,0,0,256,257,3,80,40,0,257,258,5,3,0,0,258,259,5,41,
		0,0,259,260,5,4,0,0,260,261,5,5,0,0,261,39,1,0,0,0,262,263,3,26,13,0,263,
		264,5,40,0,0,264,265,5,6,0,0,265,266,5,2,0,0,266,269,3,84,42,0,267,268,
		5,3,0,0,268,270,3,82,41,0,269,267,1,0,0,0,269,270,1,0,0,0,270,271,1,0,
		0,0,271,272,5,4,0,0,272,273,5,5,0,0,273,41,1,0,0,0,274,275,3,28,14,0,275,
		276,5,40,0,0,276,277,5,6,0,0,277,278,5,2,0,0,278,279,3,80,40,0,279,280,
		5,3,0,0,280,281,3,86,43,0,281,282,5,3,0,0,282,285,5,41,0,0,283,284,5,3,
		0,0,284,286,3,82,41,0,285,283,1,0,0,0,285,286,1,0,0,0,286,287,1,0,0,0,
		287,288,5,4,0,0,288,289,5,5,0,0,289,43,1,0,0,0,290,291,3,30,15,0,291,292,
		5,40,0,0,292,293,5,6,0,0,293,294,3,88,44,0,294,295,5,5,0,0,295,45,1,0,
		0,0,296,297,3,64,32,0,297,298,5,40,0,0,298,299,5,6,0,0,299,300,3,82,41,
		0,300,301,5,5,0,0,301,47,1,0,0,0,302,303,3,62,31,0,303,304,5,40,0,0,304,
		305,5,6,0,0,305,306,3,86,43,0,306,307,5,5,0,0,307,49,1,0,0,0,308,309,3,
		52,26,0,309,310,5,20,0,0,310,311,3,60,30,0,311,312,5,21,0,0,312,313,5,
		40,0,0,313,314,5,6,0,0,314,323,5,8,0,0,315,320,3,66,33,0,316,317,5,3,0,
		0,317,319,3,66,33,0,318,316,1,0,0,0,319,322,1,0,0,0,320,318,1,0,0,0,320,
		321,1,0,0,0,321,324,1,0,0,0,322,320,1,0,0,0,323,315,1,0,0,0,323,324,1,
		0,0,0,324,325,1,0,0,0,325,326,5,9,0,0,326,327,5,5,0,0,327,51,1,0,0,0,328,
		329,5,22,0,0,329,53,1,0,0,0,330,331,5,23,0,0,331,332,5,40,0,0,332,333,
		5,6,0,0,333,334,5,2,0,0,334,335,3,80,40,0,335,336,5,3,0,0,336,345,5,8,
		0,0,337,342,3,66,33,0,338,339,5,3,0,0,339,341,3,66,33,0,340,338,1,0,0,
		0,341,344,1,0,0,0,342,340,1,0,0,0,342,343,1,0,0,0,343,346,1,0,0,0,344,
		342,1,0,0,0,345,337,1,0,0,0,345,346,1,0,0,0,346,347,1,0,0,0,347,348,5,
		9,0,0,348,349,5,4,0,0,349,350,5,5,0,0,350,55,1,0,0,0,351,352,5,40,0,0,
		352,353,5,24,0,0,353,354,3,66,33,0,354,355,5,25,0,0,355,57,1,0,0,0,356,
		357,7,0,0,0,357,59,1,0,0,0,358,368,3,58,29,0,359,368,3,18,9,0,360,368,
		3,20,10,0,361,368,3,22,11,0,362,368,3,24,12,0,363,368,3,62,31,0,364,368,
		3,28,14,0,365,368,3,26,13,0,366,368,3,64,32,0,367,358,1,0,0,0,367,359,
		1,0,0,0,367,360,1,0,0,0,367,361,1,0,0,0,367,362,1,0,0,0,367,363,1,0,0,
		0,367,364,1,0,0,0,367,365,1,0,0,0,367,366,1,0,0,0,368,61,1,0,0,0,369,370,
		5,28,0,0,370,63,1,0,0,0,371,372,7,1,0,0,372,65,1,0,0,0,373,378,3,68,34,
		0,374,375,5,31,0,0,375,377,3,68,34,0,376,374,1,0,0,0,377,380,1,0,0,0,378,
		376,1,0,0,0,378,379,1,0,0,0,379,67,1,0,0,0,380,378,1,0,0,0,381,386,3,70,
		35,0,382,383,7,2,0,0,383,385,3,70,35,0,384,382,1,0,0,0,385,388,1,0,0,0,
		386,384,1,0,0,0,386,387,1,0,0,0,387,69,1,0,0,0,388,386,1,0,0,0,389,394,
		3,72,36,0,390,391,5,20,0,0,391,393,3,72,36,0,392,390,1,0,0,0,393,396,1,
		0,0,0,394,392,1,0,0,0,394,395,1,0,0,0,395,71,1,0,0,0,396,394,1,0,0,0,397,
		402,3,74,37,0,398,399,7,3,0,0,399,401,3,74,37,0,400,398,1,0,0,0,401,404,
		1,0,0,0,402,400,1,0,0,0,402,403,1,0,0,0,403,73,1,0,0,0,404,402,1,0,0,0,
		405,410,3,76,38,0,406,407,5,36,0,0,407,409,3,76,38,0,408,406,1,0,0,0,409,
		412,1,0,0,0,410,408,1,0,0,0,410,411,1,0,0,0,411,75,1,0,0,0,412,410,1,0,
		0,0,413,415,7,4,0,0,414,413,1,0,0,0,415,418,1,0,0,0,416,414,1,0,0,0,416,
		417,1,0,0,0,417,419,1,0,0,0,418,416,1,0,0,0,419,420,3,78,39,0,420,77,1,
		0,0,0,421,436,5,40,0,0,422,436,5,41,0,0,423,436,5,38,0,0,424,436,5,39,
		0,0,425,426,5,2,0,0,426,427,3,66,33,0,427,428,5,4,0,0,428,436,1,0,0,0,
		429,436,3,80,40,0,430,436,3,80,40,0,431,436,3,82,41,0,432,436,3,84,42,
		0,433,436,3,90,45,0,434,436,3,56,28,0,435,421,1,0,0,0,435,422,1,0,0,0,
		435,423,1,0,0,0,435,424,1,0,0,0,435,425,1,0,0,0,435,429,1,0,0,0,435,430,
		1,0,0,0,435,431,1,0,0,0,435,432,1,0,0,0,435,433,1,0,0,0,435,434,1,0,0,
		0,436,79,1,0,0,0,437,445,5,40,0,0,438,439,5,2,0,0,439,440,5,41,0,0,440,
		441,5,3,0,0,441,442,5,41,0,0,442,445,5,4,0,0,443,445,3,90,45,0,444,437,
		1,0,0,0,444,438,1,0,0,0,444,443,1,0,0,0,445,81,1,0,0,0,446,458,5,40,0,
		0,447,448,5,2,0,0,448,449,5,41,0,0,449,450,5,3,0,0,450,451,5,41,0,0,451,
		452,5,3,0,0,452,453,5,41,0,0,453,454,5,3,0,0,454,455,5,41,0,0,455,458,
		5,4,0,0,456,458,3,90,45,0,457,446,1,0,0,0,457,447,1,0,0,0,457,456,1,0,
		0,0,458,83,1,0,0,0,459,474,5,40,0,0,460,469,5,8,0,0,461,466,3,66,33,0,
		462,463,5,3,0,0,463,465,3,66,33,0,464,462,1,0,0,0,465,468,1,0,0,0,466,
		464,1,0,0,0,466,467,1,0,0,0,467,470,1,0,0,0,468,466,1,0,0,0,469,461,1,
		0,0,0,469,470,1,0,0,0,470,471,1,0,0,0,471,474,5,9,0,0,472,474,3,90,45,
		0,473,459,1,0,0,0,473,460,1,0,0,0,473,472,1,0,0,0,474,85,1,0,0,0,475,479,
		5,40,0,0,476,479,5,43,0,0,477,479,3,90,45,0,478,475,1,0,0,0,478,476,1,
		0,0,0,478,477,1,0,0,0,479,87,1,0,0,0,480,491,5,40,0,0,481,482,5,2,0,0,
		482,483,3,80,40,0,483,484,5,3,0,0,484,487,3,80,40,0,485,486,5,3,0,0,486,
		488,3,82,41,0,487,485,1,0,0,0,487,488,1,0,0,0,488,491,1,0,0,0,489,491,
		3,90,45,0,490,480,1,0,0,0,490,481,1,0,0,0,490,489,1,0,0,0,491,89,1,0,0,
		0,492,493,5,40,0,0,493,502,5,2,0,0,494,499,3,66,33,0,495,496,5,3,0,0,496,
		498,3,66,33,0,497,495,1,0,0,0,498,501,1,0,0,0,499,497,1,0,0,0,499,500,
		1,0,0,0,500,503,1,0,0,0,501,499,1,0,0,0,502,494,1,0,0,0,502,503,1,0,0,
		0,503,504,1,0,0,0,504,505,5,4,0,0,505,91,1,0,0,0,34,96,125,137,152,161,
		165,175,195,198,205,269,285,320,323,342,345,367,378,386,394,402,410,416,
		435,444,457,466,469,473,478,487,490,499,502
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from GAS.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class GASParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, IDENTIFIER=47, NUM=48, ALLSTRINGS=49, WS=50;
	public const int
		RULE_program = 0, RULE_canvas = 1, RULE_statement = 2, RULE_declaration = 3, 
		RULE_assignment = 4, RULE_ifStatement = 5, RULE_whileStatement = 6, RULE_print = 7, 
		RULE_functionDeclaration = 8, RULE_collectionDeclaration = 9, RULE_list = 10, 
		RULE_groupDeclaration = 11, RULE_listAccess = 12, RULE_allTypes = 13, 
		RULE_expression = 14, RULE_equalityExpression = 15, RULE_relationExpression = 16, 
		RULE_binaryExpression = 17, RULE_multExpression = 18, RULE_notExpression = 19, 
		RULE_numTerm = 20, RULE_boolTerm = 21, RULE_term = 22, RULE_pointTerm = 23, 
		RULE_colourTerm = 24, RULE_listTerm = 25, RULE_stringTerm = 26, RULE_lineTerm = 27, 
		RULE_squareTerm = 28, RULE_polygonTerm = 29, RULE_circleTerm = 30, RULE_rectangleTerm = 31, 
		RULE_textTerm = 32, RULE_functionCall = 33;
	public static readonly string[] ruleNames = {
		"program", "canvas", "statement", "declaration", "assignment", "ifStatement", 
		"whileStatement", "print", "functionDeclaration", "collectionDeclaration", 
		"list", "groupDeclaration", "listAccess", "allTypes", "expression", "equalityExpression", 
		"relationExpression", "binaryExpression", "multExpression", "notExpression", 
		"numTerm", "boolTerm", "term", "pointTerm", "colourTerm", "listTerm", 
		"stringTerm", "lineTerm", "squareTerm", "polygonTerm", "circleTerm", "rectangleTerm", 
		"textTerm", "functionCall"
	};

	private static readonly string[] _LiteralNames = {
		null, "'canvas'", "'('", "','", "')'", "';'", "'='", "'if'", "'{'", "'}'", 
		"'else'", "'while'", "'print'", "'<'", "'>'", "'list'", "'group'", "'['", 
		"']'", "'number'", "'bool'", "'point'", "'rectangle'", "'square'", "'circle'", 
		"'polygon'", "'text'", "'colour'", "'string'", "'line'", "'||'", "'=='", 
		"'!='", "'+'", "'-'", "'*'", "'!'", "'true'", "'false'", "'point('", "'colour('", 
		"'line('", "'square('", "'polygon('", "'circle('", "'rectangle('", "'text('"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, "IDENTIFIER", 
		"NUM", "ALLSTRINGS", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "GAS.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static GASParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public GASParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public GASParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CanvasContext canvas() {
			return GetRuleContext<CanvasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 68;
			canvas();
			State = 72;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 140738561677440L) != 0)) {
				{
				{
				State = 69;
				statement();
				}
				}
				State = 74;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CanvasContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NUM() { return GetTokens(GASParser.NUM); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM(int i) {
			return GetToken(GASParser.NUM, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColourTermContext colourTerm() {
			return GetRuleContext<ColourTermContext>(0);
		}
		public CanvasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_canvas; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCanvas(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CanvasContext canvas() {
		CanvasContext _localctx = new CanvasContext(Context, State);
		EnterRule(_localctx, 2, RULE_canvas);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 75;
			Match(T__0);
			State = 76;
			Match(T__1);
			State = 77;
			Match(NUM);
			State = 78;
			Match(T__2);
			State = 79;
			Match(NUM);
			State = 82;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__2) {
				{
				State = 80;
				Match(T__2);
				State = 81;
				colourTerm();
				}
			}

			State = 84;
			Match(T__3);
			State = 85;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintContext print() {
			return GetRuleContext<PrintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CollectionDeclarationContext collectionDeclaration() {
			return GetRuleContext<CollectionDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GroupDeclarationContext groupDeclaration() {
			return GetRuleContext<GroupDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			State = 96;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 87;
				declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 88;
				assignment();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 89;
				print();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 90;
				ifStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 91;
				whileStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 92;
				collectionDeclaration();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 93;
				groupDeclaration();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 94;
				functionCall();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 95;
				functionDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AllTypesContext allTypes() {
			return GetRuleContext<AllTypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GASParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 6, RULE_declaration);
		try {
			State = 108;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 98;
				allTypes();
				State = 99;
				Match(IDENTIFIER);
				State = 100;
				Match(T__4);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 102;
				allTypes();
				State = 103;
				Match(IDENTIFIER);
				State = 104;
				Match(T__5);
				State = 105;
				expression();
				State = 106;
				Match(T__4);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GASParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 8, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 110;
			Match(IDENTIFIER);
			State = 111;
			Match(T__5);
			State = 112;
			expression();
			State = 113;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 10, RULE_ifStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 115;
			Match(T__6);
			State = 116;
			Match(T__1);
			State = 117;
			expression();
			State = 118;
			Match(T__3);
			State = 119;
			Match(T__7);
			State = 123;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 140738561677440L) != 0)) {
				{
				{
				State = 120;
				statement();
				}
				}
				State = 125;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 126;
			Match(T__8);
			State = 136;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__9) {
				{
				State = 127;
				Match(T__9);
				State = 128;
				Match(T__7);
				State = 132;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 140738561677440L) != 0)) {
					{
					{
					State = 129;
					statement();
					}
					}
					State = 134;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 135;
				Match(T__8);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 12, RULE_whileStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 138;
			Match(T__10);
			State = 139;
			Match(T__1);
			State = 140;
			expression();
			State = 141;
			Match(T__3);
			State = 142;
			Match(T__7);
			State = 146;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 140738561677440L) != 0)) {
				{
				{
				State = 143;
				statement();
				}
				}
				State = 148;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 149;
			Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PrintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_print; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintContext print() {
		PrintContext _localctx = new PrintContext(Context, State);
		EnterRule(_localctx, 14, RULE_print);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 151;
			Match(T__11);
			State = 152;
			expression();
			State = 153;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AllTypesContext[] allTypes() {
			return GetRuleContexts<AllTypesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AllTypesContext allTypes(int i) {
			return GetRuleContext<AllTypesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(GASParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(GASParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public FunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclarationContext functionDeclaration() {
		FunctionDeclarationContext _localctx = new FunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 16, RULE_functionDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 155;
			allTypes();
			State = 156;
			Match(IDENTIFIER);
			State = 157;
			Match(T__1);
			State = 169;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1073315840L) != 0)) {
				{
				State = 158;
				allTypes();
				State = 159;
				Match(IDENTIFIER);
				State = 166;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__2) {
					{
					{
					State = 160;
					Match(T__2);
					State = 161;
					allTypes();
					State = 162;
					Match(IDENTIFIER);
					}
					}
					State = 168;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 171;
			Match(T__3);
			State = 172;
			Match(T__7);
			State = 176;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 140738561677440L) != 0)) {
				{
				{
				State = 173;
				statement();
				}
				}
				State = 178;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 179;
			Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollectionDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ListContext list() {
			return GetRuleContext<ListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AllTypesContext allTypes() {
			return GetRuleContext<AllTypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GASParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public CollectionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collectionDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollectionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CollectionDeclarationContext collectionDeclaration() {
		CollectionDeclarationContext _localctx = new CollectionDeclarationContext(Context, State);
		EnterRule(_localctx, 18, RULE_collectionDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 181;
			list();
			State = 182;
			Match(T__12);
			State = 183;
			allTypes();
			State = 184;
			Match(T__13);
			State = 185;
			Match(IDENTIFIER);
			State = 186;
			Match(T__5);
			State = 187;
			Match(T__7);
			State = 196;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1125848367235332L) != 0)) {
				{
				State = 188;
				expression();
				State = 193;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__2) {
					{
					{
					State = 189;
					Match(T__2);
					State = 190;
					expression();
					}
					}
					State = 195;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 198;
			Match(T__8);
			State = 199;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListContext : ParserRuleContext {
		public ListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListContext list() {
		ListContext _localctx = new ListContext(Context, State);
		EnterRule(_localctx, 20, RULE_list);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 201;
			Match(T__14);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GASParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PointTermContext pointTerm() {
			return GetRuleContext<PointTermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public GroupDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupDeclarationContext groupDeclaration() {
		GroupDeclarationContext _localctx = new GroupDeclarationContext(Context, State);
		EnterRule(_localctx, 22, RULE_groupDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 203;
			Match(T__15);
			State = 204;
			Match(IDENTIFIER);
			State = 205;
			Match(T__5);
			State = 206;
			Match(T__1);
			State = 207;
			pointTerm();
			State = 208;
			Match(T__2);
			State = 209;
			Match(T__7);
			State = 218;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 140738561677440L) != 0)) {
				{
				State = 210;
				statement();
				State = 215;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__2) {
					{
					{
					State = 211;
					Match(T__2);
					State = 212;
					statement();
					}
					}
					State = 217;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 220;
			Match(T__8);
			State = 221;
			Match(T__3);
			State = 222;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GASParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ListAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListAccessContext listAccess() {
		ListAccessContext _localctx = new ListAccessContext(Context, State);
		EnterRule(_localctx, 24, RULE_listAccess);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 224;
			Match(IDENTIFIER);
			State = 225;
			Match(T__16);
			State = 226;
			expression();
			State = 227;
			Match(T__17);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AllTypesContext : ParserRuleContext {
		public AllTypesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_allTypes; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAllTypes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AllTypesContext allTypes() {
		AllTypesContext _localctx = new AllTypesContext(Context, State);
		EnterRule(_localctx, 26, RULE_allTypes);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 229;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1073315840L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EqualityExpressionContext[] equalityExpression() {
			return GetRuleContexts<EqualityExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EqualityExpressionContext equalityExpression(int i) {
			return GetRuleContext<EqualityExpressionContext>(i);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 28, RULE_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 231;
			equalityExpression();
			State = 236;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__29) {
				{
				{
				State = 232;
				Match(T__29);
				State = 233;
				equalityExpression();
				}
				}
				State = 238;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EqualityExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RelationExpressionContext[] relationExpression() {
			return GetRuleContexts<RelationExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationExpressionContext relationExpression(int i) {
			return GetRuleContext<RelationExpressionContext>(i);
		}
		public EqualityExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equalityExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EqualityExpressionContext equalityExpression() {
		EqualityExpressionContext _localctx = new EqualityExpressionContext(Context, State);
		EnterRule(_localctx, 30, RULE_equalityExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 239;
			relationExpression();
			State = 244;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__30 || _la==T__31) {
				{
				{
				State = 240;
				_la = TokenStream.LA(1);
				if ( !(_la==T__30 || _la==T__31) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 241;
				relationExpression();
				}
				}
				State = 246;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BinaryExpressionContext[] binaryExpression() {
			return GetRuleContexts<BinaryExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BinaryExpressionContext binaryExpression(int i) {
			return GetRuleContext<BinaryExpressionContext>(i);
		}
		public RelationExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationExpressionContext relationExpression() {
		RelationExpressionContext _localctx = new RelationExpressionContext(Context, State);
		EnterRule(_localctx, 32, RULE_relationExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 247;
			binaryExpression();
			State = 252;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__12) {
				{
				{
				State = 248;
				Match(T__12);
				State = 249;
				binaryExpression();
				}
				}
				State = 254;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinaryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MultExpressionContext[] multExpression() {
			return GetRuleContexts<MultExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultExpressionContext multExpression(int i) {
			return GetRuleContext<MultExpressionContext>(i);
		}
		public BinaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binaryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BinaryExpressionContext binaryExpression() {
		BinaryExpressionContext _localctx = new BinaryExpressionContext(Context, State);
		EnterRule(_localctx, 34, RULE_binaryExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 255;
			multExpression();
			State = 260;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__32 || _la==T__33) {
				{
				{
				State = 256;
				_la = TokenStream.LA(1);
				if ( !(_la==T__32 || _la==T__33) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 257;
				multExpression();
				}
				}
				State = 262;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NotExpressionContext[] notExpression() {
			return GetRuleContexts<NotExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NotExpressionContext notExpression(int i) {
			return GetRuleContext<NotExpressionContext>(i);
		}
		public MultExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultExpressionContext multExpression() {
		MultExpressionContext _localctx = new MultExpressionContext(Context, State);
		EnterRule(_localctx, 36, RULE_multExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 263;
			notExpression();
			State = 268;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__34) {
				{
				{
				State = 264;
				Match(T__34);
				State = 265;
				notExpression();
				}
				}
				State = 270;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NotExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public NotExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_notExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NotExpressionContext notExpression() {
		NotExpressionContext _localctx = new NotExpressionContext(Context, State);
		EnterRule(_localctx, 38, RULE_notExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 274;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__33 || _la==T__35) {
				{
				{
				State = 271;
				_la = TokenStream.LA(1);
				if ( !(_la==T__33 || _la==T__35) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 276;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 277;
			term();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumTermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM() { return GetToken(GASParser.NUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GASParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListAccessContext listAccess() {
			return GetRuleContext<ListAccessContext>(0);
		}
		public NumTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numTerm; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumTermContext numTerm() {
		NumTermContext _localctx = new NumTermContext(Context, State);
		EnterRule(_localctx, 40, RULE_numTerm);
		try {
			State = 283;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 279;
				Match(NUM);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 280;
				Match(IDENTIFIER);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 281;
				functionCall();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 282;
				listAccess();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolTermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GASParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListAccessContext listAccess() {
			return GetRuleContext<ListAccessContext>(0);
		}
		public BoolTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolTerm; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolTermContext boolTerm() {
		BoolTermContext _localctx = new BoolTermContext(Context, State);
		EnterRule(_localctx, 42, RULE_boolTerm);
		try {
			State = 290;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 285;
				Match(T__36);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 286;
				Match(T__37);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 287;
				Match(IDENTIFIER);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 288;
				functionCall();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 289;
				listAccess();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GASParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumTermContext numTerm() {
			return GetRuleContext<NumTermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolTermContext boolTerm() {
			return GetRuleContext<BoolTermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PointTermContext pointTerm() {
			return GetRuleContext<PointTermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColourTermContext colourTerm() {
			return GetRuleContext<ColourTermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListTermContext listTerm() {
			return GetRuleContext<ListTermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListAccessContext listAccess() {
			return GetRuleContext<ListAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringTermContext stringTerm() {
			return GetRuleContext<StringTermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineTermContext lineTerm() {
			return GetRuleContext<LineTermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SquareTermContext squareTerm() {
			return GetRuleContext<SquareTermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PolygonTermContext polygonTerm() {
			return GetRuleContext<PolygonTermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CircleTermContext circleTerm() {
			return GetRuleContext<CircleTermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RectangleTermContext rectangleTerm() {
			return GetRuleContext<RectangleTermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TextTermContext textTerm() {
			return GetRuleContext<TextTermContext>(0);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 44, RULE_term);
		try {
			State = 312;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 292;
				Match(IDENTIFIER);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 293;
				numTerm();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 294;
				boolTerm();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 295;
				Match(T__1);
				State = 296;
				expression();
				State = 297;
				Match(T__3);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 299;
				pointTerm();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 300;
				pointTerm();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 301;
				colourTerm();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 302;
				listTerm();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 303;
				functionCall();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 304;
				listAccess();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 305;
				stringTerm();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 306;
				lineTerm();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 307;
				squareTerm();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 308;
				polygonTerm();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 309;
				circleTerm();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 310;
				rectangleTerm();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 311;
				textTerm();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PointTermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GASParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumTermContext[] numTerm() {
			return GetRuleContexts<NumTermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumTermContext numTerm(int i) {
			return GetRuleContext<NumTermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListAccessContext listAccess() {
			return GetRuleContext<ListAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public PointTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pointTerm; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPointTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PointTermContext pointTerm() {
		PointTermContext _localctx = new PointTermContext(Context, State);
		EnterRule(_localctx, 46, RULE_pointTerm);
		try {
			State = 323;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 314;
				Match(IDENTIFIER);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 315;
				Match(T__38);
				State = 316;
				numTerm();
				State = 317;
				Match(T__2);
				State = 318;
				numTerm();
				State = 319;
				Match(T__3);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 321;
				listAccess();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 322;
				functionCall();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColourTermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GASParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumTermContext[] numTerm() {
			return GetRuleContexts<NumTermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumTermContext numTerm(int i) {
			return GetRuleContext<NumTermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListAccessContext listAccess() {
			return GetRuleContext<ListAccessContext>(0);
		}
		public ColourTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_colourTerm; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColourTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColourTermContext colourTerm() {
		ColourTermContext _localctx = new ColourTermContext(Context, State);
		EnterRule(_localctx, 48, RULE_colourTerm);
		try {
			State = 338;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 325;
				Match(IDENTIFIER);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 326;
				Match(T__39);
				State = 327;
				numTerm();
				State = 328;
				Match(T__2);
				State = 329;
				numTerm();
				State = 330;
				Match(T__2);
				State = 331;
				numTerm();
				State = 332;
				Match(T__2);
				State = 333;
				numTerm();
				State = 334;
				Match(T__3);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 336;
				functionCall();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 337;
				listAccess();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListTermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GASParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public ListTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listTerm; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListTermContext listTerm() {
		ListTermContext _localctx = new ListTermContext(Context, State);
		EnterRule(_localctx, 50, RULE_listTerm);
		int _la;
		try {
			State = 354;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 340;
				Match(IDENTIFIER);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 341;
				Match(T__7);
				State = 350;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1125848367235332L) != 0)) {
					{
					State = 342;
					expression();
					State = 347;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__2) {
						{
						{
						State = 343;
						Match(T__2);
						State = 344;
						expression();
						}
						}
						State = 349;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 352;
				Match(T__8);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 353;
				functionCall();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringTermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GASParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALLSTRINGS() { return GetToken(GASParser.ALLSTRINGS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListAccessContext listAccess() {
			return GetRuleContext<ListAccessContext>(0);
		}
		public StringTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringTerm; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringTermContext stringTerm() {
		StringTermContext _localctx = new StringTermContext(Context, State);
		EnterRule(_localctx, 52, RULE_stringTerm);
		try {
			State = 360;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 356;
				Match(IDENTIFIER);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 357;
				Match(ALLSTRINGS);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 358;
				functionCall();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 359;
				listAccess();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineTermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GASParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PointTermContext[] pointTerm() {
			return GetRuleContexts<PointTermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PointTermContext pointTerm(int i) {
			return GetRuleContext<PointTermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumTermContext numTerm() {
			return GetRuleContext<NumTermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColourTermContext colourTerm() {
			return GetRuleContext<ColourTermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public LineTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lineTerm; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineTermContext lineTerm() {
		LineTermContext _localctx = new LineTermContext(Context, State);
		EnterRule(_localctx, 54, RULE_lineTerm);
		int _la;
		try {
			State = 376;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 362;
				Match(IDENTIFIER);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 363;
				Match(T__40);
				State = 364;
				pointTerm();
				State = 365;
				Match(T__2);
				State = 366;
				pointTerm();
				State = 367;
				Match(T__2);
				State = 368;
				numTerm();
				State = 371;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__2) {
					{
					State = 369;
					Match(T__2);
					State = 370;
					colourTerm();
					}
				}

				State = 373;
				Match(T__3);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 375;
				functionCall();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SquareTermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GASParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PointTermContext pointTerm() {
			return GetRuleContext<PointTermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumTermContext[] numTerm() {
			return GetRuleContexts<NumTermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumTermContext numTerm(int i) {
			return GetRuleContext<NumTermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColourTermContext[] colourTerm() {
			return GetRuleContexts<ColourTermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColourTermContext colourTerm(int i) {
			return GetRuleContext<ColourTermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public SquareTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_squareTerm; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSquareTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SquareTermContext squareTerm() {
		SquareTermContext _localctx = new SquareTermContext(Context, State);
		EnterRule(_localctx, 56, RULE_squareTerm);
		int _la;
		try {
			State = 396;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 378;
				Match(IDENTIFIER);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 379;
				Match(T__41);
				State = 380;
				pointTerm();
				State = 381;
				Match(T__2);
				State = 382;
				numTerm();
				State = 383;
				Match(T__2);
				State = 384;
				numTerm();
				State = 387;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
				case 1:
					{
					State = 385;
					Match(T__2);
					State = 386;
					colourTerm();
					}
					break;
				}
				State = 391;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__2) {
					{
					State = 389;
					Match(T__2);
					State = 390;
					colourTerm();
					}
				}

				State = 393;
				Match(T__3);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 395;
				functionCall();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PolygonTermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GASParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColourTermContext colourTerm() {
			return GetRuleContext<ColourTermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListTermContext listTerm() {
			return GetRuleContext<ListTermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public PolygonTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_polygonTerm; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPolygonTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PolygonTermContext polygonTerm() {
		PolygonTermContext _localctx = new PolygonTermContext(Context, State);
		EnterRule(_localctx, 58, RULE_polygonTerm);
		try {
			State = 406;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 398;
				Match(IDENTIFIER);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 399;
				Match(T__42);
				State = 400;
				colourTerm();
				State = 401;
				Match(T__2);
				State = 402;
				listTerm();
				State = 403;
				Match(T__3);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 405;
				functionCall();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CircleTermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GASParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PointTermContext pointTerm() {
			return GetRuleContext<PointTermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumTermContext[] numTerm() {
			return GetRuleContexts<NumTermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumTermContext numTerm(int i) {
			return GetRuleContext<NumTermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColourTermContext[] colourTerm() {
			return GetRuleContexts<ColourTermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColourTermContext colourTerm(int i) {
			return GetRuleContext<ColourTermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public CircleTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_circleTerm; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCircleTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CircleTermContext circleTerm() {
		CircleTermContext _localctx = new CircleTermContext(Context, State);
		EnterRule(_localctx, 60, RULE_circleTerm);
		int _la;
		try {
			State = 426;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 408;
				Match(IDENTIFIER);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 409;
				Match(T__43);
				State = 410;
				pointTerm();
				State = 411;
				Match(T__2);
				State = 412;
				numTerm();
				State = 413;
				Match(T__2);
				State = 414;
				numTerm();
				State = 417;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
				case 1:
					{
					State = 415;
					Match(T__2);
					State = 416;
					colourTerm();
					}
					break;
				}
				State = 421;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__2) {
					{
					State = 419;
					Match(T__2);
					State = 420;
					colourTerm();
					}
				}

				State = 423;
				Match(T__3);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 425;
				functionCall();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RectangleTermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GASParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PointTermContext pointTerm() {
			return GetRuleContext<PointTermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumTermContext[] numTerm() {
			return GetRuleContexts<NumTermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumTermContext numTerm(int i) {
			return GetRuleContext<NumTermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColourTermContext[] colourTerm() {
			return GetRuleContexts<ColourTermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColourTermContext colourTerm(int i) {
			return GetRuleContext<ColourTermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public RectangleTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rectangleTerm; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRectangleTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RectangleTermContext rectangleTerm() {
		RectangleTermContext _localctx = new RectangleTermContext(Context, State);
		EnterRule(_localctx, 62, RULE_rectangleTerm);
		int _la;
		try {
			State = 448;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 428;
				Match(IDENTIFIER);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 429;
				Match(T__44);
				State = 430;
				pointTerm();
				State = 431;
				Match(T__2);
				State = 432;
				numTerm();
				State = 433;
				Match(T__2);
				State = 434;
				numTerm();
				State = 435;
				Match(T__2);
				State = 436;
				numTerm();
				State = 439;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
				case 1:
					{
					State = 437;
					Match(T__2);
					State = 438;
					colourTerm();
					}
					break;
				}
				State = 443;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__2) {
					{
					State = 441;
					Match(T__2);
					State = 442;
					colourTerm();
					}
				}

				State = 445;
				Match(T__3);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 447;
				functionCall();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextTermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GASParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringTermContext[] stringTerm() {
			return GetRuleContexts<StringTermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringTermContext stringTerm(int i) {
			return GetRuleContext<StringTermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PointTermContext pointTerm() {
			return GetRuleContext<PointTermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumTermContext numTerm() {
			return GetRuleContext<NumTermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColourTermContext colourTerm() {
			return GetRuleContext<ColourTermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public TextTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_textTerm; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTextTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TextTermContext textTerm() {
		TextTermContext _localctx = new TextTermContext(Context, State);
		EnterRule(_localctx, 64, RULE_textTerm);
		int _la;
		try {
			State = 466;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 450;
				Match(IDENTIFIER);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 451;
				Match(T__45);
				State = 452;
				stringTerm();
				State = 453;
				Match(T__2);
				State = 454;
				pointTerm();
				State = 455;
				Match(T__2);
				State = 456;
				numTerm();
				State = 457;
				Match(T__2);
				State = 458;
				stringTerm();
				State = 461;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__2) {
					{
					State = 459;
					Match(T__2);
					State = 460;
					colourTerm();
					}
				}

				State = 463;
				Match(T__3);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 465;
				functionCall();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GASParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGASVisitor<TResult> typedVisitor = visitor as IGASVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 66, RULE_functionCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 468;
			Match(IDENTIFIER);
			State = 469;
			Match(T__1);
			State = 478;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1125848367235332L) != 0)) {
				{
				State = 470;
				expression();
				State = 475;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__2) {
					{
					{
					State = 471;
					Match(T__2);
					State = 472;
					expression();
					}
					}
					State = 477;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 480;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,50,483,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,1,0,1,0,5,0,71,8,0,10,
		0,12,0,74,9,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,83,8,1,1,1,1,1,1,1,1,2,1,
		2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,97,8,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,
		3,1,3,1,3,3,3,109,8,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,5,5,
		122,8,5,10,5,12,5,125,9,5,1,5,1,5,1,5,1,5,5,5,131,8,5,10,5,12,5,134,9,
		5,1,5,3,5,137,8,5,1,6,1,6,1,6,1,6,1,6,1,6,5,6,145,8,6,10,6,12,6,148,9,
		6,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,5,8,165,
		8,8,10,8,12,8,168,9,8,3,8,170,8,8,1,8,1,8,1,8,5,8,175,8,8,10,8,12,8,178,
		9,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,5,9,192,8,9,10,9,12,
		9,195,9,9,3,9,197,8,9,1,9,1,9,1,9,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,
		11,1,11,1,11,1,11,1,11,5,11,214,8,11,10,11,12,11,217,9,11,3,11,219,8,11,
		1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,14,1,14,1,14,
		5,14,235,8,14,10,14,12,14,238,9,14,1,15,1,15,1,15,5,15,243,8,15,10,15,
		12,15,246,9,15,1,16,1,16,1,16,5,16,251,8,16,10,16,12,16,254,9,16,1,17,
		1,17,1,17,5,17,259,8,17,10,17,12,17,262,9,17,1,18,1,18,1,18,5,18,267,8,
		18,10,18,12,18,270,9,18,1,19,5,19,273,8,19,10,19,12,19,276,9,19,1,19,1,
		19,1,20,1,20,1,20,1,20,3,20,284,8,20,1,21,1,21,1,21,1,21,1,21,3,21,291,
		8,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,
		1,22,1,22,1,22,1,22,1,22,1,22,1,22,3,22,313,8,22,1,23,1,23,1,23,1,23,1,
		23,1,23,1,23,1,23,1,23,3,23,324,8,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,
		1,24,1,24,1,24,1,24,1,24,1,24,3,24,339,8,24,1,25,1,25,1,25,1,25,1,25,5,
		25,346,8,25,10,25,12,25,349,9,25,3,25,351,8,25,1,25,1,25,3,25,355,8,25,
		1,26,1,26,1,26,1,26,3,26,361,8,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,
		27,1,27,3,27,372,8,27,1,27,1,27,1,27,3,27,377,8,27,1,28,1,28,1,28,1,28,
		1,28,1,28,1,28,1,28,1,28,3,28,388,8,28,1,28,1,28,3,28,392,8,28,1,28,1,
		28,1,28,3,28,397,8,28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,3,29,407,
		8,29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,3,30,418,8,30,1,30,1,
		30,3,30,422,8,30,1,30,1,30,1,30,3,30,427,8,30,1,31,1,31,1,31,1,31,1,31,
		1,31,1,31,1,31,1,31,1,31,1,31,3,31,440,8,31,1,31,1,31,3,31,444,8,31,1,
		31,1,31,1,31,3,31,449,8,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,
		1,32,1,32,3,32,462,8,32,1,32,1,32,1,32,3,32,467,8,32,1,33,1,33,1,33,1,
		33,1,33,5,33,474,8,33,10,33,12,33,477,9,33,3,33,479,8,33,1,33,1,33,1,33,
		0,0,34,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,
		46,48,50,52,54,56,58,60,62,64,66,0,4,2,0,15,16,19,29,1,0,31,32,1,0,33,
		34,2,0,34,34,36,36,534,0,68,1,0,0,0,2,75,1,0,0,0,4,96,1,0,0,0,6,108,1,
		0,0,0,8,110,1,0,0,0,10,115,1,0,0,0,12,138,1,0,0,0,14,151,1,0,0,0,16,155,
		1,0,0,0,18,181,1,0,0,0,20,201,1,0,0,0,22,203,1,0,0,0,24,224,1,0,0,0,26,
		229,1,0,0,0,28,231,1,0,0,0,30,239,1,0,0,0,32,247,1,0,0,0,34,255,1,0,0,
		0,36,263,1,0,0,0,38,274,1,0,0,0,40,283,1,0,0,0,42,290,1,0,0,0,44,312,1,
		0,0,0,46,323,1,0,0,0,48,338,1,0,0,0,50,354,1,0,0,0,52,360,1,0,0,0,54,376,
		1,0,0,0,56,396,1,0,0,0,58,406,1,0,0,0,60,426,1,0,0,0,62,448,1,0,0,0,64,
		466,1,0,0,0,66,468,1,0,0,0,68,72,3,2,1,0,69,71,3,4,2,0,70,69,1,0,0,0,71,
		74,1,0,0,0,72,70,1,0,0,0,72,73,1,0,0,0,73,1,1,0,0,0,74,72,1,0,0,0,75,76,
		5,1,0,0,76,77,5,2,0,0,77,78,5,48,0,0,78,79,5,3,0,0,79,82,5,48,0,0,80,81,
		5,3,0,0,81,83,3,48,24,0,82,80,1,0,0,0,82,83,1,0,0,0,83,84,1,0,0,0,84,85,
		5,4,0,0,85,86,5,5,0,0,86,3,1,0,0,0,87,97,3,6,3,0,88,97,3,8,4,0,89,97,3,
		14,7,0,90,97,3,10,5,0,91,97,3,12,6,0,92,97,3,18,9,0,93,97,3,22,11,0,94,
		97,3,66,33,0,95,97,3,16,8,0,96,87,1,0,0,0,96,88,1,0,0,0,96,89,1,0,0,0,
		96,90,1,0,0,0,96,91,1,0,0,0,96,92,1,0,0,0,96,93,1,0,0,0,96,94,1,0,0,0,
		96,95,1,0,0,0,97,5,1,0,0,0,98,99,3,26,13,0,99,100,5,47,0,0,100,101,5,5,
		0,0,101,109,1,0,0,0,102,103,3,26,13,0,103,104,5,47,0,0,104,105,5,6,0,0,
		105,106,3,28,14,0,106,107,5,5,0,0,107,109,1,0,0,0,108,98,1,0,0,0,108,102,
		1,0,0,0,109,7,1,0,0,0,110,111,5,47,0,0,111,112,5,6,0,0,112,113,3,28,14,
		0,113,114,5,5,0,0,114,9,1,0,0,0,115,116,5,7,0,0,116,117,5,2,0,0,117,118,
		3,28,14,0,118,119,5,4,0,0,119,123,5,8,0,0,120,122,3,4,2,0,121,120,1,0,
		0,0,122,125,1,0,0,0,123,121,1,0,0,0,123,124,1,0,0,0,124,126,1,0,0,0,125,
		123,1,0,0,0,126,136,5,9,0,0,127,128,5,10,0,0,128,132,5,8,0,0,129,131,3,
		4,2,0,130,129,1,0,0,0,131,134,1,0,0,0,132,130,1,0,0,0,132,133,1,0,0,0,
		133,135,1,0,0,0,134,132,1,0,0,0,135,137,5,9,0,0,136,127,1,0,0,0,136,137,
		1,0,0,0,137,11,1,0,0,0,138,139,5,11,0,0,139,140,5,2,0,0,140,141,3,28,14,
		0,141,142,5,4,0,0,142,146,5,8,0,0,143,145,3,4,2,0,144,143,1,0,0,0,145,
		148,1,0,0,0,146,144,1,0,0,0,146,147,1,0,0,0,147,149,1,0,0,0,148,146,1,
		0,0,0,149,150,5,9,0,0,150,13,1,0,0,0,151,152,5,12,0,0,152,153,3,28,14,
		0,153,154,5,5,0,0,154,15,1,0,0,0,155,156,3,26,13,0,156,157,5,47,0,0,157,
		169,5,2,0,0,158,159,3,26,13,0,159,166,5,47,0,0,160,161,5,3,0,0,161,162,
		3,26,13,0,162,163,5,47,0,0,163,165,1,0,0,0,164,160,1,0,0,0,165,168,1,0,
		0,0,166,164,1,0,0,0,166,167,1,0,0,0,167,170,1,0,0,0,168,166,1,0,0,0,169,
		158,1,0,0,0,169,170,1,0,0,0,170,171,1,0,0,0,171,172,5,4,0,0,172,176,5,
		8,0,0,173,175,3,4,2,0,174,173,1,0,0,0,175,178,1,0,0,0,176,174,1,0,0,0,
		176,177,1,0,0,0,177,179,1,0,0,0,178,176,1,0,0,0,179,180,5,9,0,0,180,17,
		1,0,0,0,181,182,3,20,10,0,182,183,5,13,0,0,183,184,3,26,13,0,184,185,5,
		14,0,0,185,186,5,47,0,0,186,187,5,6,0,0,187,196,5,8,0,0,188,193,3,28,14,
		0,189,190,5,3,0,0,190,192,3,28,14,0,191,189,1,0,0,0,192,195,1,0,0,0,193,
		191,1,0,0,0,193,194,1,0,0,0,194,197,1,0,0,0,195,193,1,0,0,0,196,188,1,
		0,0,0,196,197,1,0,0,0,197,198,1,0,0,0,198,199,5,9,0,0,199,200,5,5,0,0,
		200,19,1,0,0,0,201,202,5,15,0,0,202,21,1,0,0,0,203,204,5,16,0,0,204,205,
		5,47,0,0,205,206,5,6,0,0,206,207,5,2,0,0,207,208,3,46,23,0,208,209,5,3,
		0,0,209,218,5,8,0,0,210,215,3,4,2,0,211,212,5,3,0,0,212,214,3,4,2,0,213,
		211,1,0,0,0,214,217,1,0,0,0,215,213,1,0,0,0,215,216,1,0,0,0,216,219,1,
		0,0,0,217,215,1,0,0,0,218,210,1,0,0,0,218,219,1,0,0,0,219,220,1,0,0,0,
		220,221,5,9,0,0,221,222,5,4,0,0,222,223,5,5,0,0,223,23,1,0,0,0,224,225,
		5,47,0,0,225,226,5,17,0,0,226,227,3,28,14,0,227,228,5,18,0,0,228,25,1,
		0,0,0,229,230,7,0,0,0,230,27,1,0,0,0,231,236,3,30,15,0,232,233,5,30,0,
		0,233,235,3,30,15,0,234,232,1,0,0,0,235,238,1,0,0,0,236,234,1,0,0,0,236,
		237,1,0,0,0,237,29,1,0,0,0,238,236,1,0,0,0,239,244,3,32,16,0,240,241,7,
		1,0,0,241,243,3,32,16,0,242,240,1,0,0,0,243,246,1,0,0,0,244,242,1,0,0,
		0,244,245,1,0,0,0,245,31,1,0,0,0,246,244,1,0,0,0,247,252,3,34,17,0,248,
		249,5,13,0,0,249,251,3,34,17,0,250,248,1,0,0,0,251,254,1,0,0,0,252,250,
		1,0,0,0,252,253,1,0,0,0,253,33,1,0,0,0,254,252,1,0,0,0,255,260,3,36,18,
		0,256,257,7,2,0,0,257,259,3,36,18,0,258,256,1,0,0,0,259,262,1,0,0,0,260,
		258,1,0,0,0,260,261,1,0,0,0,261,35,1,0,0,0,262,260,1,0,0,0,263,268,3,38,
		19,0,264,265,5,35,0,0,265,267,3,38,19,0,266,264,1,0,0,0,267,270,1,0,0,
		0,268,266,1,0,0,0,268,269,1,0,0,0,269,37,1,0,0,0,270,268,1,0,0,0,271,273,
		7,3,0,0,272,271,1,0,0,0,273,276,1,0,0,0,274,272,1,0,0,0,274,275,1,0,0,
		0,275,277,1,0,0,0,276,274,1,0,0,0,277,278,3,44,22,0,278,39,1,0,0,0,279,
		284,5,48,0,0,280,284,5,47,0,0,281,284,3,66,33,0,282,284,3,24,12,0,283,
		279,1,0,0,0,283,280,1,0,0,0,283,281,1,0,0,0,283,282,1,0,0,0,284,41,1,0,
		0,0,285,291,5,37,0,0,286,291,5,38,0,0,287,291,5,47,0,0,288,291,3,66,33,
		0,289,291,3,24,12,0,290,285,1,0,0,0,290,286,1,0,0,0,290,287,1,0,0,0,290,
		288,1,0,0,0,290,289,1,0,0,0,291,43,1,0,0,0,292,313,5,47,0,0,293,313,3,
		40,20,0,294,313,3,42,21,0,295,296,5,2,0,0,296,297,3,28,14,0,297,298,5,
		4,0,0,298,313,1,0,0,0,299,313,3,46,23,0,300,313,3,46,23,0,301,313,3,48,
		24,0,302,313,3,50,25,0,303,313,3,66,33,0,304,313,3,24,12,0,305,313,3,52,
		26,0,306,313,3,54,27,0,307,313,3,56,28,0,308,313,3,58,29,0,309,313,3,60,
		30,0,310,313,3,62,31,0,311,313,3,64,32,0,312,292,1,0,0,0,312,293,1,0,0,
		0,312,294,1,0,0,0,312,295,1,0,0,0,312,299,1,0,0,0,312,300,1,0,0,0,312,
		301,1,0,0,0,312,302,1,0,0,0,312,303,1,0,0,0,312,304,1,0,0,0,312,305,1,
		0,0,0,312,306,1,0,0,0,312,307,1,0,0,0,312,308,1,0,0,0,312,309,1,0,0,0,
		312,310,1,0,0,0,312,311,1,0,0,0,313,45,1,0,0,0,314,324,5,47,0,0,315,316,
		5,39,0,0,316,317,3,40,20,0,317,318,5,3,0,0,318,319,3,40,20,0,319,320,5,
		4,0,0,320,324,1,0,0,0,321,324,3,24,12,0,322,324,3,66,33,0,323,314,1,0,
		0,0,323,315,1,0,0,0,323,321,1,0,0,0,323,322,1,0,0,0,324,47,1,0,0,0,325,
		339,5,47,0,0,326,327,5,40,0,0,327,328,3,40,20,0,328,329,5,3,0,0,329,330,
		3,40,20,0,330,331,5,3,0,0,331,332,3,40,20,0,332,333,5,3,0,0,333,334,3,
		40,20,0,334,335,5,4,0,0,335,339,1,0,0,0,336,339,3,66,33,0,337,339,3,24,
		12,0,338,325,1,0,0,0,338,326,1,0,0,0,338,336,1,0,0,0,338,337,1,0,0,0,339,
		49,1,0,0,0,340,355,5,47,0,0,341,350,5,8,0,0,342,347,3,28,14,0,343,344,
		5,3,0,0,344,346,3,28,14,0,345,343,1,0,0,0,346,349,1,0,0,0,347,345,1,0,
		0,0,347,348,1,0,0,0,348,351,1,0,0,0,349,347,1,0,0,0,350,342,1,0,0,0,350,
		351,1,0,0,0,351,352,1,0,0,0,352,355,5,9,0,0,353,355,3,66,33,0,354,340,
		1,0,0,0,354,341,1,0,0,0,354,353,1,0,0,0,355,51,1,0,0,0,356,361,5,47,0,
		0,357,361,5,49,0,0,358,361,3,66,33,0,359,361,3,24,12,0,360,356,1,0,0,0,
		360,357,1,0,0,0,360,358,1,0,0,0,360,359,1,0,0,0,361,53,1,0,0,0,362,377,
		5,47,0,0,363,364,5,41,0,0,364,365,3,46,23,0,365,366,5,3,0,0,366,367,3,
		46,23,0,367,368,5,3,0,0,368,371,3,40,20,0,369,370,5,3,0,0,370,372,3,48,
		24,0,371,369,1,0,0,0,371,372,1,0,0,0,372,373,1,0,0,0,373,374,5,4,0,0,374,
		377,1,0,0,0,375,377,3,66,33,0,376,362,1,0,0,0,376,363,1,0,0,0,376,375,
		1,0,0,0,377,55,1,0,0,0,378,397,5,47,0,0,379,380,5,42,0,0,380,381,3,46,
		23,0,381,382,5,3,0,0,382,383,3,40,20,0,383,384,5,3,0,0,384,387,3,40,20,
		0,385,386,5,3,0,0,386,388,3,48,24,0,387,385,1,0,0,0,387,388,1,0,0,0,388,
		391,1,0,0,0,389,390,5,3,0,0,390,392,3,48,24,0,391,389,1,0,0,0,391,392,
		1,0,0,0,392,393,1,0,0,0,393,394,5,4,0,0,394,397,1,0,0,0,395,397,3,66,33,
		0,396,378,1,0,0,0,396,379,1,0,0,0,396,395,1,0,0,0,397,57,1,0,0,0,398,407,
		5,47,0,0,399,400,5,43,0,0,400,401,3,48,24,0,401,402,5,3,0,0,402,403,3,
		50,25,0,403,404,5,4,0,0,404,407,1,0,0,0,405,407,3,66,33,0,406,398,1,0,
		0,0,406,399,1,0,0,0,406,405,1,0,0,0,407,59,1,0,0,0,408,427,5,47,0,0,409,
		410,5,44,0,0,410,411,3,46,23,0,411,412,5,3,0,0,412,413,3,40,20,0,413,414,
		5,3,0,0,414,417,3,40,20,0,415,416,5,3,0,0,416,418,3,48,24,0,417,415,1,
		0,0,0,417,418,1,0,0,0,418,421,1,0,0,0,419,420,5,3,0,0,420,422,3,48,24,
		0,421,419,1,0,0,0,421,422,1,0,0,0,422,423,1,0,0,0,423,424,5,4,0,0,424,
		427,1,0,0,0,425,427,3,66,33,0,426,408,1,0,0,0,426,409,1,0,0,0,426,425,
		1,0,0,0,427,61,1,0,0,0,428,449,5,47,0,0,429,430,5,45,0,0,430,431,3,46,
		23,0,431,432,5,3,0,0,432,433,3,40,20,0,433,434,5,3,0,0,434,435,3,40,20,
		0,435,436,5,3,0,0,436,439,3,40,20,0,437,438,5,3,0,0,438,440,3,48,24,0,
		439,437,1,0,0,0,439,440,1,0,0,0,440,443,1,0,0,0,441,442,5,3,0,0,442,444,
		3,48,24,0,443,441,1,0,0,0,443,444,1,0,0,0,444,445,1,0,0,0,445,446,5,4,
		0,0,446,449,1,0,0,0,447,449,3,66,33,0,448,428,1,0,0,0,448,429,1,0,0,0,
		448,447,1,0,0,0,449,63,1,0,0,0,450,467,5,47,0,0,451,452,5,46,0,0,452,453,
		3,52,26,0,453,454,5,3,0,0,454,455,3,46,23,0,455,456,5,3,0,0,456,457,3,
		40,20,0,457,458,5,3,0,0,458,461,3,52,26,0,459,460,5,3,0,0,460,462,3,48,
		24,0,461,459,1,0,0,0,461,462,1,0,0,0,462,463,1,0,0,0,463,464,5,4,0,0,464,
		467,1,0,0,0,465,467,3,66,33,0,466,450,1,0,0,0,466,451,1,0,0,0,466,465,
		1,0,0,0,467,65,1,0,0,0,468,469,5,47,0,0,469,478,5,2,0,0,470,475,3,28,14,
		0,471,472,5,3,0,0,472,474,3,28,14,0,473,471,1,0,0,0,474,477,1,0,0,0,475,
		473,1,0,0,0,475,476,1,0,0,0,476,479,1,0,0,0,477,475,1,0,0,0,478,470,1,
		0,0,0,478,479,1,0,0,0,479,480,1,0,0,0,480,481,5,4,0,0,481,67,1,0,0,0,46,
		72,82,96,108,123,132,136,146,166,169,176,193,196,215,218,236,244,252,260,
		268,274,283,290,312,323,338,347,350,354,360,371,376,387,391,396,406,417,
		421,426,439,443,448,461,466,475,478
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}

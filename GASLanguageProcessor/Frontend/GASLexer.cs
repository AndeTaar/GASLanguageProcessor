//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/thomas/Documents/GASLanguageProcessor/GASLanguageProcessor/Frontend/GAS.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class GASLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, COMMENT=51, IDENTIFIER=52, 
		NUM=53, ALLSTRINGS=54, WS=55;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
		"T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "T__23", "T__24", 
		"T__25", "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", "T__32", 
		"T__33", "T__34", "T__35", "T__36", "T__37", "T__38", "T__39", "T__40", 
		"T__41", "T__42", "T__43", "T__44", "T__45", "T__46", "T__47", "T__48", 
		"T__49", "COMMENT", "IDENTIFIER", "NUM", "ALLSTRINGS", "WS"
	};


	public GASLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public GASLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'canvas'", "'('", "','", "')'", "';'", "'='", "'if'", "'{'", "'}'", 
		"'else'", "'while'", "'for'", "'return'", "'class'", "'list'", "'<'", 
		"'>'", "'number'", "'bool'", "'point'", "'rectangle'", "'square'", "'circle'", 
		"'polygon'", "'text'", "'colour'", "'group'", "'string'", "'line'", "'T'", 
		"'void'", "'||'", "'&&'", "'=='", "'!='", "'<='", "'>='", "'+'", "'-'", 
		"'*'", "'/'", "'%'", "'!'", "'['", "']'", "'true'", "'false'", "'null'", 
		"'.'", "'Group'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, "COMMENT", "IDENTIFIER", "NUM", "ALLSTRINGS", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "GAS.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static GASLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,55,382,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
		7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,1,0,1,0,1,0,1,0,
		1,0,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,6,1,7,1,
		7,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,
		1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,
		1,13,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,17,1,17,
		1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,
		1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,
		1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,
		1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,
		1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,
		1,27,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,31,
		1,31,1,31,1,32,1,32,1,32,1,33,1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,35,
		1,36,1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,42,
		1,42,1,43,1,43,1,44,1,44,1,45,1,45,1,45,1,45,1,45,1,46,1,46,1,46,1,46,
		1,46,1,46,1,47,1,47,1,47,1,47,1,47,1,48,1,48,1,49,1,49,1,49,1,49,1,49,
		1,49,1,50,1,50,1,50,1,50,5,50,322,8,50,10,50,12,50,325,9,50,1,50,1,50,
		1,50,1,50,1,50,1,51,1,51,5,51,334,8,51,10,51,12,51,337,9,51,1,52,1,52,
		3,52,341,8,52,1,52,5,52,344,8,52,10,52,12,52,347,9,52,1,52,1,52,4,52,351,
		8,52,11,52,12,52,352,1,52,3,52,356,8,52,1,52,4,52,359,8,52,11,52,12,52,
		360,3,52,363,8,52,1,53,1,53,1,53,1,53,5,53,369,8,53,10,53,12,53,372,9,
		53,1,53,1,53,1,54,4,54,377,8,54,11,54,12,54,378,1,54,1,54,1,323,0,55,1,
		1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,
		15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,
		27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,
		39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,
		51,103,52,105,53,107,54,109,55,1,0,5,3,0,65,90,95,95,97,122,4,0,48,57,
		65,90,95,95,97,122,1,0,48,57,2,0,34,34,92,92,3,0,9,10,13,13,32,32,393,
		0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,
		0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,
		1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,
		0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,
		1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,
		0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,
		1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,
		0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,
		1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,
		0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,
		0,1,111,1,0,0,0,3,118,1,0,0,0,5,120,1,0,0,0,7,122,1,0,0,0,9,124,1,0,0,
		0,11,126,1,0,0,0,13,128,1,0,0,0,15,131,1,0,0,0,17,133,1,0,0,0,19,135,1,
		0,0,0,21,140,1,0,0,0,23,146,1,0,0,0,25,150,1,0,0,0,27,157,1,0,0,0,29,163,
		1,0,0,0,31,168,1,0,0,0,33,170,1,0,0,0,35,172,1,0,0,0,37,179,1,0,0,0,39,
		184,1,0,0,0,41,190,1,0,0,0,43,200,1,0,0,0,45,207,1,0,0,0,47,214,1,0,0,
		0,49,222,1,0,0,0,51,227,1,0,0,0,53,234,1,0,0,0,55,240,1,0,0,0,57,247,1,
		0,0,0,59,252,1,0,0,0,61,254,1,0,0,0,63,259,1,0,0,0,65,262,1,0,0,0,67,265,
		1,0,0,0,69,268,1,0,0,0,71,271,1,0,0,0,73,274,1,0,0,0,75,277,1,0,0,0,77,
		279,1,0,0,0,79,281,1,0,0,0,81,283,1,0,0,0,83,285,1,0,0,0,85,287,1,0,0,
		0,87,289,1,0,0,0,89,291,1,0,0,0,91,293,1,0,0,0,93,298,1,0,0,0,95,304,1,
		0,0,0,97,309,1,0,0,0,99,311,1,0,0,0,101,317,1,0,0,0,103,331,1,0,0,0,105,
		362,1,0,0,0,107,364,1,0,0,0,109,376,1,0,0,0,111,112,5,99,0,0,112,113,5,
		97,0,0,113,114,5,110,0,0,114,115,5,118,0,0,115,116,5,97,0,0,116,117,5,
		115,0,0,117,2,1,0,0,0,118,119,5,40,0,0,119,4,1,0,0,0,120,121,5,44,0,0,
		121,6,1,0,0,0,122,123,5,41,0,0,123,8,1,0,0,0,124,125,5,59,0,0,125,10,1,
		0,0,0,126,127,5,61,0,0,127,12,1,0,0,0,128,129,5,105,0,0,129,130,5,102,
		0,0,130,14,1,0,0,0,131,132,5,123,0,0,132,16,1,0,0,0,133,134,5,125,0,0,
		134,18,1,0,0,0,135,136,5,101,0,0,136,137,5,108,0,0,137,138,5,115,0,0,138,
		139,5,101,0,0,139,20,1,0,0,0,140,141,5,119,0,0,141,142,5,104,0,0,142,143,
		5,105,0,0,143,144,5,108,0,0,144,145,5,101,0,0,145,22,1,0,0,0,146,147,5,
		102,0,0,147,148,5,111,0,0,148,149,5,114,0,0,149,24,1,0,0,0,150,151,5,114,
		0,0,151,152,5,101,0,0,152,153,5,116,0,0,153,154,5,117,0,0,154,155,5,114,
		0,0,155,156,5,110,0,0,156,26,1,0,0,0,157,158,5,99,0,0,158,159,5,108,0,
		0,159,160,5,97,0,0,160,161,5,115,0,0,161,162,5,115,0,0,162,28,1,0,0,0,
		163,164,5,108,0,0,164,165,5,105,0,0,165,166,5,115,0,0,166,167,5,116,0,
		0,167,30,1,0,0,0,168,169,5,60,0,0,169,32,1,0,0,0,170,171,5,62,0,0,171,
		34,1,0,0,0,172,173,5,110,0,0,173,174,5,117,0,0,174,175,5,109,0,0,175,176,
		5,98,0,0,176,177,5,101,0,0,177,178,5,114,0,0,178,36,1,0,0,0,179,180,5,
		98,0,0,180,181,5,111,0,0,181,182,5,111,0,0,182,183,5,108,0,0,183,38,1,
		0,0,0,184,185,5,112,0,0,185,186,5,111,0,0,186,187,5,105,0,0,187,188,5,
		110,0,0,188,189,5,116,0,0,189,40,1,0,0,0,190,191,5,114,0,0,191,192,5,101,
		0,0,192,193,5,99,0,0,193,194,5,116,0,0,194,195,5,97,0,0,195,196,5,110,
		0,0,196,197,5,103,0,0,197,198,5,108,0,0,198,199,5,101,0,0,199,42,1,0,0,
		0,200,201,5,115,0,0,201,202,5,113,0,0,202,203,5,117,0,0,203,204,5,97,0,
		0,204,205,5,114,0,0,205,206,5,101,0,0,206,44,1,0,0,0,207,208,5,99,0,0,
		208,209,5,105,0,0,209,210,5,114,0,0,210,211,5,99,0,0,211,212,5,108,0,0,
		212,213,5,101,0,0,213,46,1,0,0,0,214,215,5,112,0,0,215,216,5,111,0,0,216,
		217,5,108,0,0,217,218,5,121,0,0,218,219,5,103,0,0,219,220,5,111,0,0,220,
		221,5,110,0,0,221,48,1,0,0,0,222,223,5,116,0,0,223,224,5,101,0,0,224,225,
		5,120,0,0,225,226,5,116,0,0,226,50,1,0,0,0,227,228,5,99,0,0,228,229,5,
		111,0,0,229,230,5,108,0,0,230,231,5,111,0,0,231,232,5,117,0,0,232,233,
		5,114,0,0,233,52,1,0,0,0,234,235,5,103,0,0,235,236,5,114,0,0,236,237,5,
		111,0,0,237,238,5,117,0,0,238,239,5,112,0,0,239,54,1,0,0,0,240,241,5,115,
		0,0,241,242,5,116,0,0,242,243,5,114,0,0,243,244,5,105,0,0,244,245,5,110,
		0,0,245,246,5,103,0,0,246,56,1,0,0,0,247,248,5,108,0,0,248,249,5,105,0,
		0,249,250,5,110,0,0,250,251,5,101,0,0,251,58,1,0,0,0,252,253,5,84,0,0,
		253,60,1,0,0,0,254,255,5,118,0,0,255,256,5,111,0,0,256,257,5,105,0,0,257,
		258,5,100,0,0,258,62,1,0,0,0,259,260,5,124,0,0,260,261,5,124,0,0,261,64,
		1,0,0,0,262,263,5,38,0,0,263,264,5,38,0,0,264,66,1,0,0,0,265,266,5,61,
		0,0,266,267,5,61,0,0,267,68,1,0,0,0,268,269,5,33,0,0,269,270,5,61,0,0,
		270,70,1,0,0,0,271,272,5,60,0,0,272,273,5,61,0,0,273,72,1,0,0,0,274,275,
		5,62,0,0,275,276,5,61,0,0,276,74,1,0,0,0,277,278,5,43,0,0,278,76,1,0,0,
		0,279,280,5,45,0,0,280,78,1,0,0,0,281,282,5,42,0,0,282,80,1,0,0,0,283,
		284,5,47,0,0,284,82,1,0,0,0,285,286,5,37,0,0,286,84,1,0,0,0,287,288,5,
		33,0,0,288,86,1,0,0,0,289,290,5,91,0,0,290,88,1,0,0,0,291,292,5,93,0,0,
		292,90,1,0,0,0,293,294,5,116,0,0,294,295,5,114,0,0,295,296,5,117,0,0,296,
		297,5,101,0,0,297,92,1,0,0,0,298,299,5,102,0,0,299,300,5,97,0,0,300,301,
		5,108,0,0,301,302,5,115,0,0,302,303,5,101,0,0,303,94,1,0,0,0,304,305,5,
		110,0,0,305,306,5,117,0,0,306,307,5,108,0,0,307,308,5,108,0,0,308,96,1,
		0,0,0,309,310,5,46,0,0,310,98,1,0,0,0,311,312,5,71,0,0,312,313,5,114,0,
		0,313,314,5,111,0,0,314,315,5,117,0,0,315,316,5,112,0,0,316,100,1,0,0,
		0,317,318,5,47,0,0,318,319,5,42,0,0,319,323,1,0,0,0,320,322,9,0,0,0,321,
		320,1,0,0,0,322,325,1,0,0,0,323,324,1,0,0,0,323,321,1,0,0,0,324,326,1,
		0,0,0,325,323,1,0,0,0,326,327,5,42,0,0,327,328,5,47,0,0,328,329,1,0,0,
		0,329,330,6,50,0,0,330,102,1,0,0,0,331,335,7,0,0,0,332,334,7,1,0,0,333,
		332,1,0,0,0,334,337,1,0,0,0,335,333,1,0,0,0,335,336,1,0,0,0,336,104,1,
		0,0,0,337,335,1,0,0,0,338,363,5,48,0,0,339,341,5,45,0,0,340,339,1,0,0,
		0,340,341,1,0,0,0,341,345,1,0,0,0,342,344,7,2,0,0,343,342,1,0,0,0,344,
		347,1,0,0,0,345,343,1,0,0,0,345,346,1,0,0,0,346,348,1,0,0,0,347,345,1,
		0,0,0,348,350,5,46,0,0,349,351,7,2,0,0,350,349,1,0,0,0,351,352,1,0,0,0,
		352,350,1,0,0,0,352,353,1,0,0,0,353,363,1,0,0,0,354,356,5,45,0,0,355,354,
		1,0,0,0,355,356,1,0,0,0,356,358,1,0,0,0,357,359,7,2,0,0,358,357,1,0,0,
		0,359,360,1,0,0,0,360,358,1,0,0,0,360,361,1,0,0,0,361,363,1,0,0,0,362,
		338,1,0,0,0,362,340,1,0,0,0,362,355,1,0,0,0,363,106,1,0,0,0,364,370,5,
		34,0,0,365,369,8,3,0,0,366,367,5,92,0,0,367,369,9,0,0,0,368,365,1,0,0,
		0,368,366,1,0,0,0,369,372,1,0,0,0,370,368,1,0,0,0,370,371,1,0,0,0,371,
		373,1,0,0,0,372,370,1,0,0,0,373,374,5,34,0,0,374,108,1,0,0,0,375,377,7,
		4,0,0,376,375,1,0,0,0,377,378,1,0,0,0,378,376,1,0,0,0,378,379,1,0,0,0,
		379,380,1,0,0,0,380,381,6,54,0,0,381,110,1,0,0,0,12,0,323,335,340,345,
		352,355,360,362,368,370,378,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}

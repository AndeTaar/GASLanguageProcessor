color white = Color(255, 255, 255, 1);
Canvas: Struct{
    num width;
    num height;
    color background;
}
struct canvasen = Canvas{width=500, height=250, background=white};

color red = Color(220, 57, 29, 1);
color blue = Color(0, 0, 255, 1);

num Cos(num angle) {
    num result = 1;
    num term = 1;
    num factorial = 1;
    for (num i = 1; i <= 10; i+=1) {
        term *= -angle * angle / ((2 * i) * (2 * i - 1));
        result += term;
    }
    return result;
}

num Sin(num angle) {
    num result = angle;
    num term = angle;
    num factorial = 1;
    for (num i = 1; i <= 10; i+=1) {
        term *= -angle * angle / ((2 * i + 1) * (2 * i));
        result += term;
    }
    return result;
}

list<polygon> polygons = List<polygon>{};

void createCircleDiagram(num radius, num centerPointX, num centerPointY, num percentage, color color1, color color2){
    list<point> points = List<point>{};
    num entireCircle = 2 * 3.14;
    entireCircle = entireCircle * percentage / 100;

    struct center = Point{x=canvasen.width/2, y=canvasen.height/2};

    for (num theta = 0; theta <= entireCircle; theta = theta + 3.14 / 180)
    {
        num x2 = center.x + radius * Sin(theta)*-1;
        num y = center.y + radius * Cos(theta)*-1;
        struct point1 = Point{x=x2, y=y};
        AddToList(point1, points);
    }

    AddToList(center, points);
    circle c = Circle(center, 50, 0, color1, red);
    AddToList(c, polygons);
    polygon poly = Polygon(points, 0, color2, white);
    AddToList(poly, polygons);
    circle c1 = Circle(center, 30, 0, white, white);
    AddToList(c1, polygons);
}

struct center = Point{x=canvasen.width/2, y=canvasen.height/2};

num radius = 50;
createCircleDiagram(radius, center.x, center.y, 81, red, blue);

canvas (canvasen.width, canvasen.height, white);

num canvasWidth = 950;
num canvasHeight = 950;

Color white = Color{red=255, green=255, blue=255, alpha=1};

num g = white.green;

Color red = Color{red=255, green=0, blue=0, alpha=white.alpha};

Color blue = Color{red=0, green=0, blue=255, alpha=white.alpha};
Color black = Color{red=0, green=0, blue=0, alpha=white.alpha};

TypeDef parseTreeNode {
    Rectangle square = Rectangle{},
    Arrow arrowTop = Arrow{stroke=100},
    Arrow arrowBottom = Arrow{stroke=100},
    Arrow operatorArrow = Arrow{},
    Text nodeType = Text{},
    Text operator = Text{color=blue}
}

num width = 100;
num height = 60;
num vertDistance = 40;
num horDistance = 90;

list<parseTreeNode> shapes = List<parseTreeNode>{};

parseTreeNode DrawNodeWithSingleArrow(Point center, string content){
    return parseTreeNode{
        square=Rectangle{
            topLeft=Point{x=center.x-width/2, y=center.y-height/2},
            bottomRight=Point{x=center.x+width/2, y=center.y+height/2},
            stroke=0, color=blue, strokeColor=white, rounding=10
        },
        arrowTop=Arrow{
            start=Point{x=center.x, y=center.y+height/2},
            end=Point{x=center.x, y=center.y+height/2+vertDistance},
            stroke=4
        },
        nodeType=Text{
            point=Point{x=center.x, y=center.y},
            size=16,
            content=content,
            color=white
        }
    };
}


parseTreeNode DrawNode(Point center, string content){
    return parseTreeNode{
        square=Rectangle{
            topLeft=Point{x=center.x-width/2, y=center.y-height/2},
            bottomRight=Point{x=center.x+width/2, y=center.y+height/2},
            stroke=0, color=blue, strokeColor=white, rounding=10
        },
        arrowTop=Arrow{
            start=Point{x=center.x, y=center.y+height/2},
            end=Point{x=center.x+horDistance, y=center.y+height/2+vertDistance},
            stroke=4
        },
        arrowBottom=Arrow{
             start=Point{x=center.x, y=center.y+height/2},
             end=Point{x=center.x-horDistance, y=center.y+height/2+vertDistance},
             stroke=4
        },
        nodeType=Text{
            point=Point{x=center.x, y=center.y},
            size=16,
            content=content,
            color=white
        }
    };
}

parseTreeNode DrawNodeWithOperator(Point center, string content, string operator){
    return parseTreeNode{
        square=Rectangle{
            topLeft=Point{x=center.x-width/2, y=center.y-height/2},
            bottomRight=Point{x=center.x+width/2, y=center.y+height/2},
            stroke=0, color=blue, strokeColor=white, rounding=10
        },
        arrowTop=Arrow{
            start=Point{x=center.x, y=center.y+height/2},
            end=Point{x=center.x+horDistance, y=center.y+height/2+vertDistance},
            stroke=4
        },
        arrowBottom=Arrow{
             start=Point{x=center.x, y=center.y+height/2},
             end=Point{x=center.x-horDistance, y=center.y+height/2+vertDistance},
             stroke=4
        },
        operatorArrow=Arrow{
            start=Point{x=center.x, y=center.y+height/2},
            end=Point{x=center.x, y=center.y+height},
            stroke=4
        },
        nodeType=Text{
            point=Point{x=center.x, y=center.y},
            size=16,
            content=content,
            color=white
        },
        operator=Text{
            point=Point{x=center.x, y=center.y+height+20},
            size=30,
            content=operator,
            color=black
        }
    };
}

Point p = Point{x=canvasWidth/2-30, y=100};

AddToList(DrawNodeWithOperator(p, "Expression", "&amp;&amp;"), shapes);

p.y += height + vertDistance+5;
p.x -= horDistance+30;
AddToList(DrawNodeWithSingleArrow(p, "EquExpr"), shapes);
p.x += 2*horDistance+60;
AddToList(DrawNodeWithSingleArrow(p, "EquExpr"), shapes);

p.y += height + vertDistance+5;
p.x -= 2*horDistance+100;
AddToList(DrawNodeWithSingleArrow(p, "RelExpr"), shapes);
p.x += 2*horDistance+140;
AddToList(DrawNodeWithSingleArrow(p, "RelExpr"), shapes);

p.y += height + vertDistance+5;
p.x -= 2*horDistance+180;
AddToList(DrawNodeWithOperator(p, "BinExpr", "+"), shapes);
Point leftP = Point{x=p.x, y=p.y};

p.x += 2*horDistance+220;
AddToList(DrawNodeWithOperator(p, "BinExpr", "-"), shapes);
Point rightP = Point{x=p.x, y=p.y};

rightP.y += height + vertDistance+5;
rightP.x -= 2*horDistance+310;
AddToList(DrawNodeWithSingleArrow(rightP, "MultExpr"), shapes);
rightP.x += 2*horDistance+30;
AddToList(DrawNodeWithOperator(rightP, "MultExpr", "*"), shapes);

rightP.y += height + vertDistance+5;
rightP.x -= 2*horDistance+30;
AddToList(DrawNodeWithSingleArrow(rightP, "UnaExpr"), shapes);
rightP.y += height + vertDistance+5;
AddToList(DrawNodeWithSingleArrow(rightP, "Number"), shapes);
rightP.y -= height + vertDistance+5;

rightP.x += 2*horDistance-50;
AddToList(DrawNodeWithSingleArrow(rightP, "UnaExpr"), shapes);
rightP.y += height + vertDistance+5;
AddToList(DrawNodeWithSingleArrow(rightP, "Number"), shapes);
rightP.y -= height + vertDistance+5;
rightP.x += 2*horDistance-20;
AddToList(DrawNodeWithSingleArrow(rightP, "UnaExpr"), shapes);
rightP.y += height + vertDistance+5;
AddToList(DrawNodeWithSingleArrow(rightP, "Identifier"), shapes);
rightP.y -= height + vertDistance+5;

leftP.y += height + vertDistance+5;
leftP.x -= 2*horDistance-490;
AddToList(DrawNodeWithSingleArrow(leftP, "MultExpr"), shapes);
leftP.x += 2*horDistance+20;
AddToList(DrawNodeWithOperator(leftP, "MultExpr", "/"), shapes);

leftP.y += height + vertDistance+5;
leftP.x -= 2*horDistance+20;
AddToList(DrawNodeWithSingleArrow(leftP, "UnaExpr"), shapes);
leftP.y += height + vertDistance+5;
AddToList(DrawNodeWithSingleArrow(leftP, "Identifier"), shapes);
leftP.y -= height + vertDistance+5;
leftP.x += 2*horDistance-50;
AddToList(DrawNodeWithSingleArrow(leftP, "UnaExpr"), shapes);
leftP.y += height + vertDistance+5;
AddToList(DrawNodeWithSingleArrow(leftP, "Identifier"), shapes);
leftP.y -= height + vertDistance+5;
leftP.x += 2*horDistance-20;
AddToList(DrawNodeWithSingleArrow(leftP, "UnaExpr"), shapes);
leftP.y += height + vertDistance+5;
AddToList(DrawNodeWithSingleArrow(leftP, "Identifier"), shapes);
leftP.y -= height + vertDistance+5;

Text text = Text{
    point=Point{x=canvasWidth/2, y=rightP.y+220},
    size=40,
    content="     10   +  10     *      a  &amp;&amp;  b   -    !a     /     -b",
    color=black
};

canvas (canvasWidth, canvasHeight, white);
